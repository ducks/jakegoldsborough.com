<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Jake Goldsborough</title>
      <link>https://jakegoldsborough.com</link>
      <description></description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://jakegoldsborough.com/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Wed, 29 Oct 2025 00:00:00 +0000</lastBuildDate>
      <item>
          <title>Shelltrax Part 2: Footer, Tests, and CI</title>
          <pubDate>Wed, 29 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/shelltrax-part-2-footer-tests-ci/</link>
          <guid>https://jakegoldsborough.com/blog/2025/shelltrax-part-2-footer-tests-ci/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/shelltrax-part-2-footer-tests-ci/">&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;jakegoldsborough.com&#x2F;blog&#x2F;2025&#x2F;introducing-shelltrax&#x2F;&quot;&gt;Part 1&lt;&#x2F;a&gt;, I built the core of shelltrax&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a TUI music player in Rust. It had library navigation, file browsing,
audio playback, and a footer with song info and status. One big problem though,
the footer would stop updating after the first song and I really wanted to fix
that.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This post covers three improvements: implementing a proper footer with
playback progress, adding unit tests for the tricky bits, and setting up CI
to keep code quality high.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;running-with-a-limp&quot;&gt;Running With A Limp&lt;&#x2F;h2&gt;
&lt;p&gt;The footer existed from early on (progress bar, time display, track info), but
it had a critical bug: when autoplay advanced to the next track, the progress
bar wouldn&#x27;t reset. It would either keep counting from where the previous song left
off, showing wrong times and eventually overflowing past 100% or it would just
reset back to 0 and not progress. Whatever it did, it didn&#x27;t work.&lt;&#x2F;p&gt;
&lt;p&gt;The bug was in &lt;code&gt;play_next_track()&lt;&#x2F;code&gt;. It would set &lt;code&gt;playback_start&lt;&#x2F;code&gt; and
&lt;code&gt;current_track&lt;&#x2F;code&gt;, but it wouldn&#x27;t reset &lt;code&gt;paused_duration&lt;&#x2F;code&gt; or &lt;code&gt;paused_at&lt;&#x2F;code&gt;. If
you paused the first song for 30 seconds, that 30 seconds would carry over to
every subsequent song, throwing off the footer display completely.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;consolidation-begin-playback&quot;&gt;Consolidation: begin_playback()&lt;&#x2F;h2&gt;
&lt;p&gt;The solution was extracting the timer reset logic into a dedicated method:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;begin_playback&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;track&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;LibraryTrack) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.current_track = Some(track.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.playback_start = Some(Instant::now());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.paused_duration = Duration::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ZERO&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.paused_at = None;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.playback_duration = track.duration.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now &lt;code&gt;play_next_track()&lt;&#x2F;code&gt; calls &lt;code&gt;begin_playback()&lt;&#x2F;code&gt; instead of manually setting
fields. This ensures all timing state resets properly when advancing to the
next song, whether manually or via autoplay.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementation-tracking-time-correctly&quot;&gt;Implementation: Tracking Time Correctly&lt;&#x2F;h2&gt;
&lt;p&gt;The app needs to track multiple timing values:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;App {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;playback_start&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Instant&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;playback_duration&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;paused_at&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Instant&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;paused_duration&lt;&#x2F;span&gt;&lt;span&gt;: Duration,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ... other fields
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When a song starts, we record &lt;code&gt;playback_start&lt;&#x2F;code&gt;. When the user pauses, we
record &lt;code&gt;paused_at&lt;&#x2F;code&gt;. When they unpause, we add the pause duration to
&lt;code&gt;paused_duration&lt;&#x2F;code&gt; and clear &lt;code&gt;paused_at&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The footer calculation looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; elapsed = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(paused_at) = app.paused_at {
&lt;&#x2F;span&gt;&lt;span&gt;    paused_at.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;duration_since&lt;&#x2F;span&gt;&lt;span&gt;(start)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;duration_since&lt;&#x2F;span&gt;&lt;span&gt;(start)
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; adjusted = elapsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;saturating_sub&lt;&#x2F;span&gt;&lt;span&gt;(app.paused_duration);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If currently paused, elapsed time is frozen at the pause moment. Otherwise,
it&#x27;s the time since playback started. Then we subtract all the accumulated
pause time to get the actual playback position.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;saturating_sub&lt;&#x2F;code&gt; is important. Without it, if &lt;code&gt;paused_duration&lt;&#x2F;code&gt; somehow
exceeded &lt;code&gt;elapsed&lt;&#x2F;code&gt; (race condition, clock skew, whatever), you&#x27;d get an
underflow panic. &lt;code&gt;saturating_sub&lt;&#x2F;code&gt; clamps to zero instead.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;layout-three-lines-of-footer&quot;&gt;Layout: Three Lines of Footer&lt;&#x2F;h2&gt;
&lt;p&gt;The footer uses a vertical layout with three lines:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; layout = Layout::default()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;direction&lt;&#x2F;span&gt;&lt;span&gt;(Direction::Vertical)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;constraints&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;        Constraint::Length(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Progress bar
&lt;&#x2F;span&gt;&lt;span&gt;        Constraint::Length(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Time display
&lt;&#x2F;span&gt;&lt;span&gt;        Constraint::Length(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Track info
&lt;&#x2F;span&gt;&lt;span&gt;    ])
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(inner);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Line 1 is a &lt;code&gt;Gauge&lt;&#x2F;code&gt; widget showing the ratio of elapsed to total time. Line 2
shows &lt;code&gt;MM:SS &#x2F; MM:SS&lt;&#x2F;code&gt;. Line 3 shows &lt;code&gt;Artist - Title - Album&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The progress bar ratio:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ratio = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; total.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_secs_f64&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    adjusted.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_secs_f64&lt;&#x2F;span&gt;&lt;span&gt;() &#x2F; total.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_secs_f64&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Clamp it to &lt;code&gt;1.0&lt;&#x2F;code&gt; max so the gauge doesn&#x27;t overflow if the elapsed time
somehow exceeds the track duration (can happen with malformed metadata).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;testing-what-actually-needs-tests&quot;&gt;Testing: What Actually Needs Tests?&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m not a fan of testing UI rendering code. It&#x27;s tedious, fragile, and
doesn&#x27;t catch the bugs that matter. What I do test is the state management
logic that the UI depends on.&lt;&#x2F;p&gt;
&lt;p&gt;For shelltrax, the critical logic is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Playback state transitions (playing, paused, stopped)&lt;&#x2F;li&gt;
&lt;li&gt;Time tracking during pause&#x2F;unpause cycles&lt;&#x2F;li&gt;
&lt;li&gt;Library state management (artist&#x2F;album hierarchy)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I added two test modules: one in &lt;code&gt;app.rs&lt;&#x2F;code&gt; for playback logic, one in
&lt;code&gt;library.rs&lt;&#x2F;code&gt; for library state.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;testing-playback-state&quot;&gt;Testing Playback State&lt;&#x2F;h3&gt;
&lt;p&gt;Four tests in &lt;code&gt;app.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;test_begin_playback_resets_timers:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_begin_playback_resets_timers&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; app = App::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    app.playback_start = Some(Instant::now());
&lt;&#x2F;span&gt;&lt;span&gt;    app.paused_duration = Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    app.paused_at = Some(Instant::now());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; track = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;create_test_track&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;begin_playback&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;track);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(app.playback_start.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(app.paused_duration, Duration::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ZERO&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(app.paused_at.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_none&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When starting a new track, all the timing state should reset. If it didn&#x27;t,
the footer would show stale pause data from the previous song.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;test_toggle_pause_accumulates_paused_duration:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_toggle_pause_accumulates_paused_duration&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; app = App::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; start = Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;    app.paused_at = Some(start);
&lt;&#x2F;span&gt;&lt;span&gt;    app.paused_duration = Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;toggle_pause&lt;&#x2F;span&gt;&lt;span&gt;();  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Unpause
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::thread::sleep(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;toggle_pause&lt;&#x2F;span&gt;&lt;span&gt;();  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Pause again
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(app.paused_at.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_none&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(app.paused_duration &amp;gt; Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This test verifies that pausing multiple times accumulates the total paused
duration. The &lt;code&gt;sleep&lt;&#x2F;code&gt; is gross but necessary to test time-based logic without
mocking the clock (which would require dependency injection, which is
overkill for a hobby project).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;testing-library-state&quot;&gt;Testing Library State&lt;&#x2F;h3&gt;
&lt;p&gt;Six tests in &lt;code&gt;library.rs&lt;&#x2F;code&gt; covering the artist&#x2F;album&#x2F;track hierarchy:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;test_add_tracks_creates_structure:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_add_tracks_creates_structure&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; lib = LibraryState::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tracks = vec![
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;create_test_track&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Artist A&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Album 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Track 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;create_test_track&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Artist A&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Album 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Track 2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;create_test_track&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Artist B&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Album 2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Track 3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    lib.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_tracks&lt;&#x2F;span&gt;&lt;span&gt;(tracks);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(lib.artists.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(lib.artists[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].name, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Artist A&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(lib.artists[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].albums.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(lib.artists[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].albums[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].tracks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This validates the library builds the correct tree structure when adding
tracks. If the grouping logic broke, you&#x27;d end up with duplicate artists or
albums in the wrong places.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;test_visible_tracks_for_album:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_visible_tracks_for_album&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; lib = LibraryState::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    lib.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_tracks&lt;&#x2F;span&gt;&lt;span&gt;(vec![
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;create_test_track&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Artist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Album 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Track 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;create_test_track&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Artist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Album 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Track 2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;create_test_track&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Artist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Album 2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Track 3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    ]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    lib.selection = Some(LibrarySelection::Album {
&lt;&#x2F;span&gt;&lt;span&gt;        artist_index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        album_index: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tracks = lib.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;visible_tracks&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(tracks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(tracks[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].title, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Track 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(tracks[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].title, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Track 2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;visible_tracks&lt;&#x2F;code&gt; method returns different results depending on whether
an artist or an album is selected. This test ensures album selection filters
correctly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ci-keeping-code-quality-high&quot;&gt;CI: Keeping Code Quality High&lt;&#x2F;h2&gt;
&lt;p&gt;GitHub Actions makes CI trivial for Rust projects. The workflow file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pull_request&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;actions&#x2F;checkout@v4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;install rust
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dtolnay&#x2F;rust-toolchain@stable
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;components&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;clippy
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cache dependencies
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;actions&#x2F;cache@v4
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          ~&#x2F;.cargo&#x2F;bin&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          ~&#x2F;.cargo&#x2F;registry&#x2F;index&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          ~&#x2F;.cargo&#x2F;registry&#x2F;cache&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          ~&#x2F;.cargo&#x2F;git&#x2F;db&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;          target&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ runner.os }}-cargo-${{ hashFiles(&amp;#39;**&#x2F;Cargo.lock&amp;#39;) }}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;install system dependencies
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        sudo apt-get update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        sudo apt-get install -y libasound2-dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;run tests
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cargo test --verbose
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;run clippy
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cargo clippy -- -D warnings
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The important bits:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Dependency caching:&lt;&#x2F;strong&gt; Without caching, every CI run would download and
compile all dependencies from scratch. With caching, subsequent runs reuse
compiled dependencies, dropping build time from several minutes to under 30
seconds.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;System dependencies:&lt;&#x2F;strong&gt; The audio libraries (cpal, rodio) need ALSA headers
to compile. &lt;code&gt;libasound2-dev&lt;&#x2F;code&gt; provides those on Ubuntu.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Clippy with &lt;code&gt;-D warnings&lt;&#x2F;code&gt;:&lt;&#x2F;strong&gt; This flag treats all warnings as errors. It&#x27;s
strict, but it keeps code quality high. If clippy suggests a fix, you either
apply it or add an explicit &lt;code&gt;#[allow(...)]&lt;&#x2F;code&gt; annotation explaining why you&#x27;re
ignoring it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;&#x2F;h2&gt;
&lt;p&gt;The footer works. Tests pass. CI keeps the codebase clean. Shelltrax now
feels like a real music player instead of a tech demo.&lt;&#x2F;p&gt;
&lt;p&gt;Running &lt;code&gt;cargo test&lt;&#x2F;code&gt; shows 10 passing tests:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;running 10 tests
&lt;&#x2F;span&gt;&lt;span&gt;test app::tests::test_begin_playback_resets_timers ... ok
&lt;&#x2F;span&gt;&lt;span&gt;test app::tests::test_toggle_pause_accumulates_paused_duration ... ok
&lt;&#x2F;span&gt;&lt;span&gt;test app::tests::test_toggle_pause_cycles_state ... ok
&lt;&#x2F;span&gt;&lt;span&gt;test app::tests::test_toggle_pause_sets_paused_at ... ok
&lt;&#x2F;span&gt;&lt;span&gt;test library::tests::test_add_tracks_creates_structure ... ok
&lt;&#x2F;span&gt;&lt;span&gt;test library::tests::test_toggle_expanded ... ok
&lt;&#x2F;span&gt;&lt;span&gt;test library::tests::test_track_by_path_finds_track ... ok
&lt;&#x2F;span&gt;&lt;span&gt;test library::tests::test_track_by_path_returns_none_for_missing ... ok
&lt;&#x2F;span&gt;&lt;span&gt;test library::tests::test_visible_tracks_for_album ... ok
&lt;&#x2F;span&gt;&lt;span&gt;test library::tests::test_visible_tracks_for_artist ... ok
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;test result: ok. 10 passed; 0 failed; 0 ignored; 0 measured
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And &lt;code&gt;cargo clippy&lt;&#x2F;code&gt; stays green with zero warnings.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s Next?&lt;&#x2F;h2&gt;
&lt;p&gt;The core functionality is solid, but there are still features I want:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;config system&lt;&#x2F;li&gt;
&lt;li&gt;seeking&lt;&#x2F;li&gt;
&lt;li&gt;better metadata handling&lt;&#x2F;li&gt;
&lt;li&gt;vi keybindings&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But for now, shelltrax does what I needed it to do: play music in the
terminal with a proper UI that shows what&#x27;s happening.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Code&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;shelltrax&quot;&gt;github.com&#x2F;ducks&#x2F;shelltrax&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Replacing MessageBus Pub&#x2F;Sub with REST APIs: Fixing Production Outages</title>
          <pubDate>Mon, 27 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/replacing-messagebus-with-http-apis/</link>
          <guid>https://jakegoldsborough.com/blog/2025/replacing-messagebus-with-http-apis/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/replacing-messagebus-with-http-apis/">&lt;p&gt;We&#x27;re converting one of our infrastructure services from MessageBus pub&#x2F;sub to
a synchronous REST API. This isn&#x27;t a protocol change or upgrade - both
architectures use HTTP. This is about replacing fire-and-forget asynchronous
messaging with request&#x2F;response patterns that provide immediate feedback.&lt;&#x2F;p&gt;
&lt;p&gt;The control plane manages hundreds of Discourse forums across multiple data
centers. It needs to orchestrate PostgreSQL user and database creation across
these distributed clusters.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Our &lt;code&gt;postgres-manager&lt;&#x2F;code&gt; service handles PostgreSQL user and database lifecycle
for Discourse hosted sites. It was built using &lt;code&gt;ServiceSkeleton&lt;&#x2F;code&gt;, a Ruby
framework for message-driven services, subscribing to MessageBus channels for
commands.&lt;&#x2F;p&gt;
&lt;p&gt;MessageBus uses HTTP long-polling for pub&#x2F;sub messaging. Publishers send
messages to channels, subscribers open long-lived HTTP connections and wait for
messages to arrive. It works well for many use cases, but we&#x27;ve hit two
critical problems:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;No feedback mechanism. When the control plane published a message like
&quot;create database for site X&quot;, it had no way to know if the operation succeeded
or failed. The message was sent and forgotten.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Message replay on restarts. MessageBus keeps a backlog of messages. When
postgres-manager restarts, it replays unacknowledged messages, causing duplicate
operations. We&#x27;ve had multiple production outages from databases being recreated
or users being decommissioned twice.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The message replay issue is the immediate trigger, but the lack of feedback is
the underlying architectural problem. We need synchronous request&#x2F;response
patterns with immediate success&#x2F;failure feedback.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution-rest-api-with-request-response&quot;&gt;The Solution: REST API with Request&#x2F;Response&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re converting postgres-manager to a Sinatra HTTP service that responds
synchronously to requests. Instead of subscribing to MessageBus channels, it
will expose REST endpoints:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;POST &#x2F;databases&lt;&#x2F;code&gt; - Create database and user&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;DELETE &#x2F;databases&#x2F;:username&lt;&#x2F;code&gt; - Decommission database&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;POST &#x2F;users&lt;&#x2F;code&gt; - Create user (triggers sync)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;DELETE &#x2F;users&#x2F;:username&lt;&#x2F;code&gt; - Decommission user&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;POST &#x2F;sync&lt;&#x2F;code&gt; - Sync all databases&#x2F;users from control plane&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each endpoint will return an immediate response with proper HTTP status codes:
200 for success, 401 for auth failures, 400 for bad parameters, 500 for server
errors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;before-serviceskeleton-with-messagebus&quot;&gt;Before: ServiceSkeleton with MessageBus&lt;&#x2F;h3&gt;
&lt;p&gt;The old implementation used ServiceSkeleton to subscribe to MessageBus:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;message_bus = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MessageBus&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HTTPClient&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  config.control_plane_base_url,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;headers: &lt;&#x2F;span&gt;&lt;span&gt;{ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Discourse-Access-Token&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; config.control_plane_token }
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;message_bus.subscribe(config.message_bus_channel) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; message[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create_user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create_db&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    sync
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;decommission_db&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    decommission_db(message[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dbname&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;decommission_user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    decommission_user(message[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The control plane would publish messages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PostgresManagerPublisher&lt;&#x2F;span&gt;&lt;span&gt;.create_db(owner, cluster_name)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Fire and forget - no response
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;after-sinatra-http-service&quot;&gt;After: Sinatra HTTP Service&lt;&#x2F;h3&gt;
&lt;p&gt;The new implementation uses Sinatra with proper HTTP patterns:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;before &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return if &lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;health&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;metrics&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;include?&lt;&#x2F;span&gt;&lt;span&gt;(request.path_info)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  auth_header = request.env[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;HTTP_AUTHORIZATION&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!auth_header || !auth_header.start_with?(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bearer &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    halt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;401&lt;&#x2F;span&gt;&lt;span&gt;, json(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unauthorized&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AUTH_REQUIRED&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  token = auth_header.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bearer &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; token != config[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:api_key&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    halt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;401&lt;&#x2F;span&gt;&lt;span&gt;, json(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unauthorized&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;INVALID_TOKEN&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;post &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;databases&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  body = parse_json_body
&lt;&#x2F;span&gt;&lt;span&gt;  cluster = body[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cluster&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;  username = body[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cluster != config[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:container_name&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    halt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;400&lt;&#x2F;span&gt;&lt;span&gt;, json(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cluster mismatch&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;code: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CLUSTER_MISMATCH&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expected:&lt;&#x2F;span&gt;&lt;span&gt; config[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:container_name&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;received:&lt;&#x2F;span&gt;&lt;span&gt; cluster
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  sync
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  json(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;status: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;message: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Database sync completed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cluster:&lt;&#x2F;span&gt;&lt;span&gt; cluster
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;delete &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;databases&#x2F;:username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  username = params[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;  decommission_db(username)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  json(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;status: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;message: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Database decommissioned&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username:&lt;&#x2F;span&gt;&lt;span&gt; username
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The control plane will make HTTP requests and get immediate responses:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PostgresManagerHttpClient&lt;&#x2F;span&gt;&lt;span&gt;.create_db(owner, cluster_name)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Returns { &amp;quot;status&amp;quot; =&amp;gt; &amp;quot;success&amp;quot;, &amp;quot;message&amp;quot; =&amp;gt; &amp;quot;...&amp;quot; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Or raises PostgresManagerError on failure
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;http-client-with-proper-error-handling&quot;&gt;HTTP Client with Proper Error Handling&lt;&#x2F;h2&gt;
&lt;p&gt;The new HTTP client provides clear error handling:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PostgresManagerHttpClient
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PostgresManagerError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;StandardError&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PostgresManagerTimeout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PostgresManagerError&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PostgresManagerAuthError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PostgresManagerError&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create_db&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;owner&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cluster_name&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    call_postgres_manager(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cluster_name:&lt;&#x2F;span&gt;&lt;span&gt; cluster_name,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;method: :post&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;path: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;databases&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;body: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cluster:&lt;&#x2F;span&gt;&lt;span&gt; cluster_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username:&lt;&#x2F;span&gt;&lt;span&gt; owner, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;private
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;call_postgres_manager&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cluster_name&lt;&#x2F;span&gt;&lt;span&gt;:, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;:, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;:, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    api_key = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ENV&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;POSTGRES_MANAGER_API_KEY&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;POSTGRES_MANAGER_API_KEY not configured&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!api_key
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    base_url = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ENV&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;POSTGRES_MANAGER_BASE_URL&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] ||
&lt;&#x2F;span&gt;&lt;span&gt;               &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;postgres-manager-&lt;&#x2F;span&gt;&lt;span&gt;#{cluster_name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:9105&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    uri = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;URI&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;#{base_url}#{path}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    http = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Net&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HTTP&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(uri.host, uri.port)
&lt;&#x2F;span&gt;&lt;span&gt;    http.open_timeout = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;    http.read_timeout = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    request = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;method
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Net&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HTTP&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(uri)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:delete &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;then &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Net&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HTTP&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Delete&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(uri)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    request[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Authorization&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bearer &lt;&#x2F;span&gt;&lt;span&gt;#{api_key}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    request[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Content-Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&#x2F;json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    request.body = body.to_json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; body
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;      response = http.request(request)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; response.code.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_i
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;299
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; response.body.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_s&lt;&#x2F;span&gt;&lt;span&gt;.empty?
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JSON&lt;&#x2F;span&gt;&lt;span&gt;.parse(response.body)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;401
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PostgresManagerAuthError&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Authentication failed: &lt;&#x2F;span&gt;&lt;span&gt;#{response.body}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;400&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;499
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PostgresManagerError&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Client error (&lt;&#x2F;span&gt;&lt;span&gt;#{response.code}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span&gt;#{response.body}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;599
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PostgresManagerError&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Server error (&lt;&#x2F;span&gt;&lt;span&gt;#{response.code}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span&gt;#{response.body}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;rescue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Net&lt;&#x2F;span&gt;&lt;span&gt;::OpenTimeout, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Net&lt;&#x2F;span&gt;&lt;span&gt;::ReadTimeout
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PostgresManagerTimeout&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Request timed out for &lt;&#x2F;span&gt;&lt;span&gt;#{uri}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;rescue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Errno&lt;&#x2F;span&gt;&lt;span&gt;::ECONNREFUSED
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PostgresManagerError&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Connection refused to &lt;&#x2F;span&gt;&lt;span&gt;#{uri}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;testing-strategy-unit-and-integration-tests&quot;&gt;Testing Strategy: Unit and Integration Tests&lt;&#x2F;h2&gt;
&lt;p&gt;The HTTP service has a test suite with 54 tests covering both unit and
integration testing:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;unit-tests-16-tests-no-postgresql-required&quot;&gt;Unit Tests (16 tests, no PostgreSQL required)&lt;&#x2F;h3&gt;
&lt;p&gt;Unit tests use WebMock to stub external dependencies:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;it &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;makes POST request to &#x2F;databases with correct parameters&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  stub_request(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;#{base_url}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;databases&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .with(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;body: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cluster: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flex001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }.to_json,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;headers: &lt;&#x2F;span&gt;&lt;span&gt;{ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Authorization&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Bearer test-api-key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    .to_return(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;status: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;body: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;status: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;message: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Database sync completed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }.to_json
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PostgresManagerHttpClient&lt;&#x2F;span&gt;&lt;span&gt;.create_db(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flex001&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  expect(result[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]).to eq(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These tests run fast (under 1 second) and validate HTTP client logic, metrics
tracking, and configuration handling without requiring PostgreSQL.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;integration-tests-38-tests-with-real-postgresql&quot;&gt;Integration Tests (38 tests, with real PostgreSQL)&lt;&#x2F;h3&gt;
&lt;p&gt;Integration tests use Docker to automatically start&#x2F;stop PostgreSQL and test
real database operations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;it &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;creates database and user&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  multisite_config = {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test123&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;database&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;example_discourse&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  stub_request(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:get&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;mothership.test&#x2F;api&#x2F;multisite_config?container_name=test-cluster&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .to_return(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;status: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;body: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JSON&lt;&#x2F;span&gt;&lt;span&gt;.dump(multisite_config))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  result = sync.perform
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Verify in actual PostgreSQL
&lt;&#x2F;span&gt;&lt;span&gt;  sync.database.with_db(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;    user_result = db.exec_params(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SELECT usename FROM pg_user WHERE usename = $1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;])
&lt;&#x2F;span&gt;&lt;span&gt;    expect(user_result.ntuples).to eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    db_result = db.exec_params(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SELECT datname FROM pg_database WHERE datname = $1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;example_discourse&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;])
&lt;&#x2F;span&gt;&lt;span&gt;    expect(db_result.ntuples).to eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;idempotency-tests&quot;&gt;Idempotency Tests&lt;&#x2F;h3&gt;
&lt;p&gt;Critical tests verify the service handles message replay scenarios that caused
production outages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;it &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;handles rapid duplicate creates (race condition simulation)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  threads = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;.times.map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;        database.create(test_db, test_user)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;rescue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;PG&lt;&#x2F;span&gt;&lt;span&gt;::DuplicateDatabase
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Expected - one thread wins, other gets duplicate error
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  threads.each(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:join&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Verify only one database created
&lt;&#x2F;span&gt;&lt;span&gt;  database.with_db(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;    result = db.exec_params(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SELECT datname FROM pg_database WHERE datname = $1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, [test_db])
&lt;&#x2F;span&gt;&lt;span&gt;    expect(result.ntuples).to eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These tests validate that calling create operations multiple times (as happens
during message replay) doesn&#x27;t cause crashes or duplicate resources.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;migration-strategy&quot;&gt;Migration Strategy&lt;&#x2F;h2&gt;
&lt;p&gt;We can&#x27;t switch all clusters at once. The migration strategy:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Deploy HTTP version alongside MessageBus - Run both in separate
containers&lt;&#x2F;li&gt;
&lt;li&gt;Test HTTP version manually - Verify endpoints work, check metrics&lt;&#x2F;li&gt;
&lt;li&gt;Switch control plane to HTTP - Deploy control plane changes, monitor logs&lt;&#x2F;li&gt;
&lt;li&gt;Clean up MessageBus - Stop old containers, remove environment variables&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Both services can run simultaneously during migration, and rollback is just
reverting the control plane code and restarting services.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;expected-results&quot;&gt;Expected Results&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;No more duplicate operations from message replay&lt;&#x2F;li&gt;
&lt;li&gt;Immediate visibility into success&#x2F;failure&lt;&#x2F;li&gt;
&lt;li&gt;Proper error handling with retries&lt;&#x2F;li&gt;
&lt;li&gt;Easy to test with curl or standard HTTP tools&lt;&#x2F;li&gt;
&lt;li&gt;Can be load balanced through standard proxies&lt;&#x2F;li&gt;
&lt;li&gt;Standard HTTP monitoring and metrics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;outcomes&quot;&gt;Outcomes&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fire-and-forget messaging has hidden costs. The lack of feedback makes
debugging production issues extremely difficult. We don&#x27;t know if operations
fail until customers complain.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Message replay is a feature until it&#x27;s a bug. MessageBus&#x27;s backlog replay is
useful for reliable message delivery, but causes havoc when operations aren&#x27;t
idempotent.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Different HTTP patterns, same protocol. Both MessageBus (HTTP long-polling)
and our REST API use HTTP for transport, but serve fundamentally different
communication patterns. MessageBus uses HTTP to implement pub&#x2F;sub messaging
(asynchronous, one-to-many), while REST implements request&#x2F;response
(synchronous, one-to-one). The choice isn&#x27;t HTTP vs something else - it&#x27;s
choosing the right messaging pattern for your use case.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Testing gets easier with simpler patterns. The old MessageBus setup requires
a full environment. The HTTP version can be tested with simple request&#x2F;response
stubs.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;This migration will take our infrastructure service from fire-and-forget
messaging to synchronous request&#x2F;response patterns. The expected result: no more
duplicate operations, immediate feedback on success&#x2F;failure, and much simpler
debugging. Sometimes the solution isn&#x27;t choosing new technology - it&#x27;s choosing
the right pattern for your use case.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;current-status&quot;&gt;Current Status&lt;&#x2F;h2&gt;
&lt;p&gt;The HTTP service implementation is complete and tested:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Modular architecture with 6 separated modules (Config, Database, User,
Client, Sync, Metrics)&lt;&#x2F;li&gt;
&lt;li&gt;Test suite (16 unit tests, 38 integration, all passing)&lt;&#x2F;li&gt;
&lt;li&gt;RuboCop clean (zero offenses)&lt;&#x2F;li&gt;
&lt;li&gt;Security fixes (parameterized queries, retry limits)&lt;&#x2F;li&gt;
&lt;li&gt;GitHub Actions CI configured and passing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The service is production-ready and awaiting deployment to test clusters. Once
validated with real PostgreSQL operations and monitored for stability, we&#x27;ll
proceed with gradual rollout to production infrastructure.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building The Guest Spot: Part 2 - Two Refactors</title>
          <pubDate>Sun, 26 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-the-guest-spot-part-2/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-the-guest-spot-part-2/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-the-guest-spot-part-2/">&lt;p&gt;In &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-the-guest-spot-part-1&#x2F;&quot;&gt;Part 1&lt;&#x2F;a&gt;, I built an Instagram-style showcase using a custom &lt;code&gt;GuestSpotPost&lt;&#x2F;code&gt; model. It worked. But it also meant maintaining a parallel data structure instead of leveraging what Discourse already provides.&lt;&#x2F;p&gt;
&lt;p&gt;This post covers two major refactors: first from custom models to Discourse Topics, then from custom feed infrastructure to plugin outlets. Each time, less code gave me more features.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-refactor&quot;&gt;Why Refactor?&lt;&#x2F;h2&gt;
&lt;p&gt;The custom model approach had problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Duplicate logic: Comments, moderation, spam protection already exist for Topics&lt;&#x2F;li&gt;
&lt;li&gt;Extra maintenance: Every time Discourse updates, potential breakage&lt;&#x2F;li&gt;
&lt;li&gt;Missing features: No native file upload, no revision history, no trust levels&lt;&#x2F;li&gt;
&lt;li&gt;More code: Separate serializers, separate permissions, separate everything&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Discourse Topics already have everything we need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;First post holds the caption and images&lt;&#x2F;li&gt;
&lt;li&gt;Title can be auto-generated&lt;&#x2F;li&gt;
&lt;li&gt;Categories handle public vs private&lt;&#x2F;li&gt;
&lt;li&gt;Pinning is built-in&lt;&#x2F;li&gt;
&lt;li&gt;Commenting works out of the box&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The showcase is just a custom view of Topics in the &quot;Public Feed&quot; category.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-refactor&quot;&gt;The Refactor&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;backend-changes&quot;&gt;Backend Changes&lt;&#x2F;h3&gt;
&lt;p&gt;Deleted the entire &lt;code&gt;GuestSpotPost&lt;&#x2F;code&gt; model and migrations. Instead, the controller now works with Topics:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# app&#x2F;controllers&#x2F;guest_spot&#x2F;posts_controller.rb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;index
&lt;&#x2F;span&gt;&lt;span&gt;  category_id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CategoryHelper&lt;&#x2F;span&gt;&lt;span&gt;.public_feed_category_id
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  topics = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Topic
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category_id:&lt;&#x2F;span&gt;&lt;span&gt; category_id)
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deleted_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .includes(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;posts: :uploads&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .order(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;created_at: :desc&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .limit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  pinned_topics = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Topic
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category_id:&lt;&#x2F;span&gt;&lt;span&gt; category_id)
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deleted_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .where.not(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pinned_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .includes(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;posts: :uploads&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .order(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;created_at: :desc&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  render &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;json: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;posts:&lt;&#x2F;span&gt;&lt;span&gt; serialize_data(topics, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GuestSpotPostSerializer&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pinned:&lt;&#x2F;span&gt;&lt;span&gt; serialize_data(pinned_topics, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GuestSpotPostSerializer&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The serializer extracts what we need from Topics:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# app&#x2F;serializers&#x2F;guest_spot_post_serializer.rb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GuestSpotPostSerializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ApplicationSerializer
&lt;&#x2F;span&gt;&lt;span&gt;  attributes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:username&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:caption&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:image_urls&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:created_at&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:pinned
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;caption
&lt;&#x2F;span&gt;&lt;span&gt;    object.first_post&amp;amp;.raw || &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;image_urls
&lt;&#x2F;span&gt;&lt;span&gt;    object.first_post.uploads.map { |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;upload&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;UrlHelper&lt;&#x2F;span&gt;&lt;span&gt;.absolute(upload.url) }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pinned
&lt;&#x2F;span&gt;&lt;span&gt;    object.pinned_at.present?
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Caption is the post content. Images come from uploads. Pinned status is the native &lt;code&gt;pinned_at&lt;&#x2F;code&gt; field.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;creating-posts&quot;&gt;Creating Posts&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of &lt;code&gt;GuestSpotPost.create&lt;&#x2F;code&gt;, we use &lt;code&gt;TopicCreator&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create
&lt;&#x2F;span&gt;&lt;span&gt;  category_id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CategoryHelper&lt;&#x2F;span&gt;&lt;span&gt;.public_feed_category_id
&lt;&#x2F;span&gt;&lt;span&gt;  title = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;#{current_user.username}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span&gt;#{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_i&lt;&#x2F;span&gt;&lt;span&gt;}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  topic_creator = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TopicCreator&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    current_user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Guardian&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(current_user),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category:&lt;&#x2F;span&gt;&lt;span&gt; category_id,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title:&lt;&#x2F;span&gt;&lt;span&gt; title,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;raw:&lt;&#x2F;span&gt;&lt;span&gt; params[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:caption&lt;&#x2F;span&gt;&lt;span&gt;] || &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  topic = topic_creator.create
&lt;&#x2F;span&gt;&lt;span&gt;  render_serialized(topic, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GuestSpotPostSerializer&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Auto-generated titles keep them unique. The caption goes in the first post&#x27;s raw content. Image uploads attach automatically through Discourse&#x27;s existing upload system.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;frontend-changes&quot;&gt;Frontend Changes&lt;&#x2F;h3&gt;
&lt;p&gt;Frontend barely changed. The serializer provides the same JSON structure, so components worked as-is. The only update was changing &lt;code&gt;@post.id&lt;&#x2F;code&gt; to reference topic IDs instead of custom model IDs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-this-got-us&quot;&gt;What This Got Us&lt;&#x2F;h3&gt;
&lt;p&gt;The refactor from custom models to Topics gave us:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Comments work natively (no custom implementation)&lt;&#x2F;li&gt;
&lt;li&gt;Moderation tools work (flags, hiding, deleting)&lt;&#x2F;li&gt;
&lt;li&gt;File uploads work (native uploader)&lt;&#x2F;li&gt;
&lt;li&gt;Revision history works (edit tracking)&lt;&#x2F;li&gt;
&lt;li&gt;Trust levels work (spam protection)&lt;&#x2F;li&gt;
&lt;li&gt;All for free, by using what Discourse already provides&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But I still had a custom feed with its own routes, controllers, and serializers. That was the next problem to solve.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;going-native-deleting-the-custom-feed&quot;&gt;Going Native: Deleting the Custom Feed&lt;&#x2F;h2&gt;
&lt;p&gt;In Part 1, I built a custom &lt;code&gt;GuestSpotPost&lt;&#x2F;code&gt; model. Then I realized that was
overkill and refactored to use Discourse Topics. But I kept the custom feed
with its own routes, controllers, and serializers.&lt;&#x2F;p&gt;
&lt;p&gt;After implementing that custom feed, I realized there was an uncomfortable
disconnect. Users would browse an Instagram-style feed, click a post, and
suddenly land in Discourse&#x27;s standard topic view. The context switch was jarring.&lt;&#x2F;p&gt;
&lt;p&gt;The question became: why maintain a custom feed at all? If the custom model
was unnecessary, maybe the custom feed was too.&lt;&#x2F;p&gt;
&lt;p&gt;Discourse already has everything we need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Category pages show topic lists&lt;&#x2F;li&gt;
&lt;li&gt;Category permissions control who can post and who can view&lt;&#x2F;li&gt;
&lt;li&gt;Native pinning highlights featured content&lt;&#x2F;li&gt;
&lt;li&gt;Theme system allows extensive visual customization&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Instead of maintaining a parallel feed system, we could just make the Public
Feed category look great using plugin outlets.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-deletion&quot;&gt;The Deletion&lt;&#x2F;h3&gt;
&lt;p&gt;I deleted the entire custom feed infrastructure:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Removed (1,078 lines)&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Custom feed routes and controllers (&lt;code&gt;guest_spot&#x2F;feed_controller.rb&lt;&#x2F;code&gt;,
&lt;code&gt;guest_spot&#x2F;posts_controller.rb&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Custom post serializer (&lt;code&gt;guest_spot_post_serializer.rb&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;All custom Ember components (&lt;code&gt;guest-spot-feed.gjs&lt;&#x2F;code&gt;,
&lt;code&gt;guest-spot-post-card.gjs&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Custom route definitions and templates&lt;&#x2F;li&gt;
&lt;li&gt;Multiple initializers for hiding UI elements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Added (264 lines)&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Single plugin outlet connector:
&lt;code&gt;assets&#x2F;javascripts&#x2F;discourse&#x2F;connectors&#x2F;topic-list-item&#x2F;guest-spot-item.gjs&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;CSS Grid layout for responsive cards&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Net result: 814 fewer lines of code.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;plugin-outlets-the-right-pattern&quot;&gt;Plugin Outlets: The Right Pattern&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse provides plugin outlets - extension points where plugins can inject
custom HTML. There are two types:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Regular outlets&lt;&#x2F;strong&gt; inject content but Discourse still renders the default
elements. &lt;strong&gt;Wrapper outlets&lt;&#x2F;strong&gt; completely replace the template.&lt;&#x2F;p&gt;
&lt;p&gt;I used the &lt;code&gt;topic-list-item&lt;&#x2F;code&gt; wrapper outlet to completely replace how topics
display in the Public Feed category:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@glimmer&#x2F;component&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;avatar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;discourse&#x2F;helpers&#x2F;avatar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replaceEmoji &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;discourse&#x2F;helpers&#x2F;replace-emoji&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;formatDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;discourse&#x2F;helpers&#x2F;format-date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GuestSpotItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;isPublicFeed&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slug &lt;&#x2F;span&gt;&lt;span&gt;=== &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;public-feed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;truncatedExcerpt&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excerpt &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excerpt &lt;&#x2F;span&gt;&lt;span&gt;|| &amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excerpt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.length &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excerpt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excerpt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;substring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &amp;lt;template&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isPublicFeed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;td class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic-list-data guest-spot-card&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-author&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;u&#x2F;{{this.args.outletArgs.topic.creator.username}}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;avatar this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;creator imageSize&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;medium&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;              {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;creator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-image&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{{this.args.outletArgs.topic.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img src&lt;&#x2F;span&gt;&lt;span&gt;={{this.args.outletArgs.topic.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image_url&lt;&#x2F;span&gt;&lt;span&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alt&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-excerpt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replaceEmoji this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;truncatedExcerpt&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-metadata&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;meta-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Views: {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;views&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;meta-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Replies: {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;posts_count&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;meta-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Posted: {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;formatDate this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createdAt
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;leaveAgo&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      {{@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;    {{&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The component checks if we&#x27;re in the public-feed category. If yes, render the
custom card layout. If no, render the default (&lt;code&gt;{{@default}}&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;css-grid-for-responsive-layout&quot;&gt;CSS Grid for Responsive Layout&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of JavaScript handling the layout, CSS Grid does all the work:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;category-public-feed &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;topic-list &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    display: grid;
&lt;&#x2F;span&gt;&lt;span&gt;    grid-template-columns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span&gt;(auto-fill, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;minmax&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;280px&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1fr&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    gap: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.5rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@media &lt;&#x2F;span&gt;&lt;span&gt;(max-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;480px&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      grid-template-columns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1fr&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;topic-list-item &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      display: flex;
&lt;&#x2F;span&gt;&lt;span&gt;      flex-direction: column;
&lt;&#x2F;span&gt;&lt;span&gt;      border-radius: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      overflow: hidden;
&lt;&#x2F;span&gt;&lt;span&gt;      background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(--primary-very-low);
&lt;&#x2F;span&gt;&lt;span&gt;      transition: transform &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.2s&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;hover &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        transform: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;translateY&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;-2px&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On mobile, it collapses to a single column. On tablet and desktop, it flows
naturally based on available space.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;guest-spot-mobile-3.png&quot; alt=&quot;Mobile view of The Guest Spot showing a nature image from Tattoo Mike&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;guest-spot-feed-1.png&quot; alt=&quot;Desktop view of The Guest Spot showing a grid of tattoo pictures&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;discovery-process&quot;&gt;Discovery Process&lt;&#x2F;h3&gt;
&lt;p&gt;Finding the right plugin outlet took some research. I used &lt;code&gt;rg&lt;&#x2F;code&gt; to search
Discourse core for available outlets:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rg &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PluginOutlet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; app&#x2F;assets&#x2F;javascripts&#x2F;discourse&#x2F;app&#x2F;components&#x2F; \
&lt;&#x2F;span&gt;&lt;span&gt;  | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; topic-list
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Found several candidates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;topic-list-before-link&lt;&#x2F;code&gt; - Injects before the title link (still renders
default content)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;topic-list-after-title&lt;&#x2F;code&gt; - Injects after the title (still renders default
content)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;topic-list-item&lt;&#x2F;code&gt; - Wrapper outlet (replaces entire template)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The wrapper outlet was key. Regular outlets would have shown both my custom
card and the default topic row, creating duplicate content.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-works-now&quot;&gt;What Works Now&lt;&#x2F;h3&gt;
&lt;p&gt;The native approach gives us:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Comments work out of the box (no custom implementation needed)&lt;&#x2F;li&gt;
&lt;li&gt;All Discourse features work (moderation, flags, bookmarks, etc.)&lt;&#x2F;li&gt;
&lt;li&gt;814 fewer lines of code to maintain&lt;&#x2F;li&gt;
&lt;li&gt;Better mobile support (Grid automatically adapts)&lt;&#x2F;li&gt;
&lt;li&gt;No custom API (no serializers, controllers, or routes)&lt;&#x2F;li&gt;
&lt;li&gt;Pin&#x2F;unpin still works (using Discourse&#x27;s native pinning)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The showcase is now just &quot;a really nicely styled Discourse category&quot; instead
of &quot;a custom app built on top of Discourse.&quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vibe-coding-pros-and-cons&quot;&gt;Vibe Coding: Pros and Cons&lt;&#x2F;h2&gt;
&lt;p&gt;This project is a perfect example of &quot;vibe coding&quot; - building something by
feel, iterating quickly, and learning what works through trial and error.&lt;&#x2F;p&gt;
&lt;p&gt;I started with a custom model because that felt right. Then I realized Topics
already did everything I needed. I built a custom feed because I wanted full
control. Then I realized plugin outlets gave me that control without the
maintenance burden.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The downside&lt;&#x2F;strong&gt;: I went too fast and tried too much. Each iteration meant
throwing away code. The custom model, the custom feed infrastructure - all
that work ended up deleted. If I&#x27;d researched Discourse patterns first, I
could have gone straight to the plugin outlet approach.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The upside&lt;&#x2F;strong&gt;: I learned way more by doing it wrong first. I understand why
wrapper outlets exist, because I felt the pain of duplicate content with
regular outlets. I understand why Discourse&#x27;s native features are powerful,
because I tried to rebuild them and saw how much work that is.&lt;&#x2F;p&gt;
&lt;p&gt;Fast iteration meant I could course-correct. I wasn&#x27;t six months into building
a custom ORM before realizing Topics existed. I was a few days in, so
refactoring didn&#x27;t hurt. The velocity of vibe coding let me try ideas, see
them fail, and pivot quickly.&lt;&#x2F;p&gt;
&lt;p&gt;The final result is simple and maintainable. It took three iterations to get
there, but each iteration taught me something. Now I know how to not do things,
which is just as valuable as knowing how to do them.&lt;&#x2F;p&gt;
&lt;p&gt;The code is on GitHub: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-guest-spot&quot;&gt;discourse-guest-spot&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building The Guest Spot: Part 1 - My First Community</title>
          <pubDate>Sat, 25 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-the-guest-spot-part-1/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-the-guest-spot-part-1/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-the-guest-spot-part-1/">&lt;p&gt;I&#x27;m not exactly a social butterfly. I can enjoy small groups of like minded people
talking about our interests but small talk really drains me. I&#x27;m much happier
with a computer, book, or just sitting out in the woods.&lt;&#x2F;p&gt;
&lt;p&gt;Since joining Discourse a few months ago, I&#x27;ve been learning the platform by
building weird experiments. A transit departure board. A virtual currency
system. Tools that push Discourse in directions it wasn&#x27;t designed for. But
they&#x27;ve all been technical exercises. Solo projects. Learning by doing, but
doing alone.&lt;&#x2F;p&gt;
&lt;p&gt;The Guest Spot is different. This is my first time helping build something for
an actual community of people. Real artists who will (hopefully) use this
thing. Not just me poking at APIs and seeing what breaks.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s exciting. And a little terrifying.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-the-idea-evolved&quot;&gt;How The Idea Evolved&lt;&#x2F;h2&gt;
&lt;p&gt;The original concept was simple: a private forum for tattoo artists. A place
where people in the industry could talk shop, share techniques, discuss
challenges. No clients. No tourists. Just professionals.&lt;&#x2F;p&gt;
&lt;p&gt;But then I started thinking about how artists actually share their work.
Instagram. Almost every tattoo artist is on Instagram. It&#x27;s where they build
their portfolio, attract clients, establish their style. But they don&#x27;t own any
of it. The algorithm decides who sees their posts. Instagram decides what gets
buried or promoted. If Instagram changes the rules or shuts down tomorrow, years
of work disappears.&lt;&#x2F;p&gt;
&lt;p&gt;What if artists could have both? A professional forum for discussion and a
public showcase for their work. Same platform, same data, but they own it all.
No algorithm deciding what gets seen. No corporate platform that could pull the
rug out.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s when the concept clicked: build the Instagram-style feed as the front
door, with the private forum as the main room. Artists get a beautiful public
portfolio plus a real community space. All on infrastructure they control.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-the-guest-spot&quot;&gt;What Is The Guest Spot?&lt;&#x2F;h2&gt;
&lt;p&gt;The result: an Instagram-style public showcase for tattoo artists, powered by
Discourse.&lt;&#x2F;p&gt;
&lt;p&gt;Artists can post photos of their work in a clean, visual feed. Pinned posts
appear in a horizontal carousel at the top. Recent work flows down below in a
responsive grid. Click any image and you get a full detail page with all the
context.&lt;&#x2F;p&gt;
&lt;p&gt;And if you&#x27;ve been vetted, behind the public feed is a private, invite-only
Discourse forum. The showcase is the front door. The forum is where the real
community happens. Artists can discuss techniques, share experiences, ask
questions. It&#x27;s gated access because tattoo culture values quality and trust.&lt;&#x2F;p&gt;
&lt;p&gt;Think of it as Instagram&#x27;s visual presentation meets forum depth, with Discourse
handling both sides.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-discourse-makes-sense-here&quot;&gt;Why Discourse Makes Sense Here&lt;&#x2F;h2&gt;
&lt;p&gt;Discourse isn&#x27;t Instagram. It&#x27;s not designed to be a photo showcase. But it has
everything we need to build one:&lt;&#x2F;p&gt;
&lt;p&gt;Custom fields store image URLs and captions. Categories and tags organize
content. The permission system handles public showcase vs private forum.&lt;&#x2F;p&gt;
&lt;p&gt;Most importantly, Discourse is built for communities. The forum infrastructure
is already there. We&#x27;re just adding a pretty front door.&lt;&#x2F;p&gt;
&lt;p&gt;And unlike Instagram, artists own everything. The database, the images, the
content. They can export it all. No algorithm. No corporate overlord. Just their
work, on their terms.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-ve-built-so-far&quot;&gt;What I&#x27;ve Built So Far&lt;&#x2F;h2&gt;
&lt;p&gt;Backend is straightforward Rails stuff:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GuestSpotPost&lt;&#x2F;code&gt; model with image URLs (stored as arrays), captions, and
pinned status&lt;&#x2F;li&gt;
&lt;li&gt;Migrations for the database schema&lt;&#x2F;li&gt;
&lt;li&gt;Controllers that handle CRUD operations and serve JSON to the frontend&lt;&#x2F;li&gt;
&lt;li&gt;Serializers that package post data with user info&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Frontend is where it gets interesting. Modern Discourse uses Glimmer components,
which are Ember&#x27;s latest component format. Template and logic live in the same
&lt;code&gt;.gjs&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GuestSpotPostCard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;firstImage&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image_urls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;?.[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &amp;lt;template&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LinkTo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-post&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{{@post.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-post-card&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      {{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firstImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img src&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{{this.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firstImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alt&lt;&#x2F;span&gt;&lt;span&gt;={{@post.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;caption&lt;&#x2F;span&gt;&lt;span&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post-image&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      {{&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post-meta&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post-author&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;avatar &lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user imageSize&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;small&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;{{@post.user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;.caption}}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post-caption&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;{{@post.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;caption&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {{&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinned&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pinned-badge&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Featured&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {{&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LinkTo&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The card is a link. Click it, you go to the full post page. The whole thing is
wrapped in a &lt;code&gt;LinkTo&lt;&#x2F;code&gt; component so the entire card is interactive.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-feed-page&quot;&gt;The Feed Page&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;guest-spot-mobile-1.png&quot; alt=&quot;A mobile friendly layout of feed with tattoo posts from artists&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Two sections: pinned posts in a horizontal carousel, recent posts in a
responsive grid.&lt;&#x2F;p&gt;
&lt;p&gt;The carousel uses CSS flexbox with &lt;code&gt;scroll-snap-type: x mandatory&lt;&#x2F;code&gt; so it feels
smooth on mobile. On phones, each card takes up 80% of the viewport width. On
tablets, 250px. On desktop, 300px. Pure CSS, no JavaScript.&lt;&#x2F;p&gt;
&lt;p&gt;The grid uses CSS Grid with &lt;code&gt;auto-fill&lt;&#x2F;code&gt; and &lt;code&gt;minmax()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;posts-grid &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  display: grid;
&lt;&#x2F;span&gt;&lt;span&gt;  grid-template-columns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span&gt;(auto-fill, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;minmax&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;250px&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1fr&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  gap: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.5rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@media &lt;&#x2F;span&gt;&lt;span&gt;(max-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;768px&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    grid-template-columns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span&gt;(auto-fill, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;minmax&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;150px&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1fr&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    gap: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@media &lt;&#x2F;span&gt;&lt;span&gt;(max-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;480px&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    grid-template-columns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1fr&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    gap: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.75rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On phones, we force a single column so cards stay large enough to see the artwork clearly. On tablets and desktops, it flows naturally based on available space.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-post-page&quot;&gt;The Post Page&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;guest-spot-mobile-2.png&quot; alt=&quot;A single page post of a tattoo showing cool birds&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Click any card and you get the full post view. It&#x27;s designed to let the artwork breathe while keeping all the important context visible.&lt;&#x2F;p&gt;
&lt;p&gt;The layout is simple:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Back link at the top (returns to feed)&lt;&#x2F;li&gt;
&lt;li&gt;Full-size image(s) with &lt;code&gt;object-fit: contain&lt;&#x2F;code&gt; so nothing gets cropped&lt;&#x2F;li&gt;
&lt;li&gt;Artist info (avatar + username)&lt;&#x2F;li&gt;
&lt;li&gt;Full caption with preserved line breaks&lt;&#x2F;li&gt;
&lt;li&gt;Pinned badge if applicable&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Images are wrapped in a card design with rounded corners and subtle shadow. On mobile, padding reduces and max image height adjusts so everything fits nicely on smaller screens. The whole page uses the same responsive breakpoints as the feed (768px for tablets, 480px for phones).&lt;&#x2F;p&gt;
&lt;p&gt;All contained in a centered column with max-width of 900px. Clean, focused, lets the work be the star.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hiding-the-sidebar&quot;&gt;Hiding the Sidebar&lt;&#x2F;h2&gt;
&lt;p&gt;Guest Spot has its own route at &lt;code&gt;&#x2F;guest-spot&lt;&#x2F;code&gt;. But Discourse has a persistent
sidebar. For a public showcase, that doesn&#x27;t make sense. Artists posting work
shouldn&#x27;t see forum navigation.&lt;&#x2F;p&gt;
&lt;p&gt;First attempt: route lifecycle hooks.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GuestSpotFeedRoute &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DiscourseRoute &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;activate&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;activate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appController &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;controllerFor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;showSidebar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    document.body.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-page&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deactivate&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appController &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;controllerFor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;showSidebar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    document.body.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-page&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deactivate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This hides the sidebar. But the hamburger button (&lt;code&gt;.header-sidebar-toggle&lt;&#x2F;code&gt;)
stays visible. Users can toggle it back. Not ideal.&lt;&#x2F;p&gt;
&lt;p&gt;CSS didn&#x27;t work. Setting controller properties didn&#x27;t work. So I got pragmatic:
DOM manipulation via an initializer.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hide-sidebar-toggle-on-guest-spot&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;initialize&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;withPluginApi&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onPageChange&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toggle &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;querySelector&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.header-sidebar-toggle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toggle&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;startsWith&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;guest-spot&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toggle&lt;&#x2F;span&gt;&lt;span&gt;.style.display = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;          } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toggle&lt;&#x2F;span&gt;&lt;span&gt;.style.display = &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Is it hacky? Yes. Does it work? Also yes. Sometimes pragmatic beats perfect.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mobile-responsive&quot;&gt;Mobile Responsive&lt;&#x2F;h2&gt;
&lt;p&gt;Mobile-first isn&#x27;t just a buzzword here. It&#x27;s critical. Tattoo artists live on their phones. They&#x27;re checking Instagram between clients, browsing artist portfolios while waiting for appointments, posting fresh work right after finishing a piece. If this doesn&#x27;t work perfectly on a phone, it doesn&#x27;t work at all.&lt;&#x2F;p&gt;
&lt;p&gt;The entire layout is mobile-first. Every component has media queries for tablet and phone breakpoints.&lt;&#x2F;p&gt;
&lt;p&gt;Carousel cards shrink to 80% viewport width on phones so you can see part of the next card (scroll hint). Grid forces a single column on small screens so cards don&#x27;t get comically tiny. Post detail pages reduce padding and image heights so everything fits nicely without excessive scrolling.&lt;&#x2F;p&gt;
&lt;p&gt;All CSS. No JavaScript calculating widths or handling resize events. The browser does the work, which means it&#x27;s fast and doesn&#x27;t drain battery with constant calculations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s Next&lt;&#x2F;h2&gt;
&lt;p&gt;This is Part 1. We&#x27;ve got the public showcase working. But there&#x27;s more to
build:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Post creation UI (artists need to upload images and write captions)&lt;&#x2F;li&gt;
&lt;li&gt;Admin controls (pin&#x2F;unpin posts from the feed)&lt;&#x2F;li&gt;
&lt;li&gt;User profile pages (view all posts by a specific artist)&lt;&#x2F;li&gt;
&lt;li&gt;Comments system integration (if we want interaction on posts)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But most importantly: actually launching this for a real community. Getting
feedback from artists. Seeing if this makes sense to people who aren&#x27;t me.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s the scary part. Building code is easy. Building for people? That&#x27;s where
it gets real.&lt;&#x2F;p&gt;
&lt;p&gt;Part 2 will cover the creation flow and admin tools. Stay tuned.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to see the code, it&#x27;s on GitHub:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-guest-spot&quot;&gt;discourse-guest-spot&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>How I&#x27;m Using Claude Code for Daily Development Work</title>
          <pubDate>Fri, 24 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/how-i-am-using-claude-code/</link>
          <guid>https://jakegoldsborough.com/blog/2025/how-i-am-using-claude-code/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/how-i-am-using-claude-code/">&lt;p&gt;I&#x27;ve been using Claude Code for a few months now as my primary development assistant. Not as a replacement for thinking, but as a way to move faster on the boring stuff while keeping the interesting problems for myself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-it-s-actually-good-at&quot;&gt;What It&#x27;s Actually Good At&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-grunt-work&quot;&gt;The Grunt Work&lt;&#x2F;h3&gt;
&lt;p&gt;Testing infrastructure is where Claude shines. Today, I needed to test SMTP error logging improvements. Instead of manually setting up &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Supermathie&#x2F;mail-relay-simulator&quot;&gt;mail-relay-simulator&lt;&#x2F;a&gt;, configuring different failure scenarios, and writing test cases, I described what I needed and got a complete Ruby script that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Manages docker-compose lifecycle&lt;&#x2F;li&gt;
&lt;li&gt;Switches between 4 test scenarios (auth failures, wrong credentials, etc.)&lt;&#x2F;li&gt;
&lt;li&gt;Writes proper config files with correct syntax&lt;&#x2F;li&gt;
&lt;li&gt;Handles cleanup&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The script works. It&#x27;s maintainable. It saved me 2-3 hours of tedious setup work.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;research-and-discovery&quot;&gt;Research and Discovery&lt;&#x2F;h3&gt;
&lt;p&gt;&quot;Find all the places in this codebase where we do X&quot; - this is tedious grep work that Claude excels at. It can search, cross-reference, and explain patterns without me needing to open 20 files.&lt;&#x2F;p&gt;
&lt;p&gt;Example: When investigating AWS SDK credential chain bugs, I had Claude trace through the entire credential provider chain, find where it was failing, and document the root cause. That kind of code archaeology is perfect for AI assistance.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;&#x2F;h3&gt;
&lt;p&gt;Writing test results documentation, commit messages, technical proposals - Claude can take my rough notes and produce clean markdown that I&#x27;d never bother writing myself. The writeup exists because the AI made it low-effort, not because I suddenly got better at documentation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-it-could-improve&quot;&gt;Where It Could Improve&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;understanding-intent&quot;&gt;Understanding Intent&lt;&#x2F;h3&gt;
&lt;p&gt;If I&#x27;m not specific about what I want, Claude will give me something that technically works but misses the point. Example: I asked for markdown rendering in Neovim. Got three different failed attempts at split-window rendering before I just said &quot;fuck it, just hard-wrap at 80 characters.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;The AI doesn&#x27;t know when to stop. It will keep trying increasingly complex solutions when the answer is &quot;do less.&quot;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;production-debugging&quot;&gt;Production Debugging&lt;&#x2F;h3&gt;
&lt;p&gt;When real production issues happen, Claude&#x27;s knowledge cutoff and lack of access to live systems means it&#x27;s guessing. I can describe symptoms and it&#x27;ll suggest things to check, but it&#x27;s not replacing actual debugging experience.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;knowing-what-it-doesn-t-know&quot;&gt;Knowing What It Doesn&#x27;t Know&lt;&#x2F;h3&gt;
&lt;p&gt;The worst thing Claude does is hallucinate with confidence. It&#x27;ll make up photographer names for Unsplash images when WebFetch fails to parse the page. It&#x27;ll suggest APIs that don&#x27;t exist. It&#x27;ll confidently explain behavior that&#x27;s completely wrong.&lt;&#x2F;p&gt;
&lt;p&gt;You have to verify everything. Trust but verify isn&#x27;t optional.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-i-actually-use-it&quot;&gt;How I Actually Use It&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-explicit-context&quot;&gt;1. Explicit Context&lt;&#x2F;h3&gt;
&lt;p&gt;I maintain a CONTEXT.md file with my preferences:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Code style (no emoji, wrap at 80 chars, prefer &lt;code&gt;if !&lt;&#x2F;code&gt; over &lt;code&gt;unless&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Project patterns (date-based versioning, git workflow preferences)&lt;&#x2F;li&gt;
&lt;li&gt;Common pitfalls (Ruby openssl gem vs extension, Discourse auth patterns)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This cuts down on back-and-forth. Claude knows I want &lt;code&gt;--no-ff&lt;&#x2F;code&gt; merges without me explaining it every time.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-incremental-validation&quot;&gt;2. Incremental Validation&lt;&#x2F;h3&gt;
&lt;p&gt;I don&#x27;t let Claude write 500 lines without checking. Small changes, validate, next change. When it starts going off track, I stop and correct immediately.&lt;&#x2F;p&gt;
&lt;p&gt;If tests fail, I read the error myself. If code looks weird, I ask &quot;why did you do it this way?&quot; and often realize there&#x27;s a better approach.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-use-it-for-what-it-s-built-for&quot;&gt;3. Use It For What It&#x27;s Built For&lt;&#x2F;h3&gt;
&lt;p&gt;Good uses:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;File operations (read, edit, search)&lt;&#x2F;li&gt;
&lt;li&gt;Repetitive code changes&lt;&#x2F;li&gt;
&lt;li&gt;Documentation generation&lt;&#x2F;li&gt;
&lt;li&gt;Test script creation&lt;&#x2F;li&gt;
&lt;li&gt;Config file management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Bad uses:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Anything requiring judgment calls&lt;&#x2F;li&gt;
&lt;li&gt;Performance optimization without profiling&lt;&#x2F;li&gt;
&lt;li&gt;Security-sensitive code review&lt;&#x2F;li&gt;
&lt;li&gt;&quot;Just make it work&quot; prompts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-keep-notes&quot;&gt;4. Keep Notes&lt;&#x2F;h3&gt;
&lt;p&gt;I have Claude maintain daily notes of what we worked on. Not as todo tracking, but as a context refresh. When I come back tomorrow, I can read yesterday&#x27;s notes and pick up where we left off.&lt;&#x2F;p&gt;
&lt;p&gt;The notes also catch when Claude forgets something or contradicts earlier decisions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-workflow&quot;&gt;The Workflow&lt;&#x2F;h2&gt;
&lt;p&gt;Typical session:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Me&lt;&#x2F;strong&gt;: &quot;I need to test SMTP error logging with mail-relay-simulator&quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;: Reads existing code, finds simulator location, proposes script structure&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Me&lt;&#x2F;strong&gt;: &quot;Yeah but make it modular, don&#x27;t hardcode paths&quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;: Updates script with env var + path discovery&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Me&lt;&#x2F;strong&gt;: Runs script, hits error&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Claude&lt;&#x2F;strong&gt;: &quot;That error means X, here&#x27;s the fix&quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Me&lt;&#x2F;strong&gt;: Applies fix, tests, moves on&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;It&#x27;s not magic. It&#x27;s a very fast junior developer who never gets tired but also never learns from mistakes unless you tell it explicitly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-trap&quot;&gt;The Trap&lt;&#x2F;h2&gt;
&lt;p&gt;The trap is letting the AI do your thinking. It&#x27;s really easy to just accept the first solution that looks reasonable. But &quot;looks reasonable&quot; and &quot;is correct&quot; aren&#x27;t the same thing.&lt;&#x2F;p&gt;
&lt;p&gt;I caught Claude trying to use &lt;code&gt;Dir.chdir&lt;&#x2F;code&gt; in a script today. RuboCop flagged it as not thread-safe. The &quot;correct&quot; solution was &lt;code&gt;system(..., chdir: path)&lt;&#x2F;code&gt;. Claude didn&#x27;t know that until the linter told it.&lt;&#x2F;p&gt;
&lt;p&gt;If I&#x27;m not reading the code and understanding the changes, I&#x27;m just a very expensive copy-paste machine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;should-you-use-it&quot;&gt;Should You Use It?&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re junior: Maybe not yet. You need to build pattern recognition before you can effectively verify AI output. You won&#x27;t know when it&#x27;s bullshitting.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re mid-level: Useful for grunt work, but keep it on a short leash. You should be reading and understanding every change.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re senior: This is productivity steroids. You already know what good code looks like. AI just makes it faster to write.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;&#x2F;h2&gt;
&lt;p&gt;Claude Code isn&#x27;t replacing developers. It&#x27;s replacing the boring parts of development. The parts where you know exactly what needs to happen but it&#x27;s going to take an hour of tedious typing.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not using less brain power. I&#x27;m using it on the problems that actually matter instead of fighting with test harness boilerplate.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s the win.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building Yaks: A Virtual Currency System for Discourse (Part 4: Custom Titles and Earning System)</title>
          <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-4/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-4/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-4/">&lt;p&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-yaks-virtual-currency-part-1&#x2F;&quot;&gt;Part 1&lt;&#x2F;a&gt; covered the
backend architecture, &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-yaks-virtual-currency-part-2&#x2F;&quot;&gt;Part 2&lt;&#x2F;a&gt;
covered topic pinning and expiration, and &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-yaks-virtual-currency-part-3&#x2F;&quot;&gt;Part 3&lt;&#x2F;a&gt;
covered topic boosting and custom avatar flair. This post covers two more
major features: custom user titles and the automatic earning system.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;custom-user-titles&quot;&gt;Custom User Titles&lt;&#x2F;h2&gt;
&lt;p&gt;Custom titles let users spend Yaks to set a custom title displayed next to
their username throughout the forum. Unlike Discourse&#x27;s built-in title system
(which is tied to badges and trust levels), Yak titles are purely
cosmetic and time-limited.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-custom-title.png&quot; alt=&quot;A reply showing a user with the custom user title &amp;quot;The Yaks Man&amp;quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-challenge-serializer-discovery&quot;&gt;The Challenge: Serializer Discovery&lt;&#x2F;h3&gt;
&lt;p&gt;The first attempt seemed straightforward: override the &lt;code&gt;title&lt;&#x2F;code&gt; field in the
user serializers. But after implementing it, the title showed in user cards
and profiles but not next to posts. Why?&lt;&#x2F;p&gt;
&lt;p&gt;Discourse uses different serializer methods for different contexts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title&lt;&#x2F;code&gt;: Used in user cards, profiles, group member lists&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;user_title&lt;&#x2F;code&gt;: Used specifically in &lt;code&gt;PostSerializer&lt;&#x2F;code&gt; for post display&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This makes sense from an architecture perspective. Posts need their own
serializer method because they serialize the user as a nested object, not as
the main object.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-solution-override-both&quot;&gt;The Solution: Override Both&lt;&#x2F;h3&gt;
&lt;p&gt;The fix required overriding both serializer methods across multiple
serializers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# For user cards, profiles, groups
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_card&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post_action_user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_name&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:group_post_user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:group_user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:hidden_profile&lt;&#x2F;span&gt;&lt;span&gt;].each &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serializer_name&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  add_to_serializer(serializer_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:title&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    title_data = object.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]&amp;amp;.dig(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; title_data &amp;amp;&amp;amp; title_data[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;      title_data[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      object.title
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# For post display (critical!)
&lt;&#x2F;span&gt;&lt;span&gt;add_to_serializer(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_title&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  user = object&amp;amp;.user
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unless&lt;&#x2F;span&gt;&lt;span&gt; user
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  title_data = user.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]&amp;amp;.dig(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; title_data &amp;amp;&amp;amp; title_data[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    title_data[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    user.title
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;PostSerializer&lt;&#x2F;code&gt;, &lt;code&gt;object&lt;&#x2F;code&gt; is a Post, so we access the user via
&lt;code&gt;object.user&lt;&#x2F;code&gt;. In user-focused serializers, &lt;code&gt;object&lt;&#x2F;code&gt; is the User directly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-frontend-modal&quot;&gt;The Frontend Modal&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-custom-title-modal.png&quot; alt=&quot;A modal showing user&amp;#39;s options for creating a custom user title&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The custom title modal is straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tracked customTitle &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;characterCount&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;customTitle&lt;&#x2F;span&gt;&lt;span&gt;.length;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;isOverLimit&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;characterCount &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;canApply&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;customTitle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;().length &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;         !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isOverLimit &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentUser&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yak_balance &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cost&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Live preview, character counter, balance check. The modal shows exactly what
the title will look like before spending Yaks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-earning-system&quot;&gt;The Earning System&lt;&#x2F;h2&gt;
&lt;p&gt;This was the most complex feature to implement. Users needed a way to earn
Yaks by contributing to the community, with anti-gaming measures built in.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;&#x2F;h3&gt;
&lt;p&gt;From the start, the requirements were clear:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Be modular (database-driven, not hardcoded)&lt;&#x2F;li&gt;
&lt;li&gt;Rate limiting (can&#x27;t spam posts to farm Yaks)&lt;&#x2F;li&gt;
&lt;li&gt;Trust level requirements (new accounts can&#x27;t abuse it)&lt;&#x2F;li&gt;
&lt;li&gt;Content length minimums (beyond Discourse&#x27;s defaults, prevent low-effort farming)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;database-schema&quot;&gt;Database Schema&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of hardcoding earning rules in the service, we made them
database-driven:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;create_table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_earning_rules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  t.string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:action_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;  t.string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:action_name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;  t.text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:description
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:amount&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:daily_cap&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:min_trust_level&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:enabled&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  t.jsonb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:settings&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;  t.timestamps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Seeded with four default rules:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Post Created&lt;&#x2F;strong&gt;: 2 Yaks, 20&#x2F;day cap, TL1+, 20 character minimum&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Topic Created&lt;&#x2F;strong&gt;: 5 Yaks, 10&#x2F;day cap, TL1+, 50 character minimum&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Post Liked&lt;&#x2F;strong&gt;: 3 Yaks, 30&#x2F;day cap, TL1+&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Solution Accepted&lt;&#x2F;strong&gt;: 25 Yaks, no cap, TL1+&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The &lt;code&gt;settings&lt;&#x2F;code&gt; jsonb column allows flexible per-rule configuration like
content length minimums without schema changes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;service-layer&quot;&gt;Service Layer&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;YakEarningService&lt;&#x2F;code&gt; handles all validation and awarding logic:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;award&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;:, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action_key&lt;&#x2F;span&gt;&lt;span&gt;:, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_post&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_topic&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  rule = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningRule&lt;&#x2F;span&gt;&lt;span&gt;.get_rule(action_key)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!rule
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Check trust level requirement
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; user.trust_level &amp;lt; rule.min_trust_level
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Check minimum content length if applicable
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; rule.min_length &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    content = related_post&amp;amp;.raw || related_topic&amp;amp;.first_post&amp;amp;.raw || &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; content.length &amp;lt; rule.min_length
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Check daily cap
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; rule.has_daily_cap?
&lt;&#x2F;span&gt;&lt;span&gt;    earned_today = get_daily_earning_count(user, action_key)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; earned_today &amp;gt;= rule.daily_cap
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Award the Yaks
&lt;&#x2F;span&gt;&lt;span&gt;  wallet = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakWallet&lt;&#x2F;span&gt;&lt;span&gt;.find_or_create_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakTransaction&lt;&#x2F;span&gt;&lt;span&gt;.create!(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_wallet:&lt;&#x2F;span&gt;&lt;span&gt; wallet,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount:&lt;&#x2F;span&gt;&lt;span&gt; rule.amount,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;transaction_type: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;earn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Earned from: &lt;&#x2F;span&gt;&lt;span&gt;#{rule.action_name}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; related_post,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_topic:&lt;&#x2F;span&gt;&lt;span&gt; related_topic,
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  wallet.update!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;balance:&lt;&#x2F;span&gt;&lt;span&gt; wallet.balance + rule.amount)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Publish balance update to frontend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MessageBus&lt;&#x2F;span&gt;&lt;span&gt;.publish(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;yak-balance&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;#{user.id}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                     { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;balance:&lt;&#x2F;span&gt;&lt;span&gt; wallet.balance },
&lt;&#x2F;span&gt;&lt;span&gt;                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user_ids: &lt;&#x2F;span&gt;&lt;span&gt;[user.id])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The service returns a boolean so we can track success&#x2F;failure in logs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rate-limiting-implementation&quot;&gt;Rate Limiting Implementation&lt;&#x2F;h3&gt;
&lt;p&gt;Daily caps are enforced by counting today&#x27;s transactions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_daily_earning_count&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action_key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  wallet = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakWallet&lt;&#x2F;span&gt;&lt;span&gt;.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!wallet
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  rule = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningRule&lt;&#x2F;span&gt;&lt;span&gt;.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action_key:&lt;&#x2F;span&gt;&lt;span&gt; action_key)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!rule
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  start_of_day = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now.beginning_of_day
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;YakTransaction
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_wallet:&lt;&#x2F;span&gt;&lt;span&gt; wallet)
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;transaction_type: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;earn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description LIKE ?&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Earned from: &lt;&#x2F;span&gt;&lt;span&gt;#{rule.action_name}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;created_at &amp;gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, start_of_day)
&lt;&#x2F;span&gt;&lt;span&gt;    .count
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Single query per award attempt. Could be cached if it becomes a bottleneck,
but the query is fast.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;event-hooks&quot;&gt;Event Hooks&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse provides events for all the actions we care about:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DiscourseEvent&lt;&#x2F;span&gt;&lt;span&gt;.on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post_created&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; post.post_type != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;.types[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:regular&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; post.deleted_at.present?
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; post.hidden
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if &lt;&#x2F;span&gt;&lt;span&gt;!post.user
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; post.user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action_key: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_created&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; post,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_topic:&lt;&#x2F;span&gt;&lt;span&gt; post.topic,
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DiscourseEvent&lt;&#x2F;span&gt;&lt;span&gt;.on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:like_created&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post_action&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  post = post_action.post
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if &lt;&#x2F;span&gt;&lt;span&gt;!post
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; post.deleted_at.present?
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; post.hidden
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; post.user_id == post_action.user_id  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# No self-likes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; post.user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action_key: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_liked&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; post,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_topic:&lt;&#x2F;span&gt;&lt;span&gt; post.topic,
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also hook &lt;code&gt;topic_created&lt;&#x2F;code&gt; and &lt;code&gt;accepted_solution&lt;&#x2F;code&gt; (from the
discourse-solved plugin, if installed).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;real-time-balance-updates&quot;&gt;Real-Time Balance Updates&lt;&#x2F;h3&gt;
&lt;p&gt;The original implementation had a problem: after earning Yaks, the user menu
still showed the old balance. Page refresh required.&lt;&#x2F;p&gt;
&lt;p&gt;The fix uses MessageBus, Discourse&#x27;s real-time messaging system:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Backend&lt;&#x2F;strong&gt;: Publish when balance changes&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MessageBus&lt;&#x2F;span&gt;&lt;span&gt;.publish(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;yak-balance&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;#{user.id}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                   { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;balance:&lt;&#x2F;span&gt;&lt;span&gt; wallet.balance },
&lt;&#x2F;span&gt;&lt;span&gt;                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user_ids: &lt;&#x2F;span&gt;&lt;span&gt;[user.id])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Frontend&lt;&#x2F;strong&gt;: Subscribe and update&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;messageBus &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;container&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lookup&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;service:message-bus&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;messageBus&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;yak-balance&#x2F;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.id}&lt;&#x2F;span&gt;&lt;span&gt;`, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentUser&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_balance&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;balance&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now when you create a post, the balance in your user menu updates instantly.
No polling, no page refresh.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bugs-fixed&quot;&gt;Bugs Fixed&lt;&#x2F;h2&gt;
&lt;p&gt;Some bugs were discovered during manual testing. All three would have been
caught immediately by integration tests.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bug-1-event-hook-user-parameter&quot;&gt;Bug 1: Event Hook User Parameter&lt;&#x2F;h3&gt;
&lt;p&gt;The Discourse event signature includes a &lt;code&gt;user&lt;&#x2F;code&gt; parameter:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DiscourseEvent&lt;&#x2F;span&gt;&lt;span&gt;.on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post_created&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first implementation used that parameter directly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user, ...)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But that &lt;code&gt;user&lt;&#x2F;code&gt; parameter is nil. The actual user must be accessed via
&lt;code&gt;post.user&lt;&#x2F;code&gt;. The test would have failed immediately with &quot;User can&#x27;t be
blank&quot;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bug-2-topic-raw-doesn-t-exist&quot;&gt;Bug 2: Topic.raw Doesn&#x27;t Exist&lt;&#x2F;h3&gt;
&lt;p&gt;Content length validation tried to access &lt;code&gt;topic.raw&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;content = related_post&amp;amp;.raw || related_topic&amp;amp;.raw || &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But topics don&#x27;t have a &lt;code&gt;raw&lt;&#x2F;code&gt; field. Only posts do. The fix:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;content = related_post&amp;amp;.raw || related_topic&amp;amp;.first_post&amp;amp;.raw || &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A test creating a topic would have crashed with &quot;undefined method `raw&#x27; for
Topic&quot;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bug-3-missing-user-in-transaction&quot;&gt;Bug 3: Missing User in Transaction&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;YakTransaction&lt;&#x2F;code&gt; has a &lt;code&gt;belongs_to :user&lt;&#x2F;code&gt; association, which validates
presence by default in Rails. But we weren&#x27;t passing it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakTransaction&lt;&#x2F;span&gt;&lt;span&gt;.create!(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_wallet:&lt;&#x2F;span&gt;&lt;span&gt; wallet,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount:&lt;&#x2F;span&gt;&lt;span&gt; rule.amount,
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Should be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakTransaction&lt;&#x2F;span&gt;&lt;span&gt;.create!(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_wallet:&lt;&#x2F;span&gt;&lt;span&gt; wallet,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount:&lt;&#x2F;span&gt;&lt;span&gt; rule.amount,
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Any test attempting to create a transaction would have failed validation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-new-basic-test-suite-structure&quot;&gt;A New Basic Test Suite Structure&lt;&#x2F;h2&gt;
&lt;p&gt;The test suite covers all validation paths:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RSpec&lt;&#x2F;span&gt;&lt;span&gt;.describe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;YakEarningService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  describe &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.award&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    it &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;awards Yaks for valid post by TL1 user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      post = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fabricate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;raw: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;This is a test post...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; post.user,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action_key: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_created&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; post,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_topic:&lt;&#x2F;span&gt;&lt;span&gt; post.topic,
&lt;&#x2F;span&gt;&lt;span&gt;      )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      expect(result).to eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      expect(user.reload.yak_balance).to eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    it &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;does not award Yaks to TL0 user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      post = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fabricate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; tl0_user, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;raw: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; post.user,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action_key: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_created&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; post,
&lt;&#x2F;span&gt;&lt;span&gt;      )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      expect(result).to eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      expect(tl0_user.reload.yak_balance).to eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    it &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;respects daily cap&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      rule = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningRule&lt;&#x2F;span&gt;&lt;span&gt;.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action_key: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_created&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Create posts up to daily cap
&lt;&#x2F;span&gt;&lt;span&gt;      rule.daily_cap.times &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;        post = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fabricate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;raw: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; post.user, ...)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Next post should fail due to cap
&lt;&#x2F;span&gt;&lt;span&gt;      post = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fabricate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;raw: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; post.user, ...)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      expect(result).to eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Tests force you to think about edge cases: trust levels, content length, daily
caps, disabled rules.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;admin-ui&quot;&gt;Admin UI&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-earning-rules-admin.png&quot; alt=&quot;A table showing Yaks earning rules and caps&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The admin UI shows all earning rules in a table:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Action name and description&lt;&#x2F;li&gt;
&lt;li&gt;Amount of Yaks awarded&lt;&#x2F;li&gt;
&lt;li&gt;Daily cap (or &quot;No limit&quot;)&lt;&#x2F;li&gt;
&lt;li&gt;Minimum trust level&lt;&#x2F;li&gt;
&lt;li&gt;Enabled status&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;architecture-wins&quot;&gt;Architecture Wins&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Database-Driven Configuration&lt;&#x2F;strong&gt;: No code changes needed to adjust earning
amounts or daily caps. Just update the database.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Event-Driven&lt;&#x2F;strong&gt;: Loosely coupled. The earning system doesn&#x27;t need to know
about post creation internals, just subscribes to events.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Real-Time Updates&lt;&#x2F;strong&gt;: MessageBus makes instant balance updates trivial. Six
lines of code for publish and subscribe.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Proper Service Layer&lt;&#x2F;strong&gt;: Business logic lives in &lt;code&gt;YakEarningService&lt;&#x2F;code&gt;, not
scattered across controllers and models.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Full Audit Trail&lt;&#x2F;strong&gt;: Every earning action creates a transaction record with
type, amount, description, and related post&#x2F;topic. Complete history.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance-considerations&quot;&gt;Performance Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Single Query for Rate Limiting&lt;&#x2F;strong&gt;: The daily count query is simple and fast.
Could be cached if it becomes a bottleneck.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;No N+1 Queries&lt;&#x2F;strong&gt;: Balance updates happen during the transaction creation, no
separate queries.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;MessageBus Efficiency&lt;&#x2F;strong&gt;: Only publishes to the specific user who earned
Yaks. Not broadcasting to everyone.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Indexed Properly&lt;&#x2F;strong&gt;: Transactions table has indexes on &lt;code&gt;yak_wallet_id&lt;&#x2F;code&gt;,
&lt;code&gt;transaction_type&lt;&#x2F;code&gt;, and &lt;code&gt;created_at&lt;&#x2F;code&gt; for the daily count query.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-left&quot;&gt;What&#x27;s Left&lt;&#x2F;h2&gt;
&lt;p&gt;The plugin is now feature-complete for the MVP:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Wallet system with transaction logging&lt;&#x2F;li&gt;
&lt;li&gt;Multiple purchasable features (post highlighting, topic boosting, custom
flair, custom titles)&lt;&#x2F;li&gt;
&lt;li&gt;Expiration system (features automatically expire)&lt;&#x2F;li&gt;
&lt;li&gt;Earning system (users earn Yaks by contributing)&lt;&#x2F;li&gt;
&lt;li&gt;Admin UI (view stats, packages, features, earning rules)&lt;&#x2F;li&gt;
&lt;li&gt;Real-time updates (no page refresh needed)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Remaining work:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Payment integration (Stripe or similar) for purchasing Yak packages&lt;&#x2F;li&gt;
&lt;li&gt;Guardian authorization checks (ensure users can only spend their own Yaks)&lt;&#x2F;li&gt;
&lt;li&gt;More earning actions (first reply, helpful flags, etc.)&lt;&#x2F;li&gt;
&lt;li&gt;Admin edit functionality for earning rules&lt;&#x2F;li&gt;
&lt;li&gt;Production monitoring and adjustment based on real usage&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Serializers Are Powerful&lt;&#x2F;strong&gt;: Understanding Discourse&#x27;s serializer
architecture unlocks a lot of customization possibilities.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;MessageBus Is Handy&lt;&#x2F;strong&gt;: Real-time updates are easy with MessageBus, yet some
plugins don&#x27;t use it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Database-Driven Config Is Worth It&lt;&#x2F;strong&gt;: The upfront effort to make earning
rules configurable pays off in flexibility.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Event Hooks Are Reliable&lt;&#x2F;strong&gt;: Discourse&#x27;s event system is solid. Events fire
consistently and provide the data you need.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Building a virtual currency system is teaching me a lot about Discourse&#x27;s
architecture. Serializers, custom fields, MessageBus, service objects, event
hooks - all pieces that work together to create a cohesive plugin.&lt;&#x2F;p&gt;
&lt;p&gt;The earning system was the most complex feature, but also the most rewarding.
Watching a user create a post and seeing their balance update instantly,
knowing that every piece of the system is working together (event hooks,
service validation, database transactions, MessageBus publishing, frontend
subscription) - that&#x27;s satisfying.&lt;&#x2F;p&gt;
&lt;p&gt;The full source code is available at
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-yaks&quot;&gt;github.com&#x2F;ducks&#x2F;discourse-yaks&lt;&#x2F;a&gt;.
If you&#x27;re building a Discourse plugin and want to see how all these pieces fit
together, the repo should be a useful reference.&lt;&#x2F;p&gt;
&lt;p&gt;Next up: Payment integration and production deployment. Stay tuned for Part 5.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building Yaks: A Virtual Currency System for Discourse (Part 3: Advanced Features)</title>
          <pubDate>Sat, 18 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-3/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-3/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-3/">&lt;p&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-yaks-virtual-currency-part-1&#x2F;&quot;&gt;Part 1&lt;&#x2F;a&gt; covered the
backend architecture and &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-yaks-virtual-currency-part-2&#x2F;&quot;&gt;Part 2&lt;&#x2F;a&gt;
covered topic pinning and the expiration system. This post covers two more
complex features: topic boosting (pinning topics globally with visual
highlighting) and custom avatar flair (letting users customize their forum
identity).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;topic-pin-vs-topic-boost&quot;&gt;Topic Pin vs Topic Boost&lt;&#x2F;h2&gt;
&lt;p&gt;The plugin has two topic pinning features with different scopes:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Topic Pin&lt;&#x2F;strong&gt;: Pins a topic to the top of its category only. The topic stays
at the top of the category page but doesn&#x27;t appear across other categories.
No visual highlighting.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Topic Boost&lt;&#x2F;strong&gt;: Pins a topic globally across all categories AND adds a
colored border to make it stand out in topic lists. Much more visibility,
costs more Yaks.&lt;&#x2F;p&gt;
&lt;p&gt;This post focuses on topic boost, the more powerful and visually striking
feature.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;topic-boost-making-threads-stand-out&quot;&gt;Topic Boost: Making Threads Stand Out&lt;&#x2F;h2&gt;
&lt;p&gt;Topic boost is a premium feature that pins a topic globally (across all
categories) and adds a colored border to make it stand out in topic lists.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-topic-boosting-1.png&quot; alt=&quot;Topic boosting in action - a green-bordered topic stands out at the top of the topic list&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;backend-leveraging-discourse-apis&quot;&gt;Backend: Leveraging Discourse APIs&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse has native topic pinning built in. The API is straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;topic.update_pinned(status, global, pinned_until)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Parameters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;status&lt;&#x2F;code&gt;: true to pin, false to unpin&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;global&lt;&#x2F;code&gt;: true for global pin (all categories), false for category only&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pinned_until&lt;&#x2F;code&gt;: timestamp as string (not Time object)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The service implementation for topic boost:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic_boost&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  duration = feature.settings[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duration_hours&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]&amp;amp;.hours || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;72&lt;&#x2F;span&gt;&lt;span&gt;.hours
&lt;&#x2F;span&gt;&lt;span&gt;  related_topic.update_pinned(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, duration.from_now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_s&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  current_features = related_topic.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] || {}
&lt;&#x2F;span&gt;&lt;span&gt;  current_features[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;boosted&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;color:&lt;&#x2F;span&gt;&lt;span&gt; feature_data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:color&lt;&#x2F;span&gt;&lt;span&gt;] || &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gold&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;applied_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_i&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  related_topic.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = current_features
&lt;&#x2F;span&gt;&lt;span&gt;  related_topic.save_custom_fields
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This does two things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Pins the topic globally for 72 hours using Discourse&#x27;s native pinning&lt;&#x2F;li&gt;
&lt;li&gt;Stores visual customization data (color choice) in topic custom fields&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;frontend-value-transformers&quot;&gt;Frontend: Value Transformers&lt;&#x2F;h3&gt;
&lt;p&gt;To apply CSS classes to boosted topics in topic lists, we use Discourse&#x27;s
value transformer API. This is the modern replacement for the deprecated
widget decorators.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;registerValueTransformer&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic-list-item-class&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, ({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context &lt;&#x2F;span&gt;&lt;span&gt;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;boosted&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-boosted-topic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;boosted&lt;&#x2F;span&gt;&lt;span&gt;.color || &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gold&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-color-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The transformer receives a &lt;code&gt;value&lt;&#x2F;code&gt; array and adds CSS classes based on the
topic&#x27;s custom fields. Optional chaining (&lt;code&gt;?.&lt;&#x2F;code&gt;) prevents errors if the data
is missing.&lt;&#x2F;p&gt;
&lt;p&gt;We also apply styling to the first post in boosted topics:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;helper&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getModel&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topicYakFeatures &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isFirstPostInBoostedTopic &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post_number &lt;&#x2F;span&gt;&lt;span&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topicYakFeatures&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;boosted&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isFirstPostInBoostedTopic&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;article&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classList&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-boosted-topic-post&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topicYakFeatures&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;boosted&lt;&#x2F;span&gt;&lt;span&gt;.color || &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gold&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;article&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classList&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-color-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This gives visual consistency. The colored border appears both in topic lists
and on the opening post.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;avoiding-n-1-queries&quot;&gt;Avoiding N+1 Queries&lt;&#x2F;h3&gt;
&lt;p&gt;When adding custom field serialization, you must tell Discourse to preload
the data to avoid N+1 query warnings:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TopicList&lt;&#x2F;span&gt;&lt;span&gt;.preloaded_custom_fields &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TopicList&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;respond_to?&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:preloaded_custom_fields&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Without this, accessing &lt;code&gt;topic.custom_fields[&quot;yak_features&quot;]&lt;&#x2F;code&gt; in serializers
triggers a database query for every topic in the list. With preloading, all
custom fields load in a single query.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pin-auto-dismiss-behavior&quot;&gt;Pin Auto-Dismiss Behavior&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse has built-in pin dismissal behavior. When a user visits a pinned
topic, Discourse creates a &lt;code&gt;TopicUser&lt;&#x2F;code&gt; record with &lt;code&gt;cleared_pinned_at&lt;&#x2F;code&gt;
timestamp. For that user, the topic shows as unpinned.&lt;&#x2F;p&gt;
&lt;p&gt;This is intentional design to prevent banner blindness. The topic stays
pinned for everyone else, but individual users can dismiss it after viewing.
The colored border remains visible to all users regardless of pin state.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;css-variables-for-theme-customization&quot;&gt;CSS Variables for Theme Customization&lt;&#x2F;h3&gt;
&lt;p&gt;Originally, colors were hardcoded:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;yak-boosted-topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;yak-color-gold &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  border-color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#ffd700&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rgba&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;215&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This made it difficult for theme authors to customize colors. The fix was CSS
variables:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  --yak-color-gold: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#ffd700&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  --yak-color-gold-bg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rgba&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;215&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  --yak-color-blue: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#4169e1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  --yak-color-blue-bg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rgba&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;65&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;105&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;225&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;yak-boosted-topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;yak-color-gold &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  border-color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(--yak-color-gold);
&lt;&#x2F;span&gt;&lt;span&gt;  background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(--yak-color-gold-bg);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now theme authors can override colors without modifying plugin code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  --yak-color-gold: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#ff9900&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  --yak-color-gold-bg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rgba&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;153&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.15&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;custom-avatar-flair-user-identity&quot;&gt;Custom Avatar Flair: User Identity&lt;&#x2F;h2&gt;
&lt;p&gt;Avatar flair is the small badge that appears next to a user&#x27;s avatar.
Normally it&#x27;s set at the group level (moderators get one badge, admins get
another). The custom flair feature lets individual users choose their own
icon and color scheme for 30 days.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-avatar-flair.png&quot; alt=&quot;Custom avatar flair with a purple crown icon next to the user&amp;#39;s avatar&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-challenge-integrating-with-existing-components&quot;&gt;The Challenge: Integrating with Existing Components&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse has an existing &lt;code&gt;UserAvatarFlair&lt;&#x2F;code&gt; component that reads flair data
from serializers. The component expects certain fields (&lt;code&gt;flair_group_id&lt;&#x2F;code&gt;,
&lt;code&gt;flair_url&lt;&#x2F;code&gt;, &lt;code&gt;flair_bg_color&lt;&#x2F;code&gt;, etc.) and renders accordingly.&lt;&#x2F;p&gt;
&lt;p&gt;Initially, I tried using widget decorators to inject custom data. This hit
deprecation warnings. The modern pattern is overriding serializer fields
directly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;serializer-override-pattern&quot;&gt;Serializer Override Pattern&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of decorating components, we override the serializer methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_card&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post_action_user&lt;&#x2F;span&gt;&lt;span&gt;].each &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serializer_name&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  add_to_serializer(serializer_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:flair_url&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    user = serializer_name == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post &lt;&#x2F;span&gt;&lt;span&gt;? object.user : object
&lt;&#x2F;span&gt;&lt;span&gt;    flair = user.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]&amp;amp;.dig(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flair&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; flair &amp;amp;&amp;amp; flair[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;      flair[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;icon&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Return icon name like &amp;quot;rocket&amp;quot; or &amp;quot;crown&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      user.flair_group&amp;amp;.flair_icon || user.flair_group&amp;amp;.flair_upload&amp;amp;.url
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This checks user custom fields first. If yak custom flair is present, return
that data. Otherwise, fall back to group flair.&lt;&#x2F;p&gt;
&lt;p&gt;Similar overrides for &lt;code&gt;flair_bg_color&lt;&#x2F;code&gt;, &lt;code&gt;flair_color&lt;&#x2F;code&gt;, and &lt;code&gt;flair_name&lt;&#x2F;code&gt;.
This pattern works across all serializers (post, user card, action user)
without touching the component.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-flair-group-id-problem&quot;&gt;The flair_group_id Problem&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;UserAvatarFlair&lt;&#x2F;code&gt; component has an early return:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span&gt;|| !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flair_group_id&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; No flair rendered
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Users with custom flair but no group flair would fail this check. The
component would exit early and never render anything.&lt;&#x2F;p&gt;
&lt;p&gt;The fix was setting a dummy marker value:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;add_to_serializer(serializer_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:flair_group_id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  user = serializer_name == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post &lt;&#x2F;span&gt;&lt;span&gt;? object.user : object
&lt;&#x2F;span&gt;&lt;span&gt;  flair = user.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]&amp;amp;.dig(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flair&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; flair &amp;amp;&amp;amp; flair[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Dummy value to pass existence check
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    user.flair_group_id
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With &lt;code&gt;flair_group_id&lt;&#x2F;code&gt; set to &lt;code&gt;-1&lt;&#x2F;code&gt;, the component passes the existence check.
It then finds &lt;code&gt;flair_url&lt;&#x2F;code&gt; is set (to the icon name) and renders the custom
flair.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;frontend-icon-and-color-picker&quot;&gt;Frontend: Icon and Color Picker&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-flair-picker.png&quot; alt=&quot;Custom avatar flair picker modal showing red fire being selected&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The flair modal presents three selection grids:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ICONS &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;star&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;heart&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fire&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bolt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gem&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;crown&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rocket&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;trophy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BG_COLORS &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#ffd700&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#4169e1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#dc143c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#32cd32&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#9370db&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#ff8c00&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TEXT_COLORS &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#ffffff&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#000000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#ffd700&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Users click icons to select one, then choose background and text colors. A
live preview shows the combination:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flair-preview&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user-flair&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;={{this.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;previewStyle&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;icon this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selectedIcon&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The preview updates reactively as selections change. Once the user confirms,
the modal sends the choices to the backend, which stores them in user custom
fields.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;making-feature-cards-clickable&quot;&gt;Making Feature Cards Clickable&lt;&#x2F;h3&gt;
&lt;p&gt;On the wallet page, custom flair is the only feature that needs a modal
(icon&#x2F;color picker). Other features just need a color picker, which is
handled inline.&lt;&#x2F;p&gt;
&lt;p&gt;To make the custom flair card clickable, we split the template:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;{{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq feature&lt;&#x2F;span&gt;&lt;span&gt;.id &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;custom_flair&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)}}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature-card clickable&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;openFlairModal&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;card content &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature-card&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;card content &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Only the custom flair card gets the click handler. Other cards remain static.
This avoids passing &lt;code&gt;undefined&lt;&#x2F;code&gt; callbacks to the &lt;code&gt;{{on}}&lt;&#x2F;code&gt; helper.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s Next&lt;&#x2F;h2&gt;
&lt;p&gt;The plugin now has:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Post highlighting (colored borders)&lt;&#x2F;li&gt;
&lt;li&gt;Topic pinning (category-only)&lt;&#x2F;li&gt;
&lt;li&gt;Topic boosting (global pin + highlight)&lt;&#x2F;li&gt;
&lt;li&gt;Custom avatar flair (user identity)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Still to implement:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Post pinning (pin individual post to top of topic)&lt;&#x2F;li&gt;
&lt;li&gt;Post boosting (increase visibility in feeds)&lt;&#x2F;li&gt;
&lt;li&gt;Earning system (auto-reward quality posts)&lt;&#x2F;li&gt;
&lt;li&gt;Guardian authorization (permission checks)&lt;&#x2F;li&gt;
&lt;li&gt;Admin dashboard improvements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The earning system is the next major piece. Right now, users can only spend
Yaks. They need ways to earn them through quality contributions, not just
purchases.&lt;&#x2F;p&gt;
&lt;p&gt;Code is on GitHub: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-yaks&quot;&gt;ducks&#x2F;discourse-yaks&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building Yaks: A Virtual Currency System for Discourse (Part 2: Features and Expiration)</title>
          <pubDate>Fri, 17 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-2/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-2/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-2/">&lt;p&gt;In &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-yaks-virtual-currency-part-1&quot;&gt;Part 1&lt;&#x2F;a&gt;, I covered
the backend architecture for Yaks: wallets, transactions, and the service
layer. The database models were in place, but the system could only apply
one feature (post highlighting) and had no way to clean up expired features.&lt;&#x2F;p&gt;
&lt;p&gt;Part 2 covers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Implementing topic pinning (our second feature)&lt;&#x2F;li&gt;
&lt;li&gt;Refactoring the service layer to be truly modular&lt;&#x2F;li&gt;
&lt;li&gt;Building an expiration system with background jobs&lt;&#x2F;li&gt;
&lt;li&gt;Starting the admin configuration UI&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;spend-yaks.png&quot; alt=&quot;Spend Yaks button on topic footer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;spend-yaks-2.png&quot; alt=&quot;Spend Yaks modal showing available features&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;topic-pinning&quot;&gt;Topic Pinning&lt;&#x2F;h2&gt;
&lt;p&gt;Topic pinning lets users spend Yaks to pin their topic to the top of its
category for a configurable duration. This uses Discourse&#x27;s native pinning
mechanism, but requires currency to access.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-this-feature-matters&quot;&gt;Why This Feature Matters&lt;&#x2F;h3&gt;
&lt;p&gt;Forums prioritize content by recency. Older discussions get buried. Topic
pinning gives users a way to temporarily boost visibility for important
discussions without needing moderator intervention.&lt;&#x2F;p&gt;
&lt;p&gt;The constraint is time. After the configured duration expires, the pin is
removed and the topic returns to normal sorting.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-service-architecture-problem&quot;&gt;The Service Architecture Problem&lt;&#x2F;h3&gt;
&lt;p&gt;When implementing topic pinning, I hit an architectural issue. The existing
&lt;code&gt;YakFeatureService.apply_feature&lt;&#x2F;code&gt; method was post-centric:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply_feature&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_data&lt;&#x2F;span&gt;&lt;span&gt;: {})
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ... validation logic ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  feature_use = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse&lt;&#x2F;span&gt;&lt;span&gt;.create!(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_feature:&lt;&#x2F;span&gt;&lt;span&gt; feature,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; related_post,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Always requires a post
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_data:&lt;&#x2F;span&gt;&lt;span&gt; feature_data
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This design assumed every feature applies to a post. But topic pinning
applies to a topic, not a post. I could hack around it by passing
&lt;code&gt;related_post.topic&lt;&#x2F;code&gt;, but that&#x27;s wrong. The service should support both
contexts.&lt;&#x2F;p&gt;
&lt;p&gt;Looking at the implementation, the issue was clear. The service wasn&#x27;t
modular at all. It was built for posts and only posts. Adding topic
support meant refactoring the core design.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;refactoring-the-service&quot;&gt;Refactoring the Service&lt;&#x2F;h3&gt;
&lt;p&gt;The fix was adding support for both posts and topics:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Old (post-centric)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply_feature&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_data&lt;&#x2F;span&gt;&lt;span&gt;: {})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# New (modular, all keyword)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply_feature&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;:,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;:,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_post&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_topic&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_data&lt;&#x2F;span&gt;&lt;span&gt;: {}
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the service accepts either a post or a topic (or neither, for
user-level features like custom flair). Making all parameters keyword
arguments forces explicit call sites, which prevents mistakes when you have
multiple optional params.&lt;&#x2F;p&gt;
&lt;p&gt;Validation got context-specific methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;can_apply_to_post?&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; post.trashed? || post.deleted_at.present?
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; post.user_id != user.id
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Check for existing active feature
&lt;&#x2F;span&gt;&lt;span&gt;  !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse&lt;&#x2F;span&gt;&lt;span&gt;.exists?(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_feature: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeature&lt;&#x2F;span&gt;&lt;span&gt;.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_key:&lt;&#x2F;span&gt;&lt;span&gt; feature_key),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; post,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expires_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span&gt;::INFINITY
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;can_apply_to_topic?&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; topic.closed || topic.archived
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; topic.user_id != user.id
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Check for existing active feature
&lt;&#x2F;span&gt;&lt;span&gt;  !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse&lt;&#x2F;span&gt;&lt;span&gt;.exists?(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_feature: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeature&lt;&#x2F;span&gt;&lt;span&gt;.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_key:&lt;&#x2F;span&gt;&lt;span&gt; feature_key),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_topic:&lt;&#x2F;span&gt;&lt;span&gt; topic,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expires_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span&gt;::INFINITY
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This pattern will scale. When we add user-level features (custom flair),
we&#x27;ll add &lt;code&gt;can_apply_to_user?&lt;&#x2F;code&gt; without touching the core service logic.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;integrating-with-discourse-s-topic-pinning&quot;&gt;Integrating with Discourse&#x27;s Topic Pinning&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse has built-in topic pinning. The &lt;code&gt;Topic&lt;&#x2F;code&gt; model has an
&lt;code&gt;update_pinned&lt;&#x2F;code&gt; method:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;duration = feature.duration_hours.hours
&lt;&#x2F;span&gt;&lt;span&gt;topic.update_pinned(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, duration.from_now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_s&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Three parameters:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pinned&lt;&#x2F;code&gt; - Enable or disable the pin&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;global&lt;&#x2F;code&gt; - Pin globally (across all categories) or just in this topic&#x27;s
category&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pinned_until&lt;&#x2F;code&gt; - When to automatically unpin (must be a string timestamp)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The third parameter is critical. It must be a string, not a Time object.
This caught me during implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Wrong (creates YakFeatureUse but topic doesn&amp;#39;t actually pin)
&lt;&#x2F;span&gt;&lt;span&gt;topic.update_pinned(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, feature.duration_hours.hours.from_now)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Correct
&lt;&#x2F;span&gt;&lt;span&gt;topic.update_pinned(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, feature.duration_hours.hours.from_now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_s&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The feature use was being created, the Yaks were being deducted, but the
topic wasn&#x27;t pinning. The issue was the timestamp format. &lt;code&gt;update_pinned&lt;&#x2F;code&gt;
silently fails if you pass a Time object instead of a string.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;expiration-system&quot;&gt;Expiration System&lt;&#x2F;h2&gt;
&lt;p&gt;Features need to expire. Each feature has a configurable duration stored in
the database. We need a way to clean up expired features and undo their
effects.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-architecture&quot;&gt;The Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;The system has three parts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Regular Job&lt;&#x2F;strong&gt;: &lt;code&gt;ExpireYakFeature&lt;&#x2F;code&gt; - Handles a single expiration&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Scheduled Job&lt;&#x2F;strong&gt;: &lt;code&gt;CleanupExpiredYakFeatures&lt;&#x2F;code&gt; - Finds expired features
and queues regular jobs&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Service Method&lt;&#x2F;strong&gt;: &lt;code&gt;YakFeatureService.expire_feature&lt;&#x2F;code&gt; - Business logic
for expiration&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The primary expiration mechanism runs at creation time. When a feature use
is created, the expiration job is scheduled to run exactly when it expires:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply_feature&lt;&#x2F;span&gt;&lt;span&gt;(...)
&lt;&#x2F;span&gt;&lt;span&gt;  feature_use = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse&lt;&#x2F;span&gt;&lt;span&gt;.create!(...)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; feature_use.expires_at
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jobs&lt;&#x2F;span&gt;&lt;span&gt;.enqueue_at(feature_use.expires_at, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:expire_yak_feature&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_use_id:&lt;&#x2F;span&gt;&lt;span&gt; feature_use.id)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is efficient. No polling. The job runs exactly when needed.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-scheduled-job&quot;&gt;The Scheduled Job&lt;&#x2F;h3&gt;
&lt;p&gt;Runs hourly to find expired features:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span&gt;Jobs
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CleanupExpiredYakFeatures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;::Jobs::Scheduled
&lt;&#x2F;span&gt;&lt;span&gt;    every &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.hour
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      expired_features = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;YakFeatureUse
&lt;&#x2F;span&gt;&lt;span&gt;        .where(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expires_at IS NOT NULL AND expires_at &amp;lt;= ?&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now)
&lt;&#x2F;span&gt;&lt;span&gt;        .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expired: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      expired_features.find_each &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_use&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jobs&lt;&#x2F;span&gt;&lt;span&gt;.enqueue(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:expire_yak_feature&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_use_id:&lt;&#x2F;span&gt;&lt;span&gt; feature_use.id)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;processed:&lt;&#x2F;span&gt;&lt;span&gt; expired_features.count }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It queries for expired features (where &lt;code&gt;expires_at&lt;&#x2F;code&gt; is in the past) and
queues a job for each one.&lt;&#x2F;p&gt;
&lt;p&gt;This hourly cleanup job is a safety net. If the server restarts before a
scheduled job runs, or if something goes wrong with job scheduling, the
cleanup job catches it. It&#x27;s backup, not the primary mechanism.&lt;&#x2F;p&gt;
&lt;p&gt;Why &lt;code&gt;find_each&lt;&#x2F;code&gt; instead of &lt;code&gt;each&lt;&#x2F;code&gt;? Performance. &lt;code&gt;find_each&lt;&#x2F;code&gt; loads records
in batches (1000 by default) instead of loading everything into memory. If
you have 10,000 expired features, &lt;code&gt;each&lt;&#x2F;code&gt; would load all 10,000 at once.
&lt;code&gt;find_each&lt;&#x2F;code&gt; loads 1000, processes them, loads the next 1000.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-regular-job&quot;&gt;The Regular Job&lt;&#x2F;h3&gt;
&lt;p&gt;Processes one expiration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span&gt;Jobs
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExpireYakFeature &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;::Jobs::Base
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      feature_use = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse&lt;&#x2F;span&gt;&lt;span&gt;.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id:&lt;&#x2F;span&gt;&lt;span&gt; args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:feature_use_id&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return unless&lt;&#x2F;span&gt;&lt;span&gt; feature_use
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureService&lt;&#x2F;span&gt;&lt;span&gt;.expire_feature(feature_use)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Why a separate job? Fault tolerance. If one expiration fails (database
error, bug in the expiration logic), it doesn&#x27;t stop the others from
processing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-service-method&quot;&gt;The Service Method&lt;&#x2F;h3&gt;
&lt;p&gt;Handles the business logic:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;expire_feature&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_use&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  feature_key = feature_use.yak_feature.feature_key
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; feature_key
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_highlight&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    remove_post_highlight(feature_use.related_post)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic_pin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    unpin_topic(feature_use.related_topic)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  feature_use.update!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expired: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;private
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove_post_highlight&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return unless&lt;&#x2F;span&gt;&lt;span&gt; post
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  features = post.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] || {}
&lt;&#x2F;span&gt;&lt;span&gt;  features.delete(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;highlight&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; features.empty?
&lt;&#x2F;span&gt;&lt;span&gt;    post.custom_fields.delete(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    post.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = features
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  post.save_custom_fields
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;unpin_topic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return unless&lt;&#x2F;span&gt;&lt;span&gt; topic
&lt;&#x2F;span&gt;&lt;span&gt;  topic.update_pinned(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Expiration removes the visual effects and marks the feature use as expired.&lt;&#x2F;p&gt;
&lt;p&gt;Why mark as expired instead of deleting? Audit trail. Users can see their
feature history. Admins can debug issues. Refunds are easier because you
have the original feature use record.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;frontend-integration&quot;&gt;Frontend Integration&lt;&#x2F;h2&gt;
&lt;p&gt;The frontend needed two things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A &quot;Spend Yaks&quot; button on topics&lt;&#x2F;li&gt;
&lt;li&gt;Context-aware modal that shows appropriate features&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;topic-footer-button&quot;&gt;Topic Footer Button&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse has an API for adding buttons to topic footers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;withPluginApi &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;discourse&#x2F;lib&#x2F;plugin-api&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-topic-actions&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;initialize&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;withPluginApi&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;registerTopicFooterButton&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;        id: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-spend&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        icon: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;coins&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        label: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yaks.topic_action.spend&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modal &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getOwner&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lookup&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;service:modal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modal&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SpendYaksModal&lt;&#x2F;span&gt;&lt;span&gt;, {
&lt;&#x2F;span&gt;&lt;span&gt;            model: {
&lt;&#x2F;span&gt;&lt;span&gt;              topic: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;          });
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dropdown&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;site&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mobileView&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        classNames: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-spend&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;        dependentKeys: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic.closed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic.archived&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;displayed&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentUser &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_id &lt;&#x2F;span&gt;&lt;span&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentUser&lt;&#x2F;span&gt;&lt;span&gt;.id &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;            !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.closed &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;            !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;archived
&lt;&#x2F;span&gt;&lt;span&gt;          );
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;displayed()&lt;&#x2F;code&gt; function controls visibility. The button only shows if:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;User is logged in&lt;&#x2F;li&gt;
&lt;li&gt;User owns the topic&lt;&#x2F;li&gt;
&lt;li&gt;Topic isn&#x27;t closed or archived&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;context-aware-modal&quot;&gt;Context-Aware Modal&lt;&#x2F;h3&gt;
&lt;p&gt;The modal needed to work for both posts and topics:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SpendYaksModal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;isPostContext&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;!!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;isTopicContext&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;!!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;postFeatures&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allFeatures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;category &lt;&#x2F;span&gt;&lt;span&gt;=== &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;topicFeatures&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allFeatures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;category &lt;&#x2F;span&gt;&lt;span&gt;=== &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;availableFeatures&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isPostContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;postFeatures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isTopicContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topicFeatures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One modal, two contexts. The UI adapts based on whether you clicked &quot;Spend
Yaks&quot; on a post or a topic.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;admin-ui-in-progress&quot;&gt;Admin UI (In Progress)&lt;&#x2F;h2&gt;
&lt;p&gt;The final piece is admin configuration. Currently, features and purchase
packages are hardcoded. They need to be editable in the UI.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;database-backed-packages&quot;&gt;Database-Backed Packages&lt;&#x2F;h3&gt;
&lt;p&gt;Created a &lt;code&gt;yak_packages&lt;&#x2F;code&gt; table:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;create_table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_packages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  t.string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;  t.text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:description
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:price_cents&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yaks&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:bonus_yaks&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:enabled&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:position&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.timestamps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Price is stored as cents (integers) instead of dollars (floats) to avoid
floating-point precision issues. A $5.00 package is 500 cents.&lt;&#x2F;p&gt;
&lt;p&gt;The model has helper methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakPackage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ActiveRecord::Base
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;total_yaks
&lt;&#x2F;span&gt;&lt;span&gt;    yaks + bonus_yaks
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;price_usd
&lt;&#x2F;span&gt;&lt;span&gt;    price_cents &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100.0
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;price_usd=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usd&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.price_cents = (usd.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_f &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_i
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This lets you work in dollars in the UI but store as cents in the database.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;crud-endpoints&quot;&gt;CRUD Endpoints&lt;&#x2F;h3&gt;
&lt;p&gt;Added REST endpoints to the admin controller:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;packages
&lt;&#x2F;span&gt;&lt;span&gt;  packages = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakPackage&lt;&#x2F;span&gt;&lt;span&gt;.ordered
&lt;&#x2F;span&gt;&lt;span&gt;  render &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;json: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;packages:&lt;&#x2F;span&gt;&lt;span&gt; packages.map { |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;| serialize_package(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;) } }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create_package
&lt;&#x2F;span&gt;&lt;span&gt;  package = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakPackage&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(package_params)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; package.save
&lt;&#x2F;span&gt;&lt;span&gt;    render &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;json: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;package:&lt;&#x2F;span&gt;&lt;span&gt; serialize_package(package) }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    render_json_error(package.errors.full_messages.join(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;update_package
&lt;&#x2F;span&gt;&lt;span&gt;  package = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakPackage&lt;&#x2F;span&gt;&lt;span&gt;.find(params[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:id&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; package.update(package_params)
&lt;&#x2F;span&gt;&lt;span&gt;    render &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;json: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;package:&lt;&#x2F;span&gt;&lt;span&gt; serialize_package(package) }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    render_json_error(package.errors.full_messages.join(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;delete_package
&lt;&#x2F;span&gt;&lt;span&gt;  package = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakPackage&lt;&#x2F;span&gt;&lt;span&gt;.find(params[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:id&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  package.destroy!
&lt;&#x2F;span&gt;&lt;span&gt;  render &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;json:&lt;&#x2F;span&gt;&lt;span&gt; success_json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Standard Rails REST pattern. The admin can create, edit, and delete
packages without touching code.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;admin-ui-structure&quot;&gt;Admin UI Structure&lt;&#x2F;h3&gt;
&lt;p&gt;The UI follows Discourse&#x27;s admin plugin pattern (inspired by the Chat
plugin):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;admin&#x2F;assets&#x2F;javascripts&#x2F;discourse&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── routes&#x2F;admin-plugins&#x2F;show&#x2F;discourse-yaks-management&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── controllers&#x2F;admin-plugins&#x2F;show&#x2F;discourse-yaks-management&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── templates&#x2F;admin&#x2F;plugins&#x2F;show&#x2F;discourse-yaks-management&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;└── initializers&#x2F;yaks-admin-plugin-configuration-nav.js
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The structure creates tabs:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Settings&lt;&#x2F;strong&gt; - Site settings (automatic)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Management&lt;&#x2F;strong&gt; - Custom UI for packages, features, stats&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The templates use Discourse&#x27;s admin components:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hbs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-hbs &quot;&gt;&lt;code class=&quot;language-hbs&quot; data-lang=&quot;hbs&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;admin-config-page&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;admin-plugin-config-page&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;d-page-header&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;d-page-header__title-row&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;d-page-header__title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Yak Management&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;d-page-header__description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Manage your virtual currency system. Configure purchase packages
&lt;&#x2F;span&gt;&lt;span&gt;        and premium features.
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;admin-plugin-config-page__content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- Tables for stats, packages, features --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This matches Discourse&#x27;s standard admin page structure. Using the
framework&#x27;s components ensures consistency with the rest of the admin area.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;current-status&quot;&gt;Current Status&lt;&#x2F;h3&gt;
&lt;p&gt;The admin UI backend is complete (CRUD endpoints, modals, tables), but the
tab navigation isn&#x27;t working yet. The Settings tab appears, but the
Management tab doesn&#x27;t. This is a routing issue, not a data issue.&lt;&#x2F;p&gt;
&lt;p&gt;The tables work when accessed directly. The functionality is there. The
navigation just needs debugging.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s Next&lt;&#x2F;h2&gt;
&lt;p&gt;The immediate task is fixing the admin UI tab navigation. Once that&#x27;s
working, admins will have full control over the system configuration:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Add&#x2F;edit&#x2F;delete purchase packages (price, Yak amounts, bonus structure)&lt;&#x2F;li&gt;
&lt;li&gt;Configure feature costs and durations (how many Yaks, how long they last)&lt;&#x2F;li&gt;
&lt;li&gt;View system statistics (total wallets, Yaks in circulation, active
features)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Implement the earning system (reward quality posts based on configurable
criteria)&lt;&#x2F;li&gt;
&lt;li&gt;Build the remaining features (post pin, post boost, custom flair)&lt;&#x2F;li&gt;
&lt;li&gt;Add purchase flow integration (Stripe for buying Yaks with real money)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The plugin is functional. Two features work end-to-end. The expiration
system is running. The architecture is modular enough to add new features
without major refactoring.&lt;&#x2F;p&gt;
&lt;p&gt;Part 3 will cover the earning system and completing the admin UI.&lt;&#x2F;p&gt;
&lt;p&gt;The code is on GitHub: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-yaks&quot;&gt;ducks&#x2F;discourse-yaks&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT assisted Changelog - 42&#x2F;52</title>
          <pubDate>Fri, 17 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-42/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-42/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-42/">&lt;p&gt;&lt;strong&gt;AWS SDK Ruby contributions and follow-up&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You published &lt;em&gt;Contributing to AWS SDK Ruby - Part 3&lt;&#x2F;em&gt;, which wrapped up your series
about improving the Ruby AWS SDK. You mentioned the post got 3 boosts on Mastodon
and linked to it from Hachyderm. We also talked briefly about your earlier PRs and
how they connect -- adding a feature first, then fixing a bug.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Transit Tracker and Discourse experiments&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You released and shared &lt;em&gt;Building a Live Transit Departure Board with Discourse&lt;&#x2F;em&gt;,
a creative exploration of using Discourse for something non-forum-like. We talked
about whether posting it on Discourse&#x27;s official blog or community site would be
weird, and you decided it&#x27;d actually fit since you work there. You also added
screenshots later to make the post more engaging.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;GoatCounter and analytics debugging&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You tried exporting page-view data from your self-hosted GoatCounter instance, but
ran into a network failure while testing the API. You realized you might not have
the admin section working yet. You also revisited an older issue about countries
being listed twice in your data and looked at the GoatCounter repo to see why.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Personal tools and privacy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We discussed private movement trackers for GrapheneOS, and you settled on &lt;em&gt;PFA&lt;&#x2F;em&gt; as
a lightweight way to track steps and distance without leaking data.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Side notes&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You mentioned two new blog posts being live -- &lt;em&gt;Transit Tracker in Discourse&lt;&#x2F;em&gt; and
&lt;em&gt;Yak&#x27;s Virtual Currency - Part 2&lt;&#x2F;em&gt; -- both updated with screenshots.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building Slumprutt: A Random Route Generator in Under an Hour</title>
          <pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-slumprutt-random-route-generator/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-slumprutt-random-route-generator/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-slumprutt-random-route-generator/">&lt;p&gt;I&#x27;ve wanted a random route generator for awhile now. My problem is I walk
and bike the same routes over and over. My brain goes on autopilot. I wanted
something that would throw me new routes to explore in my own neighborhood.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted something simple: &quot;Give me a random 5-mile loop from my house.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;So I built it. With Claude Code&#x27;s help, we went from idea to working app
in under an hour.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-name&quot;&gt;The Name&lt;&#x2F;h2&gt;
&lt;p&gt;&quot;Slumprutt&quot; comes from Swedish &quot;slumpmässig rutt&quot; (slumpmässig = random or
by chance, rutt = route), commonly shortened to just &quot;slumprutt&quot;. Seemed
fitting for a random route generator.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-stack&quot;&gt;The Stack&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Backend&lt;&#x2F;strong&gt;: TypeScript + Node.js + Express&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Frontend&lt;&#x2F;strong&gt;: Svelte + TypeScript + Leaflet&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Routing&lt;&#x2F;strong&gt;: OSRM (Open Source Routing Machine)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Maps&lt;&#x2F;strong&gt;: OpenStreetMap&lt;&#x2F;p&gt;
&lt;p&gt;OSRM deserves special mention. It&#x27;s a free public API that provides
road-accurate routing with turn-by-turn directions. Incredibly fast
(sub-second response times) and requires zero setup. Just hit their public
endpoint and get back real routes that follow actual roads.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-algorithm&quot;&gt;The Algorithm&lt;&#x2F;h2&gt;
&lt;p&gt;The core challenge was generating interesting random loops. Not just random
waypoints, but routes that actually feel like purposeful walks or bike rides.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s what I landed on:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generateLoopWaypoints&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;: Coordinate,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;targetDistanceKm&lt;&#x2F;span&gt;&lt;span&gt;: number,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;variationIndex&lt;&#x2F;span&gt;&lt;span&gt;: number = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;): Coordinate[] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Use fewer waypoints (3-5) for longer segments
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;numWaypoints &lt;&#x2F;span&gt;&lt;span&gt;= Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;variationIndex&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Reduced multiplier to 0.6 to account for road routing overhead
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baseRadius &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;targetDistanceKm &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* Math.PI) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.6&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;waypoints&lt;&#x2F;span&gt;&lt;span&gt;: Coordinate[] = [];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;latPerKm &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;111&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 1 degree latitude ≈ 111km
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lonPerKm &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;111 &lt;&#x2F;span&gt;&lt;span&gt;* Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cos&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lat &lt;&#x2F;span&gt;&lt;span&gt;* Math.PI) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Rotate each route by 120° to avoid overlap
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;primaryDirection &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;variationIndex &lt;&#x2F;span&gt;&lt;span&gt;* (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* Math.PI)) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;numWaypoints&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;++) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baseAngle &lt;&#x2F;span&gt;&lt;span&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;numWaypoints&lt;&#x2F;span&gt;&lt;span&gt;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* Math.PI + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;primaryDirection&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; More randomness for diverse paths
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angleVariation &lt;&#x2F;span&gt;&lt;span&gt;= (Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;() - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angle &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baseAngle &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angleVariation&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; More radius variation to explore different distances
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radiusVariation &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span&gt;+ Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random&lt;&#x2F;span&gt;&lt;span&gt;() * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radius &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baseRadius &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radiusVariation&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;waypoints&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;      lat: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lat &lt;&#x2F;span&gt;&lt;span&gt;+ Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angle&lt;&#x2F;span&gt;&lt;span&gt;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radius &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;latPerKm&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      lon: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lon &lt;&#x2F;span&gt;&lt;span&gt;+ Math.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cos&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angle&lt;&#x2F;span&gt;&lt;span&gt;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radius &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lonPerKm&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;waypoints&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Key design decisions:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fewer waypoints&lt;&#x2F;strong&gt; (3-5 instead of 8+) means longer road segments and
more interesting routes. Too many waypoints and you just walk back and
forth.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Smaller radius with overhead adjustment&lt;&#x2F;strong&gt; (0.6x) accounts for the fact
that road routing adds significant distance compared to straight-line
waypoints. Initially used 1.5x which resulted in 7-8 mile routes when
requesting 1 mile.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Directional rotation&lt;&#x2F;strong&gt; (120° per route) prevents all routes from
heading in the same direction. Generate 3 routes and they&#x27;ll spread out
into different quadrants.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;More randomness&lt;&#x2F;strong&gt; (0.8 angle variation, 0.5-1.5 radius variation)
creates diverse paths that explore different areas. This prevents
multiple routes from clustering in the same locations.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Then we feed those waypoints to OSRM, which turns them into actual road
routes with turn-by-turn directions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;distance-input-validation&quot;&gt;Distance Input Validation&lt;&#x2F;h3&gt;
&lt;p&gt;First issue: weird validation errors when changing distance inputs. I had
&lt;code&gt;step=&quot;0.1&quot;&lt;&#x2F;code&gt; on both the miles and kilometers inputs. The problem:
3.2 miles converts to 5.1494888 km, which rounds to 5.15. The browser
expected 5.1 or 5.2 (multiples of 0.1) and rejected 5.15.&lt;&#x2F;p&gt;
&lt;p&gt;Fix: &lt;code&gt;step=&quot;any&quot;&lt;&#x2F;code&gt; accepts any decimal value.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;map-not-visible&quot;&gt;Map Not Visible&lt;&#x2F;h3&gt;
&lt;p&gt;Built the whole UI, ran it, and... no map. Just an empty space where the
map should be.&lt;&#x2F;p&gt;
&lt;p&gt;The issue: CSS height inheritance. The map div had &lt;code&gt;height: 100%&lt;&#x2F;code&gt; but its
parent containers didn&#x27;t have explicit heights. The fix required setting
height on three elements:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;#app&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  height: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a common Svelte gotcha when you want a full-viewport layout.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;routes-don-t-follow-roads&quot;&gt;Routes Don&#x27;t Follow Roads&lt;&#x2F;h3&gt;
&lt;p&gt;Initial implementation drew straight lines between waypoints. Routes went
through buildings, parks, water. Not useful for actual navigation.&lt;&#x2F;p&gt;
&lt;p&gt;This is where OSRM saved the day. One API call with waypoints, get back
actual road geometry:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;coords &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;points&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;},${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;router.project-osrm.org&#x2F;route&#x2F;v1&#x2F;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;profile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&#x2F;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;coords&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}?overview=full&amp;amp;geometries=geojson&amp;amp;steps=true&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;steps=true&lt;&#x2F;code&gt; parameter gives you turn-by-turn directions too, which
I added to the UI in collapsible sections under each route.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;boring-back-and-forth-routes&quot;&gt;Boring Back-and-Forth Routes&lt;&#x2F;h3&gt;
&lt;p&gt;First test: &quot;Walk this way, turn around, walk back.&quot; Technically a loop, but
boring as hell.&lt;&#x2F;p&gt;
&lt;p&gt;The issue was too many waypoints creating short segments. The fix was the
algorithm changes I mentioned earlier: fewer waypoints, larger radius,
directional rotation. Now routes actually explore different areas instead
of just oscillating.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;typescript-across-the-stack&quot;&gt;TypeScript Across the Stack&lt;&#x2F;h2&gt;
&lt;p&gt;I initially questioned whether TypeScript was overkill for this project.
Turns out it was perfect.&lt;&#x2F;p&gt;
&lt;p&gt;Shared types between frontend and backend caught so many potential bugs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export interface &lt;&#x2F;span&gt;&lt;span&gt;Coordinate {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lat&lt;&#x2F;span&gt;&lt;span&gt;: number;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lon&lt;&#x2F;span&gt;&lt;span&gt;: number;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export interface &lt;&#x2F;span&gt;&lt;span&gt;GeneratedRoute {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: number;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;points&lt;&#x2F;span&gt;&lt;span&gt;: Coordinate[];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;waypoints&lt;&#x2F;span&gt;&lt;span&gt;: Coordinate[];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isLoop&lt;&#x2F;span&gt;&lt;span&gt;: boolean;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distance&lt;&#x2F;span&gt;&lt;span&gt;?: number;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span&gt;?: number;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;?: RouteStep[];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the backend returns &lt;code&gt;GeneratedRoute[]&lt;&#x2F;code&gt;, the frontend knows exactly
what shape to expect. No guessing, no runtime surprises.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;development-environment&quot;&gt;Development Environment&lt;&#x2F;h2&gt;
&lt;p&gt;Created a Nix shell for reproducible development:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;pkgs ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;nixpkgs&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkShell &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;buildInputs &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;; [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodejs_22
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;typescript
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nodePackages&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tsx
&lt;&#x2F;span&gt;&lt;span&gt;  ];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Anyone can clone the repo, run &lt;code&gt;nix-shell&lt;&#x2F;code&gt;, and have the exact same
environment. No &quot;works on my machine&quot; issues.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;result&quot;&gt;Result&lt;&#x2F;h2&gt;
&lt;p&gt;The app works. You enter an address, pick a mode (walk&#x2F;bike&#x2F;car), set a
distance, and hit generate. It shows you multiple random routes on an
interactive map with turn-by-turn directions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;slumprutt-1.png&quot; alt=&quot;Initial interface with form inputs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;slumprutt-2.png&quot; alt=&quot;Generated routes displayed on map&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;slumprutt-3.png&quot; alt=&quot;Route highlighting on hover&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;slumprutt-4.png&quot; alt=&quot;Turn-by-turn walking directions&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve already used it to find new walking routes in my neighborhood.&lt;&#x2F;p&gt;
&lt;p&gt;Is it perfect? No, it&#x27;s not. You will get routes that go down sketchy roads or
routes that still go back and forth. But it was fun and it&#x27;s helpful to me.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Try it yourself&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;slumprutt&quot;&gt;github.com&#x2F;ducks&#x2F;slumprutt&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-learned&quot;&gt;What I Learned&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;OSRM is incredible&lt;&#x2F;strong&gt; - Free, fast, accurate. No API key required. If
you&#x27;re building anything with routing, use OSRM.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TypeScript prevents so many bugs&lt;&#x2F;strong&gt; - Especially for coordinate&#x2F;route
data that flows through multiple layers. Type errors at compile time
beat runtime errors every time.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fewer waypoints make better routes&lt;&#x2F;strong&gt; - Counterintuitive, but 3-5
waypoints create more interesting loops than 8-10.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Svelte&#x27;s reactivity is clean&lt;&#x2F;strong&gt; - No useState&#x2F;useEffect boilerplate.
Just &lt;code&gt;$: if (condition) { doThing() }&lt;&#x2F;code&gt; and it works.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Building with AI is wild&lt;&#x2F;strong&gt; - Went from idea to working app in under
an hour. Not just scaffolding, but a fully functional app with an
interesting algorithm, API integration, and polished UI.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</description>
      </item>
      <item>
          <title>AWS SDK Ruby Part 3: When &quot;Working as Intended&quot; Means &quot;Broken by Design&quot;</title>
          <pubDate>Tue, 14 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/contributing-to-aws-sdk-ruby-pt3/</link>
          <guid>https://jakegoldsborough.com/blog/2025/contributing-to-aws-sdk-ruby-pt3/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/contributing-to-aws-sdk-ruby-pt3/">&lt;h3 id=&quot;the-saga-continues&quot;&gt;The Saga Continues&lt;&#x2F;h3&gt;
&lt;p&gt;If you&#x27;ve been following along (&lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;contributing-to-aws-sdk-ruby&#x2F;&quot;&gt;Part
1&lt;&#x2F;a&gt; and
&lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;contributing-to-aws-sdk-ruby-pt2&#x2F;&quot;&gt;Part
2&lt;&#x2F;a&gt;),
you know I&#x27;ve been on a journey fixing AWS SDK Ruby credential handling. First
I added the missing &lt;code&gt;credential_source = Environment&lt;&#x2F;code&gt; implementation, then I
discovered it didn&#x27;t actually work due to credential chain precedence issues.&lt;&#x2F;p&gt;
&lt;p&gt;After extensive testing and code analysis, I submitted &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-ruby&#x2F;pull&#x2F;3303&quot;&gt;PR
#3303&lt;&#x2F;a&gt; with a fix. The
maintainer initially responded positively:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;Hey, thanks for opening an issue. I believe you are correct and this is
something we need to fix.&quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Great! But then...&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-reversal&quot;&gt;The Reversal&lt;&#x2F;h3&gt;
&lt;p&gt;After I provided detailed testing comparing AWS CLI behavior, demonstrated the
fix working in production, and showed exactly which code was unreachable due to
the chain precedence, the maintainer walked it back:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;From what I understand, I think the default chain will try to resolve
credentials as quickly as possible, so if environment variables are set it will
use them directly instead of using them as a credential source. We try not to
change the behavior of the default chain since returning credentials in a
different order can break many customers.&quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;And then closed both the issue and PR.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-this-is-wrong&quot;&gt;Why This Is Wrong&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;1. The Feature Is Completely Broken&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When you configure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[default]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role_arn &lt;&#x2F;span&gt;&lt;span&gt;= arn:aws:iam::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;123456789012&lt;&#x2F;span&gt;&lt;span&gt;:role&#x2F;MyRole
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;credential_source &lt;&#x2F;span&gt;&lt;span&gt;= Environment
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What happens?&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;env_credentials&lt;&#x2F;code&gt; (position 7) finds &lt;code&gt;AWS_ACCESS_KEY_ID&lt;&#x2F;code&gt; and
&lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Chain returns those credentials and stops&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;assume_role_credentials&lt;&#x2F;code&gt; (position 10) never executes&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;role_arn&lt;&#x2F;code&gt; and &lt;code&gt;credential_source&lt;&#x2F;code&gt; configuration is &lt;strong&gt;completely
ignored&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The maintainer confirmed this: &quot;All of the &lt;code&gt;static_profile_&lt;&#x2F;code&gt; methods handle
credentials resolution when a client is configured explicitly with a profile.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;So the feature works... but only if you don&#x27;t use the credential chain, which
defeats the entire purpose of having a credential chain.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;2. The Code Contradicts Their Argument&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Look at
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-ruby&#x2F;blob&#x2F;version-3&#x2F;gems&#x2F;aws-sdk-core&#x2F;lib&#x2F;aws-sdk-core&#x2F;shared_config.rb#L392-L400&quot;&gt;&lt;code&gt;shared_config.rb:392-400&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;credentials_from_source&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;credential_source&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; credential_source
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Ec2InstanceMetadata&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;EcsContainer&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    creds = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Credentials&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ENV&lt;&#x2F;span&gt;&lt;span&gt;[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AWS_ACCESS_KEY_ID&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ENV&lt;&#x2F;span&gt;&lt;span&gt;[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ENV&lt;&#x2F;span&gt;&lt;span&gt;[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AWS_SESSION_TOKEN&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    creds.metrics = [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CREDENTIALS_ENV_VARS&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;    creds
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code exists specifically to use environment variables as source credentials
for role assumption. But the credential chain prevents it from ever executing
when using the default profile.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;3. The Workaround Proves It&#x27;s Broken&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The maintainer suggested: &quot;if specifying the profile resolves your issue I
would recommend doing that.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;But that&#x27;s not a solution, it&#x27;s an admission the feature is broken. The
credential chain exists so you DON&#x27;T have to explicitly pass &lt;code&gt;profile:&lt;&#x2F;code&gt;
parameters everywhere. Setting &lt;code&gt;AWS_PROFILE=default&lt;&#x2F;code&gt; or using the default
profile should work. That&#x27;s the entire design philosophy.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;4. Who Would This &quot;Break&quot;?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The maintainer worried about &quot;breaking many customers.&quot; But let&#x27;s think about
this:&lt;&#x2F;p&gt;
&lt;p&gt;My fix only affects users who have &lt;strong&gt;both&lt;&#x2F;strong&gt; of these conditions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A profile with &lt;code&gt;role_arn&lt;&#x2F;code&gt; AND &lt;code&gt;credential_source = Environment&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Environment variables &lt;code&gt;AWS_ACCESS_KEY_ID&lt;&#x2F;code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;&#x2F;code&gt; set&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If someone configures both, they&#x27;re explicitly declaring: &quot;use these
environment variables AS SOURCE CREDENTIALS to assume this role.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;Who would configure this and expect it to be ignored? That&#x27;s not a customer
being protected, that&#x27;s a broken feature being excused.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-i-did-instead&quot;&gt;What I Did Instead&lt;&#x2F;h3&gt;
&lt;p&gt;Since the AWS team won&#x27;t fix the credential chain, I worked around it by
explicitly passing the &lt;code&gt;profile:&lt;&#x2F;code&gt; parameter to AWS SDK clients. This bypasses
the broken credential chain entirely.&lt;&#x2F;p&gt;
&lt;p&gt;The approach is simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;aws_client_options
&lt;&#x2F;span&gt;&lt;span&gt;  opts = { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;region:&lt;&#x2F;span&gt;&lt;span&gt; config.region }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Explicitly pass profile if configured
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; config.profile.present?
&lt;&#x2F;span&gt;&lt;span&gt;    opts[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:profile&lt;&#x2F;span&gt;&lt;span&gt;] = config.profile
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;elsif&lt;&#x2F;span&gt;&lt;span&gt; config.access_key_id.present? &amp;amp;&amp;amp; config.secret_key.present?
&lt;&#x2F;span&gt;&lt;span&gt;    opts[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:access_key_id&lt;&#x2F;span&gt;&lt;span&gt;] = config.access_key_id
&lt;&#x2F;span&gt;&lt;span&gt;    opts[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:secret_access_key&lt;&#x2F;span&gt;&lt;span&gt;] = config.secret_key
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Otherwise omit credentials, let SDK auto-discover
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  opts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With AWS config:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[profile app-uploads]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role_arn &lt;&#x2F;span&gt;&lt;span&gt;= arn:aws:iam::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;123456789012&lt;&#x2F;span&gt;&lt;span&gt;:role&#x2F;AppUploads
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;credential_source &lt;&#x2F;span&gt;&lt;span&gt;= Environment
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This works because explicitly passing &lt;code&gt;profile:&lt;&#x2F;code&gt; to the SDK bypasses the broken
credential chain and goes directly to the profile-based role assumption code.
It&#x27;s not fixing the SDK bug, but it enables working role assumption with
temporary credentials instead of long-lived static keys.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-i-learned-the-hard-way&quot;&gt;What I Learned (The Hard Way)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Open source maintainers aren&#x27;t always right.&lt;&#x2F;strong&gt; Even when they&#x27;re from AWS,
even when they&#x27;re maintaining critical infrastructure, they can make bad
decisions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Document your wins even when they don&#x27;t get merged.&lt;&#x2F;strong&gt; This fix works in
production. Other developers will hit this same issue. Having a public record
of the problem and solution helps everyone.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The bug report itself has value.&lt;&#x2F;strong&gt; Even though they closed it, the issue and
PR document exactly what&#x27;s broken and why. Future developers will find it and
understand they&#x27;re not crazy. The feature really is broken.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-bigger-picture&quot;&gt;The Bigger Picture&lt;&#x2F;h3&gt;
&lt;p&gt;This experience reminded me technical correctness doesn&#x27;t always win.&lt;&#x2F;p&gt;
&lt;p&gt;I had:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Clear reproduction steps&lt;&#x2F;li&gt;
&lt;li&gt;Root cause analysis with line numbers&lt;&#x2F;li&gt;
&lt;li&gt;A working fix with tests&lt;&#x2F;li&gt;
&lt;li&gt;Production validation&lt;&#x2F;li&gt;
&lt;li&gt;Comparison with AWS CLI behavior&lt;&#x2F;li&gt;
&lt;li&gt;Maintainer acknowledgment that it was broken&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And they still closed it.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes the politics of &quot;don&#x27;t change anything&quot; beat &quot;fix the broken
feature.&quot; That&#x27;s frustrating, but it&#x27;s reality.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;for-other-contributors&quot;&gt;For Other Contributors&lt;&#x2F;h3&gt;
&lt;p&gt;If you hit this issue:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Yes, &lt;code&gt;credential_source = Environment&lt;&#x2F;code&gt; is broken with the default credential
chain&lt;&#x2F;li&gt;
&lt;li&gt;No, it&#x27;s not you, it&#x27;s the SDK&lt;&#x2F;li&gt;
&lt;li&gt;The workaround is explicitly passing &lt;code&gt;profile:&lt;&#x2F;code&gt; to clients (or using
&lt;code&gt;source_profile&lt;&#x2F;code&gt; with plaintext keys)&lt;&#x2F;li&gt;
&lt;li&gt;Explicitly passing the profile parameter bypasses the broken chain and
enables proper role assumption&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For AWS maintainers reading this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You have unreachable code in &lt;code&gt;credentials_from_source&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Your credential chain prevents documented features from working&lt;&#x2F;li&gt;
&lt;li&gt;&quot;Breaking changes&quot; is a poor excuse for not fixing broken features&lt;&#x2F;li&gt;
&lt;li&gt;The feature is already broken for everyone using default profiles&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-end-for-now&quot;&gt;The End (For Now)&lt;&#x2F;h3&gt;
&lt;p&gt;This is where the story ends. I found a workaround, documented it for others,
and moved on.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes that&#x27;s all you can do. Sometimes &quot;no&quot; from maintainers means finding
another path. Sometimes proving you&#x27;re technically correct doesn&#x27;t matter if
the project isn&#x27;t willing to fix their bugs.&lt;&#x2F;p&gt;
&lt;p&gt;But hey, at least the deployment works now. And maybe this blog series will
help the next developer who hits this same wall and wonders why a documented
feature doesn&#x27;t actually work.&lt;&#x2F;p&gt;
&lt;p&gt;The adventure is over. The bug remains. The workaround persists.&lt;&#x2F;p&gt;
&lt;p&gt;Such is open source.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building Yaks: A Virtual Currency System for Discourse (Part 1: Backend Architecture)</title>
          <pubDate>Sat, 11 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-1/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-1/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-1/">&lt;p&gt;I&#x27;m building a virtual currency system for Discourse. Users earn and spend
&quot;Yaks&quot; on premium post features like colored highlighting, pinned posts, and
custom user flair.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-wallet.png&quot; alt=&quot;Image showing 1000 Yaks in wallet&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-highlighted-post-1.png&quot; alt=&quot;Post highlighting with purple border&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is Part 1 of a series documenting the development. This post focuses on
the backend architecture. Future posts will cover the frontend UI, earning
mechanisms, and feature implementations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-yaks&quot;&gt;Why Yaks?&lt;&#x2F;h2&gt;
&lt;p&gt;The name works on two levels. First, &quot;yak&quot; as a verb means to talk or chat
persistently. Forums are where people yak.&lt;&#x2F;p&gt;
&lt;p&gt;Second, &quot;yak shaving&quot; is programmer slang for doing a seemingly pointless
series of tasks. Unfortunately, sometimes, talking (arguing) with people online
can feel apparently useless. The name acknowledges that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-virtual-currency&quot;&gt;Why Virtual Currency?&lt;&#x2F;h2&gt;
&lt;p&gt;Forums have moderation tools and permission systems, but they&#x27;re binary: you
can do something or you can&#x27;t. Virtual currency adds a middle layer where users
can temporarily access premium features by spending earned currency.&lt;&#x2F;p&gt;
&lt;p&gt;The use cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Highlight important posts with colored borders&lt;&#x2F;li&gt;
&lt;li&gt;Pin your post to the top of a topic for 24 hours&lt;&#x2F;li&gt;
&lt;li&gt;Add custom flair next to your username&lt;&#x2F;li&gt;
&lt;li&gt;Boost your post in feeds and search results&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These aren&#x27;t permissions. They&#x27;re temporary, purchasable upgrades.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-data-model&quot;&gt;The Data Model&lt;&#x2F;h2&gt;
&lt;p&gt;The system has four core models:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yakwallet&quot;&gt;YakWallet&lt;&#x2F;h3&gt;
&lt;p&gt;Each user has a wallet that tracks their balance and lifetime totals:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakWallet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ActiveRecord::Base
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user
&lt;&#x2F;span&gt;&lt;span&gt;  has_many &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_transactions
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:balance&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numericality: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;greater_than_or_equal_to: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:lifetime_earned&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numericality: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;greater_than_or_equal_to: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:lifetime_spent&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numericality: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;greater_than_or_equal_to: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The wallet is the source of truth for a user&#x27;s currency. Every earn, spend, and
refund goes through it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yaktransaction&quot;&gt;YakTransaction&lt;&#x2F;h3&gt;
&lt;p&gt;Every balance change is logged. This creates an immutable audit trail:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakTransaction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ActiveRecord::Base
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_wallet
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;transaction_type: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;earn: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;spend: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;refund: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Transactions include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Amount (positive for earn&#x2F;refund, negative for spend)&lt;&#x2F;li&gt;
&lt;li&gt;Type (earn, spend, refund)&lt;&#x2F;li&gt;
&lt;li&gt;Source (where it came from: &lt;code&gt;stripe_purchase&lt;&#x2F;code&gt;, &lt;code&gt;quality_post&lt;&#x2F;code&gt;,
&lt;code&gt;feature_post_highlight&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Description (human-readable explanation)&lt;&#x2F;li&gt;
&lt;li&gt;Metadata (JSON field for additional context)&lt;&#x2F;li&gt;
&lt;li&gt;Related post&#x2F;topic (if applicable)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Why log everything? Transparency. Users can see exactly where their Yaks went.
Admins can debug balance issues. Refunds are straightforward because you have
the original transaction ID.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yakfeature&quot;&gt;YakFeature&lt;&#x2F;h3&gt;
&lt;p&gt;Features define what users can spend Yaks on:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeature &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ActiveRecord::Base
&lt;&#x2F;span&gt;&lt;span&gt;  has_many &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_feature_uses
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;presence: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;uniqueness: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:cost&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numericality: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;greater_than: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:category&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;inclusion: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;in: &lt;&#x2F;span&gt;&lt;span&gt;%w[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post user topic&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each feature has:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A unique key (&lt;code&gt;post_highlight&lt;&#x2F;code&gt;, &lt;code&gt;post_pin&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Display name and description&lt;&#x2F;li&gt;
&lt;li&gt;Cost in Yaks&lt;&#x2F;li&gt;
&lt;li&gt;Category (post, user, topic)&lt;&#x2F;li&gt;
&lt;li&gt;Settings (duration, default values, constraints)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Currently implemented:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post Highlighting&lt;&#x2F;strong&gt; (25 Yaks): Colored border and background (gold, blue,
red, green, purple)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Planned features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post Pin&lt;&#x2F;strong&gt; (50 Yaks): Pin to top of topic for 24 hours&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Custom Flair&lt;&#x2F;strong&gt; (100 Yaks): Custom text next to username for 30 days&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Post Boost&lt;&#x2F;strong&gt; (30 Yaks): Priority in feeds for 72 hours&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The cost is per feature, not per variation. Post highlighting costs 25 Yaks
regardless of which color you choose.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yakfeatureuse&quot;&gt;YakFeatureUse&lt;&#x2F;h3&gt;
&lt;p&gt;When a user purchases a feature, we create a YakFeatureUse record:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ActiveRecord::Base
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_feature
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_transaction
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:related_post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;class_name: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;optional: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:related_topic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;class_name: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Topic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;optional: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  scope &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:active&lt;&#x2F;span&gt;&lt;span&gt;, -&amp;gt; { where(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expires_at IS NULL OR expires_at &amp;gt; ?&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now) }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This tracks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Who applied the feature&lt;&#x2F;li&gt;
&lt;li&gt;Which feature was applied&lt;&#x2F;li&gt;
&lt;li&gt;What post&#x2F;topic it was applied to&lt;&#x2F;li&gt;
&lt;li&gt;When it expires (if applicable)&lt;&#x2F;li&gt;
&lt;li&gt;Feature-specific data (color choice, custom text, etc.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;code&gt;active&lt;&#x2F;code&gt; scope makes it easy to query currently active features and clean
up expired ones.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-service-layer&quot;&gt;The Service Layer&lt;&#x2F;h2&gt;
&lt;p&gt;Business logic lives in services, not controllers. Controllers handle HTTP,
services handle business rules.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-are-services&quot;&gt;What Are Services?&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse has a standardized service pattern using &lt;code&gt;Service::Base&lt;&#x2F;code&gt;. Services
define:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Contracts&lt;&#x2F;strong&gt;: Input validation using schemas&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Policies&lt;&#x2F;strong&gt;: Preconditions that must be true&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;&#x2F;strong&gt;: The actual execution flow&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Example structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Service::Base
&lt;&#x2F;span&gt;&lt;span&gt;  contract &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    attribute &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:integer
&lt;&#x2F;span&gt;&lt;span&gt;    validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;presence: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_exists
&lt;&#x2F;span&gt;&lt;span&gt;  step &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:do_work
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;private
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;user_exists
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;.exists?(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id:&lt;&#x2F;span&gt;&lt;span&gt; contract.user_id)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;do_work
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# actual logic
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This pattern separates validation, authorization, and execution. If the
contract fails, the service returns an error before hitting any business logic.
If a policy fails, execution stops.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yakfeatureservice&quot;&gt;YakFeatureService&lt;&#x2F;h3&gt;
&lt;p&gt;The Yaks plugin currently uses a simpler service pattern (a plain Ruby class
with class methods) because the logic is straightforward. It could be
refactored to &lt;code&gt;Service::Base&lt;&#x2F;code&gt; if validation becomes more complex.&lt;&#x2F;p&gt;
&lt;p&gt;The service handles:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Validating the feature exists and is enabled&lt;&#x2F;li&gt;
&lt;li&gt;Checking the user can afford it&lt;&#x2F;li&gt;
&lt;li&gt;Checking the feature can be applied (no duplicate active uses)&lt;&#x2F;li&gt;
&lt;li&gt;Creating the transaction&lt;&#x2F;li&gt;
&lt;li&gt;Creating the feature use record&lt;&#x2F;li&gt;
&lt;li&gt;Applying the visual effects&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply_feature&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_post&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_data&lt;&#x2F;span&gt;&lt;span&gt;: {})
&lt;&#x2F;span&gt;&lt;span&gt;  feature = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeature&lt;&#x2F;span&gt;&lt;span&gt;.enabled.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_key:&lt;&#x2F;span&gt;&lt;span&gt; feature_key)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Feature not found&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unless&lt;&#x2F;span&gt;&lt;span&gt; feature
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Insufficient balance&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unless&lt;&#x2F;span&gt;&lt;span&gt; feature.affordable_by?(user)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  wallet = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakWallet&lt;&#x2F;span&gt;&lt;span&gt;.for_user(user)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  transaction = wallet.spend_yaks(
&lt;&#x2F;span&gt;&lt;span&gt;    feature.cost,
&lt;&#x2F;span&gt;&lt;span&gt;    feature_key,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Applied &lt;&#x2F;span&gt;&lt;span&gt;#{feature.feature_name}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post_id:&lt;&#x2F;span&gt;&lt;span&gt; related_post&amp;amp;.id,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metadata:&lt;&#x2F;span&gt;&lt;span&gt; feature_data
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Insufficient balance&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unless&lt;&#x2F;span&gt;&lt;span&gt; transaction
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  feature_use = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse&lt;&#x2F;span&gt;&lt;span&gt;.create!(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_feature:&lt;&#x2F;span&gt;&lt;span&gt; feature,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_transaction:&lt;&#x2F;span&gt;&lt;span&gt; transaction,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; related_post,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expires_at:&lt;&#x2F;span&gt;&lt;span&gt; calculate_expiration(feature),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_data:&lt;&#x2F;span&gt;&lt;span&gt; feature_data
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  apply_feature_effects(feature_key, related_post, feature_data)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_use:&lt;&#x2F;span&gt;&lt;span&gt; feature_use, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;new_balance:&lt;&#x2F;span&gt;&lt;span&gt; user.yak_balance }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Why put this in a service instead of the controller? Because controllers should
handle HTTP concerns (params, rendering, status codes). Business logic
(validating affordability, deducting currency, applying effects) belongs in a
service.&lt;&#x2F;p&gt;
&lt;p&gt;This makes testing easier. You can test the business logic without setting up
HTTP requests. You can reuse the service from rake tasks, background jobs, or
the Rails console.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-double-balance-check&quot;&gt;The Double Balance Check&lt;&#x2F;h3&gt;
&lt;p&gt;Notice the service checks affordability twice:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# First check
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Insufficient balance&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unless&lt;&#x2F;span&gt;&lt;span&gt; feature.affordable_by?(user)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;wallet = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakWallet&lt;&#x2F;span&gt;&lt;span&gt;.for_user(user)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Second check (wallet.spend_yaks returns nil if balance insufficient)
&lt;&#x2F;span&gt;&lt;span&gt;transaction = wallet.spend_yaks(...)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Insufficient balance&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unless&lt;&#x2F;span&gt;&lt;span&gt; transaction
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Why check twice? Race conditions.&lt;&#x2F;p&gt;
&lt;p&gt;Between the first check and the actual spend, another request could deduct from
the user&#x27;s balance. Without the second check, you could end up with negative
balances.&lt;&#x2F;p&gt;
&lt;p&gt;The first check is an optimization (fail fast before loading the wallet). The
second check is correctness (verify balance inside the database transaction).&lt;&#x2F;p&gt;
&lt;p&gt;The wallet&#x27;s &lt;code&gt;spend_yaks&lt;&#x2F;code&gt; method uses ActiveRecord transactions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;spend_yaks&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;options &lt;&#x2F;span&gt;&lt;span&gt;= {})
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; amount &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;|| balance &amp;lt; amount
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  transaction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    decrement!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:balance&lt;&#x2F;span&gt;&lt;span&gt;, amount)
&lt;&#x2F;span&gt;&lt;span&gt;    increment!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:lifetime_spent&lt;&#x2F;span&gt;&lt;span&gt;, amount)
&lt;&#x2F;span&gt;&lt;span&gt;    yak_transactions.create!(...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the balance check fails inside the transaction, it returns &lt;code&gt;nil&lt;&#x2F;code&gt; and nothing
is deducted. This prevents concurrent requests from causing overdrafts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;applying-features&quot;&gt;Applying Features&lt;&#x2F;h2&gt;
&lt;p&gt;Features modify post custom fields:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply_feature_effects&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  current_features = post.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] || {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; feature_key
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_highlight&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    current_features[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;highlight&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;color:&lt;&#x2F;span&gt;&lt;span&gt; feature_data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:color&lt;&#x2F;span&gt;&lt;span&gt;] || &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gold&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;applied_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_i
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_pin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    current_features[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pinned&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;applied_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_i &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  post.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = current_features
&lt;&#x2F;span&gt;&lt;span&gt;  post.save_custom_fields
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Custom fields are Discourse&#x27;s way of extending models without migrations. The
&lt;code&gt;yak_features&lt;&#x2F;code&gt; field stores a JSON object with all active features on a post.&lt;&#x2F;p&gt;
&lt;p&gt;This data gets serialized to the frontend:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;add_to_serializer(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_features&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;include_condition: &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; { object.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;].present? }
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  object.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The frontend can then read &lt;code&gt;post.yak_features.highlight.color&lt;&#x2F;code&gt; and apply the
appropriate CSS.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;current-state&quot;&gt;Current State&lt;&#x2F;h2&gt;
&lt;p&gt;The backend is complete:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Wallet management with balance tracking&lt;&#x2F;li&gt;
&lt;li&gt;Transaction logging with full audit trail&lt;&#x2F;li&gt;
&lt;li&gt;Feature definitions with costs and durations&lt;&#x2F;li&gt;
&lt;li&gt;Service layer for applying features&lt;&#x2F;li&gt;
&lt;li&gt;Custom field serialization for the frontend&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What&#x27;s missing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Frontend UI for viewing balance and purchasing features&lt;&#x2F;li&gt;
&lt;li&gt;Earning mechanisms (quality posts, admin grants, purchases)&lt;&#x2F;li&gt;
&lt;li&gt;Feature expiration cleanup job&lt;&#x2F;li&gt;
&lt;li&gt;Admin dashboard for managing features and viewing stats&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h2&gt;
&lt;p&gt;Part 2 will cover building the frontend UI: displaying the user&#x27;s balance,
browsing available features, and adding a &quot;spend Yaks&quot; button to posts.&lt;&#x2F;p&gt;
&lt;p&gt;Part 3 will cover earning mechanisms and the admin dashboard.&lt;&#x2F;p&gt;
&lt;p&gt;The code is on GitHub: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-yaks&quot;&gt;ducks&#x2F;discourse-yaks&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT assisted Changelog - 41&#x2F;52</title>
          <pubDate>Fri, 10 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-41/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-41/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-41/">&lt;p&gt;This week centered on publishing, polishing, and reflecting on your Discourse
work, with some light data analysis and side discussions along the way.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Blog and Writing&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You published &lt;em&gt;&quot;Building a Live Transit Departure Board with Discourse&quot;&lt;&#x2F;em&gt;, a
follow-up to your earlier post about your first Discourse core contribution.
The piece explored how you built a live transit tracker plugin that reimagines
Discourse as a real-time data board rather than a forum. You asked if posting
it on the official Discourse blog would be weird, ultimately deciding it would
make sense given your role there. You also asked if the piece itself was
interesting -- it was, both technically and conceptually, tying in your love of
open data and infrastructure with your day job.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Data and Analytics&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You dug into your GoatCounter analytics, examining visitor distribution across
countries. After cleaning up duplicate entries, you found &lt;strong&gt;37 unique countries&lt;&#x2F;strong&gt;
represented, spanning &lt;strong&gt;six continents&lt;&#x2F;strong&gt; -- North America, South America, Europe,
Asia, Africa, and Oceania. Europe and Asia were the strongest regions overall.
The data was reformatted into a clean markdown table for future reference.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Open Source and Development&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You briefly noted another bug you found in the AWS SDK for Ruby, following your
previous fix and contribution, reinforcing your growing involvement in that
project&#x27;s ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Overall&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It was a quieter week but a meaningful one -- marked by the satisfaction of
publishing a well-crafted post that blends creativity and engineering. The
analytics work helped ground your readership data, while your continued OSS
engagement kept your technical momentum going.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building a Live Transit Departure Board with Discourse</title>
          <pubDate>Wed, 08 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-transit-tracker-in-discourse/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-transit-tracker-in-discourse/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-transit-tracker-in-discourse/">&lt;p&gt;I&#x27;ve been working at Discourse for a few months now, learning how flexible
the platform is. It&#x27;s a forum. It&#x27;s designed for conversations. But what if
we used it for something completely different?&lt;&#x2F;p&gt;
&lt;p&gt;Something like tracking flights and trains?&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to learn more about Discourse by building something that felt real and
that would force me into actual problems. Most importantly though, I wanted to
build something that involves my interests and would be fun. I love transit
infrastructure and open data so why not a transit tracker using free government
feeds? I had this image in my head: those old split-flap airport departure
boards, the ones that click and whir as letters rotate into place.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-source.jpg&quot; alt=&quot;Split-flap departure board&quot; &#x2F;&gt;
&lt;em&gt;Photo by &lt;a href=&quot;https:&#x2F;&#x2F;unsplash.com&#x2F;@amsterdamcityarchives&quot;&gt;Amsterdam City Archives&lt;&#x2F;a&gt; on
&lt;a href=&quot;https:&#x2F;&#x2F;unsplash.com&#x2F;photos&#x2F;7diobitpahY&quot;&gt;Unsplash&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;What if I could recreate that aesthetic, but powered by Discourse topics
instead of actual flights?&lt;&#x2F;p&gt;
&lt;p&gt;You can see the result here: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-transit-tracker&quot;&gt;discourse-transit-tracker on
GitHub&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-this-makes-no-sense-and-why-i-did-it-anyway&quot;&gt;Why This Makes No Sense (And Why I Did It Anyway)&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s be clear: &lt;strong&gt;Discourse is not a transit tracking system&lt;&#x2F;strong&gt;. It&#x27;s a
forum platform built for human conversations, not GTFS feeds and real-time
departure data.&lt;&#x2F;p&gt;
&lt;p&gt;But that&#x27;s exactly what made it interesting.&lt;&#x2F;p&gt;
&lt;p&gt;Discourse topics are incredibly flexible. They have custom fields, tags,
categories, and a robust permission system. If you squint hard enough, a
flight departure is just a &quot;post&quot; with structured data. The departure time?
A custom field. The status (on-time, delayed, departed)? A tag. The
airline? Maybe a category.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s ridiculous. But it &lt;em&gt;could work&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learning-with-claude-code&quot;&gt;Learning with Claude Code&lt;&#x2F;h2&gt;
&lt;p&gt;I built this entire plugin using Claude Code, Anthropic&#x27;s CLI tool. Not
because I couldn&#x27;t write it myself, but because I wanted to learn Discourse
patterns while writing quality code from the start.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Vibe programming&quot; gets a bad rap. People hear &quot;AI-assisted development&quot;
and think it&#x27;s about blindly accepting generated code. But that&#x27;s not how I
used it. Claude Code became a learning tool. I&#x27;d describe what I wanted to
build, Claude would suggest an approach using Discourse conventions, and
I&#x27;d understand why those patterns exist.&lt;&#x2F;p&gt;
&lt;p&gt;This allowed me to learn the platform faster than reading docs alone would
have taught me. I saw real implementations of custom fields, service
objects, Ember components, and ActiveRecord patterns. And because Claude
follows Discourse&#x27;s style guide and architecture, the code I wrote actually
fits the codebase.&lt;&#x2F;p&gt;
&lt;p&gt;This is what good AI-assisted development looks like: not replacing
understanding, but accelerating it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-technical-stack&quot;&gt;The Technical Stack&lt;&#x2F;h2&gt;
&lt;p&gt;The plugin integrates three data sources, each with its own challenges.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;amtrak-gtfs&quot;&gt;Amtrak (GTFS)&lt;&#x2F;h3&gt;
&lt;p&gt;I built an &lt;code&gt;AmtrakGtfsService&lt;&#x2F;code&gt; that downloads Amtrak&#x27;s GTFS feed (a ZIP
file with CSVs), parses routes, stops, trips, and schedules, and creates
departure topics with detailed stop information. No API key required.&lt;&#x2F;p&gt;
&lt;p&gt;The service:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Downloads and extracts &lt;code&gt;GTFS.zip&lt;&#x2F;code&gt; from Amtrak&#x27;s CDN&lt;&#x2F;li&gt;
&lt;li&gt;Parses &lt;code&gt;routes.txt&lt;&#x2F;code&gt;, &lt;code&gt;stops.txt&lt;&#x2F;code&gt;, &lt;code&gt;trips.txt&lt;&#x2F;code&gt;, and &lt;code&gt;stop_times.txt&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;For each trip in the next 24 hours, creates a topic with:
&lt;ul&gt;
&lt;li&gt;All basic departure info as custom fields&lt;&#x2F;li&gt;
&lt;li&gt;A detailed stops array with lat&#x2F;lon coordinates and times&lt;&#x2F;li&gt;
&lt;li&gt;A formatted schedule table as Post #2&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Running &lt;code&gt;bin&#x2F;rake transit_tracker:import_amtrak&lt;&#x2F;code&gt; processes ~2,300 trips and
creates ~600 departure topics (many trips share the same departure, so they
get merged).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Problem: &quot;Title has already been used&quot;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The first import run worked fine, processing ~2,300 trips and creating ~600
topics. But when I ran it again to test updates, I hit a wall:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Processing 340 trips...
&lt;&#x2F;span&gt;&lt;span&gt;Created 1 topic
&lt;&#x2F;span&gt;&lt;span&gt;Error: Title has already been used (339 times)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Only 1 out of 340 trips succeeded on the second run. The rest failed.&lt;&#x2F;p&gt;
&lt;p&gt;Discourse requires unique topic titles. My title format was: &lt;code&gt;&quot;City of New Orleans to New Orleans at 19:05&quot;&lt;&#x2F;code&gt;. Multiple different trains with the same
route, destination, and departure minute produced identical titles.&lt;&#x2F;p&gt;
&lt;p&gt;My lookup strategy was to find topics by &lt;code&gt;trip_id&lt;&#x2F;code&gt; + &lt;code&gt;service_date&lt;&#x2F;code&gt; stored
in custom fields. That worked fine when topics existed. But on subsequent
runs, when a topic wasn&#x27;t found by custom field (maybe the &lt;code&gt;trip_id&lt;&#x2F;code&gt;
changed), I&#x27;d try to create one, and Discourse would reject it because
another train had already claimed that title.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Fix: Fallback Lookup by Title&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The solution was to add a fallback lookup by title before trying to create:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# First, try to find by trip_id + service_date (the ideal natural key)
&lt;&#x2F;span&gt;&lt;span&gt;topic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Topic&lt;&#x2F;span&gt;&lt;span&gt;.joins(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:_custom_fields&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic_custom_fields: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;transit_trip_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value:&lt;&#x2F;span&gt;&lt;span&gt; attributes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:trip_id&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  .where(...)
&lt;&#x2F;span&gt;&lt;span&gt;  .first
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# If still no match, try to find by title to avoid duplicates
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!topic
&lt;&#x2F;span&gt;&lt;span&gt;  title = build_title(attributes)
&lt;&#x2F;span&gt;&lt;span&gt;  category_id = determine_category(attributes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:mode&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  topic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Topic&lt;&#x2F;span&gt;&lt;span&gt;.where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title:&lt;&#x2F;span&gt;&lt;span&gt; title, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category_id:&lt;&#x2F;span&gt;&lt;span&gt; category_id).first
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; topic
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rails&lt;&#x2F;span&gt;&lt;span&gt;.logger.info &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[TransitTracker] Found existing topic by title,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      will update&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    is_new = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This way, if multiple trips share a title, they merge into the same topic
and get updated instead of failing.&lt;&#x2F;p&gt;
&lt;p&gt;Result: &lt;strong&gt;327 departures created, 0 errors&lt;&#x2F;strong&gt;. All trips within the 24-hour
window imported successfully. The duplicate trips just update the same
topic with fresh data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nyc-mta-subway-gtfs&quot;&gt;NYC MTA Subway (GTFS)&lt;&#x2F;h3&gt;
&lt;p&gt;The NYC MTA subway system is massive. Their GTFS feed contains over 500,000
stop times covering weeks of schedules across dozens of routes.&lt;&#x2F;p&gt;
&lt;p&gt;My first approach was simple: import everything, just like I did with
Amtrak. Parse the entire feed, create topics for every departure in the
next 24 hours.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Problem: 19GB of RAM&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I ran the import and watched my Rails process climb. 1GB. 5GB. 10GB. It
kept going. By the time it finished parsing, &lt;strong&gt;it had consumed over 19GB of
RAM&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Loading and processing 500k+ stop times to create 20,000+ Discourse topics
consumed massive amounts of memory. At scale, big data creates big
problems.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Fix: Reduce the Time Window&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The fix? Reduce the import window from 24 hours to 6 hours:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Only import departures within the next 6 hours
&lt;&#x2F;span&gt;&lt;span&gt;dep_time = parse_gtfs_time(today, first_stop[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:departure_time&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; dep_time &amp;lt; now || dep_time &amp;gt; (now + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;.hours)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Result: ~5,000 topics instead of 20,000+, memory usage stayed under 2GB,
and the board still shows plenty of departures. For a live departure board,
you don&#x27;t need train schedules from tomorrow anyway.&lt;&#x2F;p&gt;
&lt;p&gt;The final implementation includes official MTA line colors (red 1&#x2F;2&#x2F;3,
green 4&#x2F;5&#x2F;6, yellow N&#x2F;Q&#x2F;R&#x2F;W, etc.) and creates ~5,000 departure topics with
complete schedules.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;aviationstack-api&quot;&gt;AviationStack API&lt;&#x2F;h3&gt;
&lt;p&gt;Tracks flight departures with gate assignments, delays, and code-share
detection. Requires an API key from &lt;a href=&quot;https:&#x2F;&#x2F;aviationstack.com&#x2F;&quot;&gt;aviationstack.com&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Problem: Duplicate Code-Share Flights&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Multiple airlines sell seats on the same physical flight under different
flight numbers. That&#x27;s called code-sharing. So you might have &lt;code&gt;AA123&lt;&#x2F;code&gt;,
&lt;code&gt;BA456&lt;&#x2F;code&gt;, and &lt;code&gt;IB789&lt;&#x2F;code&gt; all referring to the exact same plane leaving from
Gate E7 at 07:30.&lt;&#x2F;p&gt;
&lt;p&gt;At first, I tried to build my own detection using departure time + gate +
destination as a natural key. But then I looked closer at the AviationStack
API response and found it: a &lt;code&gt;codeshared&lt;&#x2F;code&gt; field that tells you exactly
which flight is the operating carrier.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Fix: Use the API&#x27;s Built-In Field&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Handle code-share flights: use operating carrier as natural key
&lt;&#x2F;span&gt;&lt;span&gt;codeshared = flight_info[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;codeshared&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; codeshared.present?
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This is a marketing carrier selling seats on another airline&amp;#39;s flight
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Use the operating flight as trip_id so all code-shares merge
&lt;&#x2F;span&gt;&lt;span&gt;  operating_flight = codeshared[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flight_iata&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] || codeshared[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flight_icao&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;  trip_id = &amp;quot;#{operating_flight}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;#{departure_info[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scheduled&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rails&lt;&#x2F;span&gt;&lt;span&gt;.logger.info &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[TransitTracker] Code-share detected:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;#{marketing_flight}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; operated by &lt;&#x2F;span&gt;&lt;span&gt;#{operating_flight}&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Regular flight, use its own flight number
&lt;&#x2F;span&gt;&lt;span&gt;  trip_id = &amp;quot;#{flight_info[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iata&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;#{departure_info[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scheduled&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]}&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Why reinvent the wheel? The API already does the hard work of identifying
code-shares. I just use the operating carrier&#x27;s flight number as the
&lt;code&gt;trip_id&lt;&#x2F;code&gt;, and all marketing carriers automatically merge into the same
topic.&lt;&#x2F;p&gt;
&lt;p&gt;Result: &lt;code&gt;AA 1234 &#x2F; BA 5678 &#x2F; IB 789&lt;&#x2F;code&gt; displayed as one departure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-architecture&quot;&gt;The Architecture&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;topics-as-transit-legs&quot;&gt;Topics as Transit Legs&lt;&#x2F;h3&gt;
&lt;p&gt;Each flight (or train, or bus) is a Discourse topic. I created a
&lt;code&gt;TransitLeg&lt;&#x2F;code&gt; model that wraps Topic and handles all the custom fields:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transit_dep_sched_at&lt;&#x2F;code&gt; (scheduled departure time)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transit_dep_est_at&lt;&#x2F;code&gt; (estimated departure time for delays)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transit_route_short_name&lt;&#x2F;code&gt; (flight numbers)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transit_headsign&lt;&#x2F;code&gt; (destination)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transit_gate&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;transit_platform&lt;&#x2F;code&gt; (where to board)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transit_dest&lt;&#x2F;code&gt; (airport code)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transit_stops&lt;&#x2F;code&gt; (JSON array of all stops with coordinates and times)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Tags handle the mode (&lt;code&gt;flight&lt;&#x2F;code&gt;, &lt;code&gt;train&lt;&#x2F;code&gt;, &lt;code&gt;bus&lt;&#x2F;code&gt;) and status
(&lt;code&gt;status:scheduled&lt;&#x2F;code&gt;, &lt;code&gt;status:delayed&lt;&#x2F;code&gt;, &lt;code&gt;status:departed&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;posts-as-schedule-details&quot;&gt;Posts as Schedule Details&lt;&#x2F;h3&gt;
&lt;p&gt;Here&#x27;s where using Discourse as the foundation really paid off.&lt;&#x2F;p&gt;
&lt;p&gt;When you click on a departure row, it expands to show the complete route
schedule with all stops and arrival&#x2F;departure times. But I didn&#x27;t build a
custom data structure for this. &lt;strong&gt;I used Discourse posts&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Each departure topic has:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Post #1&lt;&#x2F;strong&gt; (the OP): Basic departure info (route, times, gate)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Post #2&lt;&#x2F;strong&gt;: A markdown table with the complete schedule&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Post #3+&lt;&#x2F;strong&gt;: Any delay notifications or status updates&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;When you expand a row, you&#x27;re literally seeing the topic&#x27;s replies rendered
inline. It slides down with a smooth animation, showing the full schedule
table styled to match the departure board aesthetic.&lt;&#x2F;p&gt;
&lt;p&gt;The schedule post looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;## 🚂 Complete Schedule
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#ebcb8b;&quot;&gt;**Route:**&lt;&#x2F;span&gt;&lt;span&gt; City of New Orleans
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#ebcb8b;&quot;&gt;**Direction:**&lt;&#x2F;span&gt;&lt;span&gt; Chicago
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;| Stop                                  | Arrival | Departure |
&lt;&#x2F;span&gt;&lt;span&gt;|---------------------------------------|---------|-----------|
&lt;&#x2F;span&gt;&lt;span&gt;| New Orleans Union Passenger Terminal  | 12:45   | 12:45     |
&lt;&#x2F;span&gt;&lt;span&gt;| Hammond Amtrak Station                | 13:42   | 13:45     |
&lt;&#x2F;span&gt;&lt;span&gt;| McComb                                | 14:30   | 14:32     |
&lt;&#x2F;span&gt;&lt;span&gt;| ...                                   | ...     | ...       |
&lt;&#x2F;span&gt;&lt;span&gt;| Chicago Union Station                 | 08:15   | 08:15     |
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#b48ead;&quot;&gt;_Schedule times are in local timezone. This is the planned schedule and may
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#b48ead;&quot;&gt;be subject to delays._
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It renders beautifully in the expanded row with the board&#x27;s dark styling.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-this-works-really-well&quot;&gt;Why This Works Really Well&lt;&#x2F;h3&gt;
&lt;p&gt;Using posts instead of a custom schema means:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Update history is built-in&lt;&#x2F;strong&gt;. If a train gets delayed, we post an
update and users see the entire timeline.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Moderation tools work&lt;&#x2F;strong&gt;. If there&#x27;s bad data, moderators can edit posts
using Discourse&#x27;s existing tools.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Comments could work&lt;&#x2F;strong&gt;. Users could reply to departures (we don&#x27;t allow
this now, but the infrastructure is there).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No additional database tables&lt;&#x2F;strong&gt;. Posts are just posts, Discourse
handles all the storage.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;screenshots&quot;&gt;Screenshots&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Flights - Collapsed View&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-planes.png&quot; alt=&quot;Flight departures board showing routes, gates, destinations, and countdowns&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Flights - Expanded View&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-planes-expanded.png&quot; alt=&quot;Expanded flight showing airline details, gates, terminals, and code-share information&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NYC Subway - Collapsed View&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-mta.png&quot; alt=&quot;MTA subway board with authentic line colors&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NYC Subway - Expanded View&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-mta-expanded.png&quot; alt=&quot;Expanded subway departure showing complete stop-by-stop schedule&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Amtrak Trains - Collapsed View&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-trains.png&quot; alt=&quot;Amtrak departure board&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Amtrak Trains - Expanded View&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-trains-expanded.png&quot; alt=&quot;Expanded train departure showing full station schedule&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bonus-tooling-consistent-screenshots&quot;&gt;Bonus Tooling: Consistent Screenshots&lt;&#x2F;h2&gt;
&lt;p&gt;Getting these screenshots pixel-perfect required some tooling. I wanted to
be able to:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Select a region once&lt;&#x2F;li&gt;
&lt;li&gt;Click things in the browser to expand&#x2F;collapse&lt;&#x2F;li&gt;
&lt;li&gt;Take multiple screenshots of the exact same region&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I built a Nix shell with Wayland screenshot tools (&lt;code&gt;grim&lt;&#x2F;code&gt; + &lt;code&gt;slurp&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nix-shell ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;discourse&#x2F;nix-shells&#x2F;screenshot.nix
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;screenshot-region&lt;&#x2F;span&gt;&lt;span&gt; flight-1.png     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Select region once
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Click to expand in browser
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;screenshot-repeat&lt;&#x2F;span&gt;&lt;span&gt; flight-2.png     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Same exact region
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;slurp&lt;&#x2F;code&gt; tool saves the region geometry, and &lt;code&gt;screenshot-repeat&lt;&#x2F;code&gt; reuses
it for perfect alignment across multiple screenshots.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;I learn best by writing real tools.&lt;&#x2F;strong&gt; Tutorial projects teach syntax, but
they don&#x27;t force you into the messy, real-world problems that make you
actually understand a framework.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;discourse-topics-are-more-flexible-than-you-think&quot;&gt;Discourse Topics Are More Flexible Than You Think&lt;&#x2F;h3&gt;
&lt;p&gt;Custom fields, tags, and categories gave me all the structured data I needed.
Topics aren&#x27;t just &quot;posts&quot;. They&#x27;re flexible containers for any kind of
information.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;posts-are-the-perfect-update-mechanism&quot;&gt;Posts Are the Perfect Update Mechanism&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of building a custom &quot;updates&quot; system with timestamps and status
changes, I just used Discourse posts. When a delay happens, post an update.
The topic becomes a living history of what happened to that departure.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;entity-resolution-check-your-data-before-building-logic&quot;&gt;Entity Resolution: Check Your Data Before Building Logic&lt;&#x2F;h3&gt;
&lt;p&gt;My first implementation created duplicate topics for every code-share
flight. I started building my own deduplication logic using a natural key
(departure time + gate + destination). But then I actually read the API
response and found it: a &lt;code&gt;codeshared&lt;&#x2F;code&gt; field that identifies which flights
are the same. I was about to solve a problem the API had already solved for
me.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gtfs-parsing-has-edge-cases&quot;&gt;GTFS Parsing Has Edge Cases&lt;&#x2F;h3&gt;
&lt;p&gt;GTFS times can exceed 24 hours (e.g., &quot;25:30:00&quot; means 1:30 AM the next
day). ZIP files can have encoding issues. Stop sequences aren&#x27;t always
sequential. Real-world data is messy.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;performance-matters-at-scale&quot;&gt;Performance Matters at Scale&lt;&#x2F;h3&gt;
&lt;p&gt;The MTA feed has 500k+ stop times. A 6-hour import window instead of 24
hours keeps memory usage reasonable and topic counts manageable (~5,000
instead of 20,000+).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;is-this-practical&quot;&gt;Is This Practical?&lt;&#x2F;h2&gt;
&lt;p&gt;Probably not for real transit tracking. But it&#x27;s a great example of pushing
Discourse in unexpected directions to understand the platform deeply.&lt;&#x2F;p&gt;
&lt;p&gt;The same pattern (topics as structured data + posts as updates) could work
for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Package tracking (topics = packages, posts = scan events)&lt;&#x2F;li&gt;
&lt;li&gt;Server status boards (topics = servers, posts = incidents)&lt;&#x2F;li&gt;
&lt;li&gt;Deployment pipelines (topics = deploys, posts = stage completions)&lt;&#x2F;li&gt;
&lt;li&gt;Event schedules (topics = sessions, posts = time&#x2F;room changes)&lt;&#x2F;li&gt;
&lt;li&gt;Support ticket boards (topics = tickets, expandable = full history)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The split-flap aesthetic is a bonus.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;try-it-yourself&quot;&gt;Try It Yourself&lt;&#x2F;h2&gt;
&lt;p&gt;The plugin is open source:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-transit-tracker&quot;&gt;ducks&#x2F;discourse-transit-tracker&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Clone it, run the Amtrak import (no API key required), and see what
Discourse topics can become when you push them beyond forum discussions.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>My First Official Contribution to Discourse</title>
          <pubDate>Mon, 06 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/first-official-discourse-contribution/</link>
          <guid>https://jakegoldsborough.com/blog/2025/first-official-discourse-contribution/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/first-official-discourse-contribution/">&lt;p&gt;This past week marked a small but meaningful milestone for me - I submitted and
merged my first pull request to the Discourse core project. The fix is simple
but important: handle a &lt;code&gt;nil&lt;&#x2F;code&gt; commit URL path in &lt;code&gt;Admin::PluginsController&lt;&#x2F;code&gt;,
preventing a 500 error in the plugins admin UI.
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;discourse&#x2F;discourse&#x2F;pull&#x2F;35186&quot;&gt;github.com&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;debugging-a-random-admin-panel-crash&quot;&gt;Debugging a random admin panel crash&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve been at Discourse for about two and a half months now, and most of my work
so far has been focused on internal tools and infrastructure rather than the
main codebase itself. It&#x27;s been a great way to learn how things fit together
behind the scenes, but I&#x27;ve been itching to make a direct impact on the project
that everyone actually sees and uses.&lt;&#x2F;p&gt;
&lt;p&gt;This PR was a small but deliberate step in that direction. I wanted to start
contributing to the public codebase, not just to fix a bug, but to get more
familiar with the patterns, tests, and expectations that make Discourse what it
is. It&#x27;s one thing to understand how we run it internally - it&#x27;s another to
touch the core code that powers thousands of communities around the world.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s also a kind of quiet satisfaction in cleaning up a small edge case like
this. It&#x27;s the kind of detail that no one notices when it&#x27;s working, but it
makes the whole system sturdier. That&#x27;s the kind of work I enjoy doing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-the-bug-was-succinctly&quot;&gt;What the bug was, succinctly&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;&lt;code&gt;lib&#x2F;plugin&#x2F;instance.rb&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;, the method &lt;code&gt;discourse_owned?&lt;&#x2F;code&gt; was calling
&lt;code&gt;.split&lt;&#x2F;code&gt; on &lt;code&gt;parsed_commit_url.path&lt;&#x2F;code&gt; without checking if &lt;code&gt;path&lt;&#x2F;code&gt; might be
&lt;code&gt;nil&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;In the scenario where a plugin has a commit URL parsed successfully but the
&lt;code&gt;path&lt;&#x2F;code&gt; is &lt;code&gt;nil&lt;&#x2F;code&gt; (for example, plugins without a git remote configured), this
led to a crash (HTTP 500) in &lt;code&gt;&#x2F;admin&#x2F;plugins&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;My patch adds a &lt;code&gt;nil&lt;&#x2F;code&gt; check: if &lt;code&gt;parsed_commit_url.path&lt;&#x2F;code&gt; is &lt;code&gt;nil&lt;&#x2F;code&gt;, the method
returns &lt;code&gt;false&lt;&#x2F;code&gt; (or skips the split) gracefully. I also added a test case to
assert this behavior.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In short: prevent a rare but real crash, and make the behavior deterministic in
that edge case.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-the-review-and-merge-went&quot;&gt;How the review and merge went&lt;&#x2F;h3&gt;
&lt;p&gt;The PR moved relatively smoothly:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I opened the PR and described the bug and proposed patch.&lt;&#x2F;li&gt;
&lt;li&gt;The maintainers reviewed and approved it.&lt;&#x2F;li&gt;
&lt;li&gt;After passing all checks, the PR was merged into &lt;code&gt;main&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The branch was deleted afterward.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It was a small change - only +11 &#x2F; -1 lines - but I made sure the fix was clean,
covered by a test, and clearly explained. Small contributions like this build
trust and open the door to more.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;takeaways&quot;&gt;Takeaways&lt;&#x2F;h4&gt;
&lt;p&gt;Fixing something this small reminded me that even the simplest changes can
improve confidence in a codebase. It also helped me see more of the moving parts
that make Discourse work - how plugins tie in, how errors surface in the admin
panel, and how tests are structured to catch regressions early.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s easy to think of &quot;first contributions&quot; as symbolic, but what really mattered
was understanding how to move through the process: spot an issue, confirm it,
write a clean fix, explain it clearly, and see it merged. That flow is something
I want to keep refining.&lt;&#x2F;p&gt;
&lt;p&gt;Going forward, I want to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Explore other bug reports in Discourse (especially in plugins and the admin
UI)&lt;&#x2F;li&gt;
&lt;li&gt;Take on slightly more complex patches (refactors, performance improvements,
new features)&lt;&#x2F;li&gt;
&lt;li&gt;Use this experience to contribute in a modular, maintainable way&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>Going off the Rails on the AWS Credential Chain</title>
          <pubDate>Sat, 04 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/contributing-to-aws-sdk-ruby-pt2/</link>
          <guid>https://jakegoldsborough.com/blog/2025/contributing-to-aws-sdk-ruby-pt2/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/contributing-to-aws-sdk-ruby-pt2/">&lt;h3 id=&quot;the-plot-twist&quot;&gt;The Plot Twist&lt;&#x2F;h3&gt;
&lt;p&gt;Remember that &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;contributing-to-aws-sdk-ruby&#x2F;&quot;&gt;AWS SDK
contribution&lt;&#x2F;a&gt;
I wrote about? The one where I fixed missing &lt;code&gt;credential_source = Environment&lt;&#x2F;code&gt;
support? Well, turns out that was only half the story.&lt;&#x2F;p&gt;
&lt;p&gt;After my PR got merged and we updated our Discourse deployment to &lt;code&gt;aws-sdk-core 3.233.0&lt;&#x2F;code&gt;, I was excited to finally see role assumption working. The missing
credential source was fixed, our config looked perfect, and all the unit tests
were passing.&lt;&#x2F;p&gt;
&lt;p&gt;But when I deployed it to our test cluster, I still got an error. It was a new
error, but an error nonetheless. Instead of &lt;code&gt;UnsupportedCredentialType&lt;&#x2F;code&gt;, I was
now getting a permission denied error when trying to use AWS S3 operations.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-real-problem&quot;&gt;The Real Problem&lt;&#x2F;h3&gt;
&lt;p&gt;Here&#x27;s what was happening. I&#x27;d check the identity in our Rails console:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;discourse(prod)&amp;gt; sts = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Aws&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;STS&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new
&lt;&#x2F;span&gt;&lt;span&gt;discourse(prod)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;puts&lt;&#x2F;span&gt;&lt;span&gt; sts.get_caller_identity.arn
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;arn:aws:&lt;&#x2F;span&gt;&lt;span&gt;iam::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;123456789012&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MyUser
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That should have been showing an assumed role ARN like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;arn:aws:iam::123456789012:assumed-role&#x2F;MyRole&#x2F;session-name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The SDK was still using environment variables directly instead of using them as
source credentials to assume the configured role.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-investigation-round-2&quot;&gt;The Investigation (Round 2)&lt;&#x2F;h3&gt;
&lt;p&gt;Back to the AWS SDK source code, this time looking at
&lt;code&gt;credential_provider_chain.rb&lt;&#x2F;code&gt;. And there it was - a classic ordering problem:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;providers
&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ... other providers ...
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:env_credentials&lt;&#x2F;span&gt;&lt;span&gt;, {}], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Position 7 ← Wins!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ... other providers ...
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:assume_role_credentials&lt;&#x2F;span&gt;&lt;span&gt;, {}], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Position 10 ← Never reached
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The credential chain finds &lt;code&gt;AWS_ACCESS_KEY_ID&lt;&#x2F;code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;&#x2F;code&gt; in
position 7, returns those credentials immediately, and never reaches the role
assumption logic at position 10.&lt;&#x2F;p&gt;
&lt;p&gt;But here&#x27;s the thing - this isn&#x27;t as simple as just moving
&lt;code&gt;assume_role_credentials&lt;&#x2F;code&gt; higher in the chain. That might break existing
behavior for thousands of applications that rely on direct environment variable
usage.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-real-architecture-problem&quot;&gt;The Real Architecture Problem&lt;&#x2F;h3&gt;
&lt;p&gt;What should happen with this config:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[default]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role_arn &lt;&#x2F;span&gt;&lt;span&gt;= arn:aws:iam::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;123456789012&lt;&#x2F;span&gt;&lt;span&gt;:role&#x2F;MyRole
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;credential_source &lt;&#x2F;span&gt;&lt;span&gt;= Environment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;role_session_name &lt;&#x2F;span&gt;&lt;span&gt;= test-session
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;region &lt;&#x2F;span&gt;&lt;span&gt;= us-west-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Expected flow:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;SDK sees &lt;code&gt;role_arn&lt;&#x2F;code&gt; + &lt;code&gt;credential_source = Environment&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;SDK uses &lt;code&gt;AWS_ACCESS_KEY_ID&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;&#x2F;code&gt; as &lt;strong&gt;source credentials&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;SDK calls &lt;code&gt;AssumeRole&lt;&#x2F;code&gt; with those source credentials&lt;&#x2F;li&gt;
&lt;li&gt;SDK returns &lt;strong&gt;assumed role credentials&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;Actual flow:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;SDK finds &lt;code&gt;AWS_ACCESS_KEY_ID&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;&#x2F;code&gt; in environment&lt;&#x2F;li&gt;
&lt;li&gt;SDK returns those credentials directly (chain stops)&lt;&#x2F;li&gt;
&lt;li&gt;Role assumption config is never processed&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;the-contribution&quot;&gt;The Contribution&lt;&#x2F;h3&gt;
&lt;p&gt;I filed &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-ruby&#x2F;issues&#x2F;3301&quot;&gt;Bug #3301&lt;&#x2F;a&gt; with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Clear reproduction steps&lt;&#x2F;li&gt;
&lt;li&gt;Root cause analysis pointing to the specific code location&lt;&#x2F;li&gt;
&lt;li&gt;Expected vs. actual behavior with ARN examples&lt;&#x2F;li&gt;
&lt;li&gt;A workaround using &lt;code&gt;source_profile&lt;&#x2F;code&gt; (though it requires plaintext keys)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-response&quot;&gt;The Response&lt;&#x2F;h3&gt;
&lt;p&gt;The AWS team&#x27;s response was exactly what you hope for:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;Hey, thanks for opening an issue. I believe you are correct and this is
something we need to fix. I need to confirm some details regarding
AssumeRoleCredentials profile chaining with the team first and I&#x27;ll keep you
updated.&quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That&#x27;s maintainer validation that this is a real architectural issue, not user
error.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-i-learned-again&quot;&gt;What I Learned (Again)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Complex systems have complex bugs:&lt;&#x2F;strong&gt; My first fix solved the missing feature,
but revealed a deeper architectural problem with credential chain precedence.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Sometimes the obvious fix isn&#x27;t right:&lt;&#x2F;strong&gt; Moving &lt;code&gt;assume_role_credentials&lt;&#x2F;code&gt;
higher might seem simple, but it requires careful consideration of context and
backward compatibility.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Good bug reports matter:&lt;&#x2F;strong&gt; Clear reproduction steps, root cause analysis, and
concrete examples help maintainers understand and prioritize issues.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Persistence pays off:&lt;&#x2F;strong&gt; I could have stopped after the first fix and lived
with workarounds. But pushing deeper led to identifying a more fundamental
issue.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-bigger-picture&quot;&gt;The Bigger Picture&lt;&#x2F;h3&gt;
&lt;p&gt;This experience reinforced something important about systems work: fixing one
layer often reveals problems in the next layer down.&lt;&#x2F;p&gt;
&lt;p&gt;The first bug was a missing feature - straightforward to implement. The second
bug is an architectural design issue that requires careful consideration of how
credential resolution should work when role assumption is involved.&lt;&#x2F;p&gt;
&lt;p&gt;Both bugs are real, both needed fixing, and both will help developers who hit
the same issues. But they required completely different approaches - one needed
code, the other needed a thoughtful design discussion with the maintainers.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;status-update&quot;&gt;Status Update&lt;&#x2F;h3&gt;
&lt;p&gt;As of this writing, the AWS team is discussing the fix for the credential chain
precedence issue. Our Discourse implementation is ready to go - we&#x27;re just
waiting on the upstream architectural fix.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes the best contribution you can make is clearly identifying and
documenting a problem, even when the solution isn&#x27;t obvious. That&#x27;s exactly
what happened here.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-adventure-continues&quot;&gt;The Adventure Continues&lt;&#x2F;h3&gt;
&lt;p&gt;Read &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;contributing-to-aws-sdk-ruby-pt3&#x2F;&quot;&gt;Part
3&lt;&#x2F;a&gt; to
see how the maintainers responded to the bug report and the workaround I ended
up implementing.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT assisted Changelog - 40&#x2F;52</title>
          <pubDate>Fri, 03 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-40/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-40/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-40/">&lt;p&gt;The week covered a mix of practical, technical, and personal topics.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;travel-and-residency&quot;&gt;Travel and Residency&lt;&#x2F;h3&gt;
&lt;p&gt;Discussions continued around moving to Czechia. You asked about employer
documents, contracts, the passport biopage, tax implications, accommodation
requirements, and realistic timelines for when you could start working from
Prague. Flatio was identified as a likely short-term housing option.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;anki-and-language-learning&quot;&gt;Anki and Language Learning&lt;&#x2F;h3&gt;
&lt;p&gt;You set up an Anki deck for learning Czech. The focus was on the alphabet,
pronunciation, and use of IPA symbols. We went through how to structure the
deck, what templates should look like, and clarified things like vowel length.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nixos-and-framework-issues&quot;&gt;NixOS and Framework Issues&lt;&#x2F;h3&gt;
&lt;p&gt;There were troubleshooting sessions with your Framework 16 and NixOS. Problems
included the command key breaking after an RGB reset, the RGB matrix not working
in Linux, and questions about whether this tied to a NixOS upgrade. We looked at
inputmodule installation, what parts of &#x2F;etc are declarative, and the Framework
warranty&#x2F;return policy.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;broader-nixos-community&quot;&gt;Broader NixOS Community&lt;&#x2F;h3&gt;
&lt;p&gt;You asked about the NixOS steering committee drama and its connection to
Anduril, looking for current context on community governance issues.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;practical-life-logistics&quot;&gt;Practical Life Logistics&lt;&#x2F;h3&gt;
&lt;p&gt;A few everyday topics came up:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Steps for getting a car repaired after being rear-ended.&lt;&#x2F;li&gt;
&lt;li&gt;How to cancel a Moda healthcare plan.&lt;&#x2F;li&gt;
&lt;li&gt;Best backup plan when changing operating systems.&lt;&#x2F;li&gt;
&lt;li&gt;Selling an old car (1974 Ford Ranchero) in Portland, with estimates for repair
or restoration and whether shops do at-home consultations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;projects-and-ideas&quot;&gt;Projects and Ideas&lt;&#x2F;h3&gt;
&lt;p&gt;You continued brainstorming unique Discourse plugin ideas. This included using
Discourse to track flights, trains, or transit legs (with Prague trams as a test
case) and asking about APIs and boilerplate plugin setup.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;GoatCounter analytics and why a single link share might register multiple
views (including prefetching behavior).&lt;&#x2F;li&gt;
&lt;li&gt;Color distribution analysis on an uploaded image, with rotations and
measurements.&lt;&#x2F;li&gt;
&lt;li&gt;iPad Mini use cases.&lt;&#x2F;li&gt;
&lt;li&gt;Services to help sell or donate items at home.&lt;&#x2F;li&gt;
&lt;li&gt;Shipping personal items from the US to Europe.&lt;&#x2F;li&gt;
&lt;li&gt;Kastaplast first run disc valuations and market prices, including Falk, Lots,
Stål, Göte, Berg, and Reko.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Overall, the week balanced ongoing emigration planning and language study with
NixOS troubleshooting, plugin experiments, and practical life logistics.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT assisted Changelog - 36-39&#x2F;52</title>
          <pubDate>Fri, 26 Sep 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-36/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-36/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-36/">&lt;p&gt;&lt;strong&gt;Travel and Prague notes&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A first Europe trip to Prague sparked a travel post and follow ups. Sections
about the castle, tram lines 6 and 17, and Czech Cubism were drafted. Airport
and TSA logistics were covered, including CT scanner lanes at PDX, KLM meal
expectations, missed connection handling at AMS, and return routing via JFK.
Mint Mobile&#x27;s international pass proved sufficient for a week, with OsmAnd
recommended for offline maps and Obtainium used to install apps without Play
Store.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Czech visa preparation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Residency planning continued. A rental listing in Holesovice prompted an email
draft to the agent and an explanation of Czech 4+1 flat notation. Resources for
US to CZ expats, the role of Flatio, timing without a fixed move date, and
document prep were explored. An employer affidavit template was rewritten in
plain text. Fingerprinting and FBI background check expectations were
clarified. Czech terms like software engineer and contract types such as HPP
were noted.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Cameras and creative gear&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Beginner travel camera options were compared: Nikon Z30 and Canon R50 kits
versus the Ricoh GRIII for street and night work. Strengths, tradeoffs, and
lens choices were outlined. For carry systems, compact bags and local stock for
brands like WANDRD were discussed, with an eye toward minimal kits.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Discourse experiments and ideas&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A flurry of off label Discourse concepts landed, from non forum app patterns to
playful ideas like Conway&#x27;s Game of Life. Practicalities came up too: VPS disk
pressure from journal files, running locally instead, and revisiting plugin
basics. A specific plugin that tracks days until the next cake day was analyzed
for implementation details and feasibility.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Desktop tooling and small wins&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On Wayland, grim plus wl copy needed an explicit MIME type to fix clipboard
issues. A Nushell function location was clarified, and a prompt flow was added
to optionally save screenshots after copying. Hyprland confirmations and UX
touches resurfaced as blog worthy tips.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Selling, shipping, and decluttering&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Paths for selling a non running 1974 Ford Ranchero in Portland were mapped out:
where to get initial consultations, rough cost expectations for engine checks
and tune ups, and whether restoration would raise sale value. Services that
help sell or donate household items were listed. Options for shipping personal
goods from the US to Europe were compared at a high level.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Email deliverability and DNS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Email headers were unpacked for a non technical audience. DKIM and DMARC were
explained in plain terms, realistic DNS propagation timing was set, and common
DMARC failure causes were reviewed. The idea of account warming was addressed
with a pragmatic lens. Header domains and alignment details were parsed from
sample Authentication Results lines.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Disc golf market checks&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Kastaplast first run prices were researched with a focus on Falk, Lots, Stal,
and Gote. Market ranges, recency caveats, and condition effects were noted. A
correction landed for the Reko mix, with early plastics clarified. A well used
FR Berg valuation was discussed with realism about wear and ceiling prices.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Personal finance and admin&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;401k choices were outlined: cash out implications, rollovers to IRAs, and how a
move abroad intersects with taxes and planning. Help from fiduciary advisors
and any digital nomad friendly country programs were surveyed at a high level.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Logos, apps, and posts&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A map based Loop Finder app concept took shape using Vue, with local
GraphHopper via Docker Compose to remove API key friction. Zola templating for
shared resume layouts was explored. A prior post on typing Swedish with a US
keyboard kept attracting search traffic.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Housekeeping on the site&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Styling for headings aimed at mobile readability while respecting an 80 char
column. Prior weekly summaries stayed the model: plain text markdown, no fancy
chars, prose first, and wrapped lines. Future posts were queued from several
threads above, especially Prague transport notes, Hyprland prompts, and the
email DNS explainer.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>First time in Europe: One week in Prague</title>
          <pubDate>Tue, 16 Sep 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/visiting-prague-first-time-in-europe/</link>
          <guid>https://jakegoldsborough.com/blog/2025/visiting-prague-first-time-in-europe/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/visiting-prague-first-time-in-europe/">&lt;h3 id=&quot;a-country-boy-goes-to-europe&quot;&gt;A Country Boy Goes to Europe&lt;&#x2F;h3&gt;
&lt;p&gt;This past week was the annual global meetup for
&lt;a href=&quot;https:&#x2F;&#x2F;discourse.org&quot;&gt;Discourse&lt;&#x2F;a&gt;, the company I recently joined. I was lucky
enough to get hired right before the planning cutoff date, and they were very
generous to include me so early in my tenure. That inclusion made me feel
valued and trusted. This year the meetup was held in Prague, Czech Republic.
I was excited because I have never been out of North America.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;initial-leg-and-a-missed-connection-in-amsterdam&quot;&gt;Initial Leg and a Missed Connection in Amsterdam&lt;&#x2F;h3&gt;
&lt;p&gt;The trip started with a flight from Portland to Amsterdam. It was pretty
smooth, even if long. The only real issue was that the flight arrived late.
On top of that, the passport control line in Amsterdam may have been the
longest line I have ever seen in an airport. Those two things combined forced
me to miss my connecting flight to Prague. Luckily I was flying KLM, which is
very good about rebooking a new flight when it is their fault.&lt;&#x2F;p&gt;
&lt;p&gt;I had to do &lt;strong&gt;A LOT&lt;&#x2F;strong&gt; of walking and waiting, but I got rebooked and made it
to my new flight.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;meeting-my-new-coworkers&quot;&gt;Meeting My New Coworkers&lt;&#x2F;h3&gt;
&lt;p&gt;For all the excitement, I was nervous too. I am introverted, and walking into
a room of about 70 people I did not know was daunting. I am not great at
introducing myself and I do not feel &quot;important&quot; enough to assume people want
to meet me. I was not the only first timer, but I was by far the newest hire.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;prague-castle&quot;&gt;Prague Castle&lt;&#x2F;h3&gt;
&lt;p&gt;Prague Castle is not a single building as much as it is a hilltop campus of
courtyards, churches, palaces, and gardens.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;st-vitus-cathedral&quot;&gt;St. Vitus Cathedral&lt;&#x2F;h4&gt;
&lt;p&gt;Although I am anti-religion, I can appreciate the architecture of old world
churches. Pictures cannot do this building justice. The height, beauty, and
aging are things you just have to see in person.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;cathedral-1.jpeg&quot; alt=&quot;St. Vitus Cathedral, front view&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;cathedral-stained-glass.jpeg&quot; alt=&quot;St. Vitus Cathedral stained glass windows&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;golden-lane-zlata-ulicka&quot;&gt;Golden Lane (Zlatá ulička)&lt;&#x2F;h4&gt;
&lt;p&gt;This pocket street sits between the Bílá Tower and Daliborka Tower. The tiny,
colorful houses were built into the castle fortifications around the end of
the 16th century and stayed lived in up to the Second World War. Several of
the homes now show period interiors that trace everyday life on the lane
across five centuries.&lt;&#x2F;p&gt;
&lt;p&gt;House No. 22 is the best known stop. Franz Kafka stayed here for a time
during the First World War. Facades were repainted in the 1950s following
designs by Jiří Trnka, which is part of why the lane looks so storybook
today.&lt;&#x2F;p&gt;
&lt;p&gt;Climb the steps at House No. 12 to the terrace above Daliborka. The round
tower dates to 1496 and served as a prison until 1781. You will see notes
about the knight Dalibor of Kozojedy, the tower&#x27;s first recorded inmate.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;the-castle-proper-old-royal-palace&quot;&gt;The Castle Proper (Old Royal Palace)&lt;&#x2F;h4&gt;
&lt;p&gt;The Old Royal Palace centers on Vladislav Hall: huge, yet surprisingly open.
The broad Riders&#x27; Staircase was built so horsemen could enter, which says a
lot about the space&#x27;s ambitions. Outside, the courtyards do the real work of
the visit: sit, watch the guard change, and let the pace reset. On the south
side, terraces step down toward the river with quiet garden paths and big sky
views.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;view-from-castle-1.jpeg&quot; alt=&quot;View south over Prague from the castle terraces&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;public-trams-it&quot;&gt;Public Trams-it&lt;&#x2F;h3&gt;
&lt;p&gt;Prague&#x27;s tram network is part moving museum, part everyday superpower.&lt;&#x2F;p&gt;
&lt;p&gt;A quick history:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1875: horse trams debut in Prague&lt;&#x2F;li&gt;
&lt;li&gt;1891: inventor František Křižík launches the first electric tram (Letná)&lt;&#x2F;li&gt;
&lt;li&gt;1962: the Tatra T3, the red cream classic, begins service and becomes a
design icon still seen today&lt;&#x2F;li&gt;
&lt;li&gt;2010s to current: 100% low floor Škoda 15T ForCity sets the modern standard&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I caught almost every ride at Veletržní palác, a 2 minute walk from Mama
Shelter. Lines &lt;strong&gt;6&lt;&#x2F;strong&gt; and &lt;strong&gt;17&lt;&#x2F;strong&gt; stop here, so I could either hug the river or
cut across town without thinking too hard. Daytime trams run about every 8 to
20 minutes, so it felt like show up and go.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tram-6&quot;&gt;Tram 6&lt;&#x2F;h4&gt;
&lt;p&gt;Line 6 connects Nádraží Holešovice to Kubánské náměstí, which makes it a
useful cross town link if you are moving between Holešovice, the center, and
Vršovice. Daytime trams in Prague typically run every 8 to 20 minutes, so you
can treat both 6 and 17 like show up and go service.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tram-17&quot;&gt;Tram 17&lt;&#x2F;h4&gt;
&lt;p&gt;Line 17 hugs the Vltava for long stretches, so it is the easy, scenic way to
glide past Národní divadlo, Staroměstská, Výtoň, and the riverfront. It links
the north (Vozovna Kobylisy) with the south (Sídliště Modřany and Libuš). If
you want a view rich ride, sit by the window on this one.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;czech-cubist-museum-at-the-house-of-the-black-madonna&quot;&gt;Czech Cubist Museum at The House of the Black Madonna&lt;&#x2F;h3&gt;
&lt;p&gt;Czech Cubism did not stop at the canvas. It leapt into architecture,
furniture, and everyday objects. One of the movement&#x27;s showpieces is located
at The House at the Black Madonna, which was built in 1911 to 1912 and
designed by Josef Gočár. It was a Cubist designed department store turned
cultural landmark of Old Town. Today it hosts The Museum of Czech Cubism and
a restored Grand Cafe Orient.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;cubist-illustration.jpeg&quot; alt=&quot;Czech Cubist poster&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;cubist-bench.jpeg&quot; alt=&quot;Czech Cubist bench&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;cubist-couch.jpeg&quot; alt=&quot;Czech Cubist couch&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;cubist-chair.jpeg&quot; alt=&quot;Czech Cubist chair&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;permanent-souvenirs&quot;&gt;Permanent Souvenirs&lt;&#x2F;h3&gt;
&lt;p&gt;I decided to get a couple permanent souvenirs in the form of tattoos while
there.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;dario-squirrel.jpeg&quot; alt=&quot;Squirrel grabbing nuts, blackwork tattoo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Tattoo by &lt;a href=&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;dario_kristoffersen&#x2F;&quot;&gt;Dario Kristoffersen&lt;&#x2F;a&gt; at &lt;a href=&quot;https:&#x2F;&#x2F;www.onelovetattoo.cz&#x2F;tattooers&#x2F;dario-kristoffersen&quot;&gt;One Love Tattoo&lt;&#x2F;a&gt;.
Prague, 2025.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;tarlito-praha-castle.jpeg&quot; alt=&quot;Prague Castle, blackwork tattoo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Tattoo by &lt;a href=&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;tarlito&#x2F;&quot;&gt;Tarlito&lt;&#x2F;a&gt; at &lt;a href=&quot;https:&#x2F;&#x2F;www.onelovetattoo.cz&#x2F;tattooers&#x2F;tarlito&quot;&gt;One Love Tattoo&lt;&#x2F;a&gt;. Prague,
2025.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary-and-reflection&quot;&gt;Summary and Reflection&lt;&#x2F;h3&gt;
&lt;p&gt;This was honestly the best trip of my life. I absolutely loved Prague and that
old European energy. There was something different in the air. To me, it feels
like a smaller, older New York City.&lt;&#x2F;p&gt;
&lt;p&gt;I loved it so much that I have already started a checklist for a digital nomad
work visa. I could see going back for longer periods to visit and work. I
regret not going to the transit museum, so that is high on the list for the
next visit.&lt;&#x2F;p&gt;
&lt;p&gt;Děkuji, že jste si to přečetli.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Reverse Engineering A Unique Data Structure - Part 3, Course &amp; Course Details</title>
          <pubDate>Wed, 03 Sep 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/reverse-engineering-unique-data-structure-pt-3/</link>
          <guid>https://jakegoldsborough.com/blog/2025/reverse-engineering-unique-data-structure-pt-3/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/reverse-engineering-unique-data-structure-pt-3/">&lt;p&gt;Second part of the series, Search, can be found here:
&lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;reverse-engineering-unique-data-structure-pt-2&#x2F;&quot;&gt;Search for Places and Courses&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the previous two posts, we learned how to &lt;code&gt;GET&lt;&#x2F;code&gt;, scrub, and parse &lt;code&gt;Courses&lt;&#x2F;code&gt;
data, as well as how to use the search endpoint for &lt;code&gt;Places&lt;&#x2F;code&gt; and &lt;code&gt;Courses&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;viewing-a-specific-course&quot;&gt;Viewing a Specific Course&lt;&#x2F;h4&gt;
&lt;p&gt;In this post, we will build on the previous data and show how to find the endpoint
for a specific course and drill down into more data. We&#x27;ll focus on the
&lt;code&gt;courseDetails&lt;&#x2F;code&gt;, using the beloved Maple Hill as our example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_id&amp;quot;: &amp;quot;M6vT9WAEmtFKRFr2v&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;name&amp;quot;: &amp;quot;Maple Hill&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;ratingCount&amp;quot;: 10064,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;ratingAverage&amp;quot;: 4.899286515846228,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;locationText&amp;quot;: &amp;quot;Leicester, MA&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;courseId&amp;quot;: 1523,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;shortId&amp;quot;: &amp;quot;lCej&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;highlights&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;score&amp;quot;: 2.803980588912964,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;path&amp;quot;: &amp;quot;name&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;texts&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;value&amp;quot;: &amp;quot;Maple&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;type&amp;quot;: &amp;quot;hit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;value&amp;quot;: &amp;quot; &amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;value&amp;quot;: &amp;quot;Hill&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;type&amp;quot;: &amp;quot;hit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      ]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;searchScore&amp;quot;: 15.834041595458984,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;autocompleteScore&amp;quot;: 16.079005921251294
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The URL for a course will be a slugified course name, plus the &lt;code&gt;shortId&lt;&#x2F;code&gt;.
For Maple Hill, this URL is:
&lt;code&gt;https:&#x2F;&#x2F;myfrisbee.com&#x2F;courses&#x2F;maple-hill-lCej.data&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Based on observation, spaces become dashes, and special characters are removed
when generating the slug.&lt;&#x2F;p&gt;
&lt;p&gt;For example, Keith L. Christner Family DG Course becomes
keith-l-christner-family-dg-course.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;inspecting-the-data&quot;&gt;Inspecting the Data&lt;&#x2F;h4&gt;
&lt;p&gt;The response from this endpoint is &lt;strong&gt;massive&lt;&#x2F;strong&gt;--so much so that Firefox
truncates it in the Network tab. I had to use curl and save the file locally
just to inspect it.&lt;&#x2F;p&gt;
&lt;p&gt;Again, we are greeted by a large array of mixed types. The more I&#x27;m reading and
learning, it seems like this may not actually be done for any kind of
obfuscation, but for performance or a client side hydration strategy. The
response is very large but it&#x27;s a full page of data and probably replaces
multiple API calls.&lt;&#x2F;p&gt;
&lt;p&gt;This time, the response goes even deeper: it includes a schema map of schema
maps, where keys don&#x27;t point directly to data, but to other schema maps that
must be resolved first.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;routes&#x2F;courses&#x2F;$slug&#x2F;index&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_3&amp;quot;: 143
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_144&amp;quot;: 145,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_335&amp;quot;: 336,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_343&amp;quot;: 344,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_24719&amp;quot;: 24720,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_24957&amp;quot;: 24958,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_25013&amp;quot;: 25014,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_25150&amp;quot;: 25151,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_25410&amp;quot;: 25411,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_25435&amp;quot;: 25436,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_25481&amp;quot;: 25482,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_25513&amp;quot;: -7,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_25514&amp;quot;: 25515
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The second object is just full of references to other references. If you follow
each one of those schema maps, we can sometimes get the location of each
field&#x27;s key and value. Often times, there are just more schema maps to follow.
Here is a small snippet:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;smartLayouts&amp;quot;: [345, 3534, 12323, 13767, 14131, 14506, 19520, 22543],
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;classicLayouts&amp;quot;: [24721],
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;reviews&amp;quot;: [24959, 24981, 24992, 25002],
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;photos&amp;quot;: [25015, 25083, 25097, 25107, 25128],
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;nearbyCourses&amp;quot;: [25152, 25226, 25280, 25344],
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Going to &lt;code&gt;array[345]&lt;&#x2F;code&gt;, we get this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_66&amp;quot;: 346,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_84&amp;quot;: 85,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_347&amp;quot;: 348,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_349&amp;quot;: 350,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_72&amp;quot;: 3505,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3506&amp;quot;: 195,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3507&amp;quot;: 3508,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_147&amp;quot;: 256,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3509&amp;quot;: 3510,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3511&amp;quot;: 3512,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3513&amp;quot;: 3514,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3515&amp;quot;: 3516,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3517&amp;quot;: 3518,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_104&amp;quot;: 3519,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_167&amp;quot;: 3520,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3521&amp;quot;: 131,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3522&amp;quot;: 320,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3523&amp;quot;: 3524,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3525&amp;quot;: 3526,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3527&amp;quot;: 2679,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3528&amp;quot;: 679,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_3529&amp;quot;: 3530,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_396&amp;quot;: 3531
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Going to some of those references leads to actual data, but again, often times
it&#x27;s just more mappings.&lt;&#x2F;p&gt;
&lt;p&gt;Now that it makes sense manually, let&#x27;s write some code to do it programmatically.&lt;&#x2F;p&gt;
&lt;p&gt;At a high level, the flow is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;const schemaMap = resolveCourseSchemaMapSchema(data);
&lt;&#x2F;span&gt;&lt;span&gt;const courseDetailsSchema = schemaMap.courseDetail;
&lt;&#x2F;span&gt;&lt;span&gt;const courseDetails = resolveKeyAndValueNames(courseDetailsSchema, mockCourse);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Break the big array down into a schema map of schema maps&lt;&#x2F;li&gt;
&lt;li&gt;Pass that &lt;code&gt;courseDetailsSchema&lt;&#x2F;code&gt; and our original array to &lt;code&gt;resolveKeyAndValueNames&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;resolving-a-course-s-details-structure&quot;&gt;Resolving a Course&#x27;s Details Structure&lt;&#x2F;h4&gt;
&lt;p&gt;The function below does 3 important things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;finds our route key label. this key seems to precede the schema map.&lt;&#x2F;li&gt;
&lt;li&gt;follows the next pointer to the schema map schema map&lt;&#x2F;li&gt;
&lt;li&gt;passes that to &lt;code&gt;resolveKeyAndValueNames&lt;&#x2F;code&gt; to resolve each set of key&#x2F;values&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;export function resolveCourseSchemaMapSchema(data: any[]) {
&lt;&#x2F;span&gt;&lt;span&gt;  for (let i = 0; i &amp;lt; data.length - 2; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;    const label = data[i];
&lt;&#x2F;span&gt;&lt;span&gt;    const pointerMap = data[i + 1];
&lt;&#x2F;span&gt;&lt;span&gt;    const schemaMap = data[i + 2];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    if (
&lt;&#x2F;span&gt;&lt;span&gt;      label === &amp;quot;routes&#x2F;courses&#x2F;$slug&#x2F;index&amp;quot; &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;      typeof pointerMap === &amp;quot;object&amp;quot; &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;      typeof schemaMap === &amp;quot;object&amp;quot; &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;      Object.keys(pointerMap).length === 1
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;      const pointerIndex = Object.values(pointerMap)[0];
&lt;&#x2F;span&gt;&lt;span&gt;      const referencedMap = data[pointerIndex];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      if (typeof referencedMap === &amp;quot;object&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;        return resolveKeyAndValueNames(referencedMap, data);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That leaves us with a decoded schema object, where each field (like
&lt;code&gt;courseDetail&lt;&#x2F;code&gt;, &lt;code&gt;reviews&lt;&#x2F;code&gt;, &lt;code&gt;smartLayouts&lt;&#x2F;code&gt;) still contains schema references or
arrays of indexes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  courseDetail: {
&lt;&#x2F;span&gt;&lt;span&gt;    _66: 67,
&lt;&#x2F;span&gt;&lt;span&gt;    _68: 69,
&lt;&#x2F;span&gt;&lt;span&gt;    _146: 131,
&lt;&#x2F;span&gt;&lt;span&gt;    _147: 148,
&lt;&#x2F;span&gt;&lt;span&gt;    _72: 73,
&lt;&#x2F;span&gt;&lt;span&gt;    _149: 109,
&lt;&#x2F;span&gt;&lt;span&gt;    _150: 151,
&lt;&#x2F;span&gt;&lt;span&gt;    _152: 108,
&lt;&#x2F;span&gt;&lt;span&gt;    _84: 85,
&lt;&#x2F;span&gt;&lt;span&gt;    _153: 154,
&lt;&#x2F;span&gt;&lt;span&gt;    _96: 97,
&lt;&#x2F;span&gt;&lt;span&gt;    _155: 156,
&lt;&#x2F;span&gt;&lt;span&gt;    _158: 159,
&lt;&#x2F;span&gt;&lt;span&gt;    _160: 161,
&lt;&#x2F;span&gt;&lt;span&gt;    _162: 163,
&lt;&#x2F;span&gt;&lt;span&gt;    _164: 165,
&lt;&#x2F;span&gt;&lt;span&gt;    _102: 172,
&lt;&#x2F;span&gt;&lt;span&gt;    _110: 111,
&lt;&#x2F;span&gt;&lt;span&gt;    _130: 131,
&lt;&#x2F;span&gt;&lt;span&gt;    _174: 175,
&lt;&#x2F;span&gt;&lt;span&gt;    _176: 177,
&lt;&#x2F;span&gt;&lt;span&gt;    _180: 181,
&lt;&#x2F;span&gt;&lt;span&gt;    _184: 185,
&lt;&#x2F;span&gt;&lt;span&gt;    _56: 302,
&lt;&#x2F;span&gt;&lt;span&gt;    _303: 304,
&lt;&#x2F;span&gt;&lt;span&gt;    _305: 131,
&lt;&#x2F;span&gt;&lt;span&gt;    _132: 7,
&lt;&#x2F;span&gt;&lt;span&gt;    _133: 131,
&lt;&#x2F;span&gt;&lt;span&gt;    _306: 307,
&lt;&#x2F;span&gt;&lt;span&gt;    _308: 309,
&lt;&#x2F;span&gt;&lt;span&gt;    _310: 311,
&lt;&#x2F;span&gt;&lt;span&gt;    _312: 313,
&lt;&#x2F;span&gt;&lt;span&gt;    _314: 315,
&lt;&#x2F;span&gt;&lt;span&gt;    _316: 317,
&lt;&#x2F;span&gt;&lt;span&gt;    _318: 319,
&lt;&#x2F;span&gt;&lt;span&gt;    _134: 131,
&lt;&#x2F;span&gt;&lt;span&gt;    _323: 324,
&lt;&#x2F;span&gt;&lt;span&gt;    _328: 21,
&lt;&#x2F;span&gt;&lt;span&gt;    _329: 330,
&lt;&#x2F;span&gt;&lt;span&gt;    _331: 7,
&lt;&#x2F;span&gt;&lt;span&gt;    _332: 131,
&lt;&#x2F;span&gt;&lt;span&gt;    _333: 7,
&lt;&#x2F;span&gt;&lt;span&gt;    _334: 7
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  normalizedCourseTraffic: { _337: 338 },
&lt;&#x2F;span&gt;&lt;span&gt;  smartLayouts: [
&lt;&#x2F;span&gt;&lt;span&gt;      345,  3534,
&lt;&#x2F;span&gt;&lt;span&gt;    12323, 13767,
&lt;&#x2F;span&gt;&lt;span&gt;    14131, 14506,
&lt;&#x2F;span&gt;&lt;span&gt;    19520, 22543
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;  classicLayouts: [ 24721 ],
&lt;&#x2F;span&gt;&lt;span&gt;  reviews: [ 24959, 24981, 24992, 25002 ],
&lt;&#x2F;span&gt;&lt;span&gt;  photos: [ 25015, 25083, 25097, 25107, 25128 ],
&lt;&#x2F;span&gt;&lt;span&gt;  nearbyCourses: [ 25152, 25226, 25280, 25344 ],
&lt;&#x2F;span&gt;&lt;span&gt;  nearbyStores: [ 25412, 25424 ],
&lt;&#x2F;span&gt;&lt;span&gt;  events: [ 25437, 25460, 25470 ],
&lt;&#x2F;span&gt;&lt;span&gt;  badges: [
&lt;&#x2F;span&gt;&lt;span&gt;    25483, 25494, 25498,
&lt;&#x2F;span&gt;&lt;span&gt;    25500, 25505, 25506,
&lt;&#x2F;span&gt;&lt;span&gt;    25508, 25509, 25511,
&lt;&#x2F;span&gt;&lt;span&gt;    25512
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;  globalLayoutAverages: undefined,
&lt;&#x2F;span&gt;&lt;span&gt;  userStatus: &amp;#39;loggedOut&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next is our core function. We take the &lt;code&gt;courseDetail&lt;&#x2F;code&gt; schema map and pass it
and our original data array to &lt;code&gt;resolveKeyAndValueNames&lt;&#x2F;code&gt; to resolve the
actual values.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span&gt; * Resolves a schema map where both keys and values are index references into the data array.
&lt;&#x2F;span&gt;&lt;span&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;export function resolveKeyAndValueNames(schema: Record&amp;lt;string, number&amp;gt;, data: any[]): Record&amp;lt;string, any&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  const result: Record&amp;lt;string, any&amp;gt; = {};
&lt;&#x2F;span&gt;&lt;span&gt;  for (const rawKey in schema) {
&lt;&#x2F;span&gt;&lt;span&gt;    const keyIndex = parseInt(rawKey.replace(&#x2F;^_&#x2F;, &amp;quot;&amp;quot;), 10);
&lt;&#x2F;span&gt;&lt;span&gt;    const valIndex = schema[rawKey];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    const fieldName = data[keyIndex];
&lt;&#x2F;span&gt;&lt;span&gt;    if (typeof fieldName !== &amp;quot;string&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;      throw new Error(`Expected string field name at index ${keyIndex}, got: ${typeof fieldName}`);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    result[fieldName] = data[valIndex];
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  return result;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are now left with a nicely formatted and readable object of values:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;_id&amp;quot;: &amp;quot;M6vT9WAEmtFKRFr2v&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;holeCount&amp;quot;: 18,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;isPay&amp;quot;: true,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;status&amp;quot;: &amp;quot;Active&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;name&amp;quot;: &amp;quot;Maple Hill&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;latitude&amp;quot;: 42.276001,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;website&amp;quot;: &amp;quot;http:&#x2F;&#x2F;maplehilldiscgolf.com&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;longitude&amp;quot;: -71.895699,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;courseId&amp;quot;: 1523,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;country&amp;quot;: &amp;quot;United States&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;availabilityStatus&amp;quot;: &amp;quot;available&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;landType&amp;quot;: [157],
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;targetType&amp;quot;: &amp;quot;basket&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;targetTypeDescription&amp;quot;: &amp;quot;Black Hole Portal, Black Hole Gravity Version 2&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;availabilityTypeDescription&amp;quot;: &amp;quot;Closed the Sunday before Thanksgiving to New Years for Christmas Tree Season. &amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;conditions&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_104&amp;quot;: 166,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_167&amp;quot;: -5,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_168&amp;quot;: 169,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_170&amp;quot;: 171
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;location&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_104&amp;quot;: 105,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_106&amp;quot;: 173
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;shortId&amp;quot;: &amp;quot;lCej&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;hasBathroom&amp;quot;: true,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;propertyType&amp;quot;: &amp;quot;dedicated&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;activeTargetTypes&amp;quot;: [178, 179],
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;activeTeeTypes&amp;quot;: [182, 183],
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;layoutConfiguration&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_186&amp;quot;: 187,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_223&amp;quot;: 224,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_251&amp;quot;: 252,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_289&amp;quot;: 290,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_299&amp;quot;: 300,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_301&amp;quot;: -5
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;timezone&amp;quot;: &amp;quot;America&#x2F;New_York&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;otherFees&amp;quot;: &amp;quot;$5 Walker fee for those not playing&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;isSmartLayoutEnabled&amp;quot;: true,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;hasDrinkingWater&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;isDogFriendly&amp;quot;: true,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;amenitiesRating&amp;quot;: 4.754434159544442,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;designRating&amp;quot;: 4.920076530755979,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;sceneryRating&amp;quot;: 4.923442842581462,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;signageRating&amp;quot;: 4.747814409366677,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;teeRating&amp;quot;: 4.882374770235053,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;upkeepRating&amp;quot;: 4.891556089317444,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;difficultyBins&amp;quot;: [320, 321, 322],
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;isCartFriendly&amp;quot;: true,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;contactInfo&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_325&amp;quot;: 326,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_327&amp;quot;: 326
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;accessTypeDescription&amp;quot;: &amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;accessibility&amp;quot;: &amp;quot;notAccessible&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;byob&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;dedicatedTargets&amp;quot;: true,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;hasAvailabilityRestrictions&amp;quot;: false,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;underConstruction&amp;quot;: false
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: Some fields like &lt;code&gt;conditions&lt;&#x2F;code&gt;, &lt;code&gt;location&lt;&#x2F;code&gt;, and &lt;code&gt;layoutConfiguration&lt;&#x2F;code&gt; are
still partially encoded -- they contain their own schema maps or references that
need to be decoded separately using &lt;code&gt;resolveKeyAndValueNames&lt;&#x2F;code&gt;. We&#x27;ll cover
those in a future post when we dive deeper into layout and field-level data.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h4&gt;
&lt;p&gt;In this post, we decoded the structure of MyFrisbee&#x27;s &lt;code&gt;courseDetails&lt;&#x2F;code&gt; payloads by:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Resolving the &lt;code&gt;&quot;routes&#x2F;courses&#x2F;$slug&#x2F;index&quot;&lt;&#x2F;code&gt; entry&lt;&#x2F;li&gt;
&lt;li&gt;Using &lt;code&gt;resolveCourseSchemaMapSchema&lt;&#x2F;code&gt; to get a field-labeled schema&lt;&#x2F;li&gt;
&lt;li&gt;Running that through &lt;code&gt;resolveKeyAndValueNames&lt;&#x2F;code&gt; to extract readable values&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This pattern gives us a fully usable course object with real field names. While
some nested fields (like &lt;code&gt;conditions&lt;&#x2F;code&gt; or &lt;code&gt;layoutConfiguration&lt;&#x2F;code&gt;) still require
additional decoding, we now have the tools to confidently work with MyFrisbee&#x27;s
structured course data.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;next-time&quot;&gt;Next Time&lt;&#x2F;h4&gt;
&lt;p&gt;In the next post, we&#x27;ll go one level deeper--resolving nested layout data like
hole-by-hole distances and tee types.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Reverse Engineering A Unique Data Structure - Part 2, Search</title>
          <pubDate>Sat, 30 Aug 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/reverse-engineering-unique-data-structure-pt-2/</link>
          <guid>https://jakegoldsborough.com/blog/2025/reverse-engineering-unique-data-structure-pt-2/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/reverse-engineering-unique-data-structure-pt-2/">&lt;p&gt;First part of the series, Courses, can be found here:
&lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;reverse-engineering-unique-data-structure-pt-1&#x2F;&quot;&gt;Courses&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;search-for-places&quot;&gt;Search for Places&lt;&#x2F;h4&gt;
&lt;p&gt;In the first post in this series, we were able to parse and extract a list
of &lt;code&gt;Course&lt;&#x2F;code&gt; data. This is great, but we&#x27;re simply getting back 20 random courses
that might not mean anything to the end user. Lucky for us, there are a couple
search options.&lt;&#x2F;p&gt;
&lt;p&gt;Going to &lt;a href=&quot;https:&#x2F;&#x2F;myfrisbee.com&#x2F;courses&quot;&gt;https:&#x2F;&#x2F;myfrisbee.com&#x2F;courses&lt;&#x2F;a&gt; and starting to
type in the search box reveals some network calls:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;places&#x2F;search?term=charlotte&amp;amp;limit=5&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is getting called for every character that is typed and should probably
be debounced a little.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, from that call, we get some pretty well formed data instead of the
index&#x2F;schema map data like before. Here is one result:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;_id&amp;quot;: &amp;quot;NxHZZBpPjDnXHbbZg&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;type&amp;quot;: &amp;quot;city&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;slug&amp;quot;: &amp;quot;charlotte-nc&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;name&amp;quot;: &amp;quot;Charlotte&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;country&amp;quot;: &amp;quot;United States&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;countryCode&amp;quot;: &amp;quot;US&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;admin1&amp;quot;: &amp;quot;North Carolina&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;city&amp;quot;: &amp;quot;Charlotte&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;location&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;  -80.84313,
&lt;&#x2F;span&gt;&lt;span&gt;  35.22709
&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;score&amp;quot;: 98.75883083083083,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;fullLocationText&amp;quot;: &amp;quot;Charlotte North Carolina United States&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;highlights&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;score&amp;quot;: 1.4719792604446411,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;path&amp;quot;: &amp;quot;fullLocationText&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;texts&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;      {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;value&amp;quot;: &amp;quot;Charlotte North Carolina&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;type&amp;quot;: &amp;quot;hit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;      {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;value&amp;quot;: &amp;quot; United States&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;autocompleteScore&amp;quot;: 72.5995921895284
&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There seem to be a few options for &lt;code&gt;type&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;city&lt;&#x2F;li&gt;
&lt;li&gt;admin1 (which appears to represent state in the US)&lt;&#x2F;li&gt;
&lt;li&gt;country&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now, you can take that &lt;code&gt;slug&lt;&#x2F;code&gt; and plug it into the courses call:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;courses.data?placeId=charlotte-nc&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;See the first &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;reverse-engineering-unique-data-structure-pt-1&#x2F;&quot;&gt;post&lt;&#x2F;a&gt;
on how to parse and extract that data.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;search-for-courses&quot;&gt;Search for Courses&lt;&#x2F;h4&gt;
&lt;p&gt;The Places endpoint was not the only one being hit though. When typing in the
search box, you will also see this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;api&#x2F;courses&#x2F;search?includeGenerallyUnavailableCourses=true&amp;amp;term=hornets nest&amp;amp;limit=5&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Again, we get some pretty well formed data:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;_id&amp;quot;: &amp;quot;jJAW46X3WX8qT7mXR&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;locationText&amp;quot;: &amp;quot;Charlotte, VT&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;ratingAverage&amp;quot;: 3.4976632020706235,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;courseId&amp;quot;: 11220,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;ratingCount&amp;quot;: 239,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;name&amp;quot;: &amp;quot;Charlotte Beach&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;shortId&amp;quot;: &amp;quot;j04j&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;highlights&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;score&amp;quot;: 2.771970748901367,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;path&amp;quot;: &amp;quot;name&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;texts&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;      {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;value&amp;quot;: &amp;quot;Charlotte&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;type&amp;quot;: &amp;quot;hit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;      {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;value&amp;quot;: &amp;quot; Beach&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;searchScore&amp;quot;: 11.487470626831055,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;autocompleteScore&amp;quot;: 11.66234797214058
&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next time I will show you how to take that data and get a specific &lt;code&gt;Course&lt;&#x2F;code&gt;
endpoint and data.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;another-way-to-fuzzy-find-courses&quot;&gt;Another Way to Fuzzy Find Courses&lt;&#x2F;h4&gt;
&lt;p&gt;Not exactly a search but there appears to be at least one more way of fuzzy finding
courses. The &lt;code&gt;courses.data&lt;&#x2F;code&gt; endpoint can take another param called
&lt;code&gt;courseTerm&lt;&#x2F;code&gt;. The full URL would be:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;courses.data?courseTerm=charlotte&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This will return course results with &quot;Charlotte&quot; in the name. I&#x27;m thinking
this endpoint is there for list type pages and the search endpoint might just be
for autocomplete drop downs.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h4&gt;
&lt;p&gt;Showed how to search for places and courses&lt;&#x2F;p&gt;
&lt;h4 id=&quot;plan-for-next-time&quot;&gt;Plan for Next Time&lt;&#x2F;h4&gt;
&lt;p&gt;Drill down into specific course data&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT assisted Changelog - 35&#x2F;52</title>
          <pubDate>Fri, 29 Aug 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-35/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-35/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-35/">&lt;p&gt;This week covered a mix of personal projects, resume updates, and site tweaks.
On the budgeting front, cashctl planning continued, with refinements to the
workflow around paydays, file naming, and how income gets assigned to periods.
Simulated paycheck commands and outputs were discussed to bring the tool closer
to being usable.&lt;&#x2F;p&gt;
&lt;p&gt;Work on the personal site also came up. A Zola question about sharing one resume
template across multiple pages was raised, along with CSS improvements for
headings that stay mobile friendly while keeping within an 80-character layout.&lt;&#x2F;p&gt;
&lt;p&gt;Resume polish was another theme. A contribution to the AWS SDK for Ruby was
turned into a resume-style entry, with placement under the Discourse role
considered for now. Additional feedback was asked for on how to position open
source work.&lt;&#x2F;p&gt;
&lt;p&gt;The node-postgres-exporter project also got a GitHub star, and further
improvements were considered, such as in-memory caching and local storage to
smooth over network blips.&lt;&#x2F;p&gt;
&lt;p&gt;There was also some lighter talk--identifying a pine tree, considering Vermont
properties, and chatting about power adapters and credit scores.&lt;&#x2F;p&gt;
&lt;p&gt;Overall, the week blended cashctl development, resume building, static site
refinements, and a bit of infrastructure and personal exploration.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Reverse Engineering A Unique Data Structure - Part 1, Courses</title>
          <pubDate>Wed, 27 Aug 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/reverse-engineering-unique-data-structure-pt-1/</link>
          <guid>https://jakegoldsborough.com/blog/2025/reverse-engineering-unique-data-structure-pt-1/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/reverse-engineering-unique-data-structure-pt-1/">&lt;p&gt;&lt;strong&gt;Note: Real app name and URL have been replaced&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I am a very avid fan and player of disc golf.&lt;&#x2F;p&gt;
&lt;p&gt;Disc golf is basically the rules of golf but you&#x27;re throwing a frisbee
instead of hitting a ball. There are differences of course. We don&#x27;t throw
the disc into a hole in the ground, but the basic idea of starting in one place
and getting an object to another remains the same. It&#x27;s a beautiful sport that
combines the mystique of physics and flight with the beauty and tranquility of
nature. I get to take a hike and throw stuff through the woods, what&#x27;s not to
love? Like golf, there is a scoring system, and that&#x27;s where &quot;MyFrisbee&quot; comes
in.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;MyFrisbee&quot; is a disc golf scoring app. You can search for courses, find
leagues, and most importantly, keep score. It&#x27;s a useful tool with one
problem - there is no public API. I have seen this asked for publicly but
MyFrisbee has shown no plans for this in the immediate future, and that&#x27;s where
I come in. I really like figuring out how things work.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;starting-small&quot;&gt;Starting small&lt;&#x2F;h4&gt;
&lt;p&gt;This is the first real API I&#x27;ve tried reverse engineering so I wanted to start
small. Some of the features of MyFrisbee are paid and only available in the app and
I didn&#x27;t want to dive into that just yet. There are parts of the service that
are available on the website so I wanted to start there.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;courses&quot;&gt;Courses&lt;&#x2F;h4&gt;
&lt;p&gt;The biggest feature of the free version of the app is probably the course
directory so that&#x27;s where I started.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;myfrisbee.com&#x2F;courses&quot;&gt;https:&#x2F;&#x2F;myfrisbee.com&#x2F;courses&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Going directly to the courses URL, you can use the Developer Tools and the
Network tab to already find some useful calls. The most important is a call
to &lt;code&gt;&#x2F;__manifest&lt;&#x2F;code&gt;. This seems to strongly suggest at least the site is a Remix
Run based app, also indicated by the &lt;code&gt;p&lt;&#x2F;code&gt; parameters.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;remix.run&#x2F;&quot;&gt;https:&#x2F;&#x2F;remix.run&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The full URL looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;GET
&lt;&#x2F;span&gt;&lt;span&gt;	https:&#x2F;&#x2F;myfrisbee.com&#x2F;__manifest?p=&#x2F;courses&amp;amp;p=&#x2F;courses&#x2F;carey-park-disc-golf-course-e2a5&amp;amp;p=&#x2F;courses&#x2F;cheney-state-park-disc-golf-course-west-DnNL&amp;amp;p=&#x2F;courses&#x2F;chisholm-trail-3RqD&amp;amp;p=&#x2F;courses&#x2F;cowskin-mKI4&amp;amp;p=&#x2F;courses&#x2F;cowskin-west-MXwZ&amp;amp;p=&#x2F;courses&#x2F;dragon-disc-golf-course-ePkd&amp;amp;p=&#x2F;courses&#x2F;flying-bee-country-club-WOm5&amp;amp;p=&#x2F;courses&#x2F;garden-plain-city-park-dgc-dsry&amp;amp;p=&#x2F;courses&#x2F;helten-gardens-Bupy&amp;amp;p=&#x2F;courses&#x2F;keith-l-christner-family-dg-course-kLoh&amp;amp;p=&#x2F;courses&#x2F;lazys-links-1S2k&amp;amp;p=&#x2F;courses&#x2F;liberty-links-disc-golf-course-uwbs&amp;amp;p=&#x2F;courses&#x2F;linear-park-0KnA&amp;amp;p=&#x2F;courses&#x2F;llama-loop-qBK4&amp;amp;p=&#x2F;courses&#x2F;maize-south-dgc-0eco&amp;amp;p=&#x2F;courses&#x2F;newman-university-9Fmt&amp;amp;p=&#x2F;courses&#x2F;orchard-disc-golf-course-7F1E&amp;amp;p=&#x2F;courses&#x2F;prairie-winds-disk-golf-course-LiKg&amp;amp;p=&#x2F;courses&#x2F;quail-run-gFli&amp;amp;p=&#x2F;courses&#x2F;west-millbrook-dgc-tDG5&amp;amp;version=149b0717
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While this does tell us a lot, it doesn&#x27;t give us any real data. If we
try changing filters, we see another useful call.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;GET https:&#x2F;&#x2F;myfrisbee.com&#x2F;courses.data?sortOrder=rating&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Fore! Data incoming. While it&#x27;s very, &lt;strong&gt;very&lt;&#x2F;strong&gt; obfuscated, you can see some real
data in there.&lt;&#x2F;p&gt;
&lt;p&gt;We also can confirm our suspicions by looking at the response headers:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;x-remix-response yes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Most definitely a Remix based app.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;parsing-the-data&quot;&gt;Parsing The Data&lt;&#x2F;h3&gt;
&lt;p&gt;Looking at the data itself, it looks JSON-y, but when trying to parse it, we find
it&#x27;s corrupt and it fails. There are some foreign chars between two valid JSON
arrays. This seems intentional as it&#x27;s not breaking their site so they must
know about it? Regardless, let&#x27;s scrub that out.&lt;&#x2F;p&gt;
&lt;p&gt;This function takes our raw string and iterates over it creating a stack and
checking for valid opening JSON brackets. When it finds an opening bracket, it
pushes it to the stack, and when it finds a closing bracket, it pops one off.
When the stack is empty, we know the JSON structure is complete.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;export function extractJsonChunks(raw: string): any[] {
&lt;&#x2F;span&gt;&lt;span&gt;  const chunks: any[] = [];
&lt;&#x2F;span&gt;&lt;span&gt;  let i = 0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  while (i &amp;lt; raw.length) {
&lt;&#x2F;span&gt;&lt;span&gt;    if (raw[i] === &amp;#39;[&amp;#39; || raw[i] === &amp;#39;{&amp;#39;) {
&lt;&#x2F;span&gt;&lt;span&gt;      const start = i;
&lt;&#x2F;span&gt;&lt;span&gt;      const stack = [raw[i]];
&lt;&#x2F;span&gt;&lt;span&gt;      i++;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      while (i &amp;lt; raw.length &amp;amp;&amp;amp; stack.length &amp;gt; 0) {
&lt;&#x2F;span&gt;&lt;span&gt;        if (raw[i] === &amp;#39;[&amp;#39; || raw[i] === &amp;#39;{&amp;#39;) {
&lt;&#x2F;span&gt;&lt;span&gt;          stack.push(raw[i]);
&lt;&#x2F;span&gt;&lt;span&gt;        } else if (raw[i] === &amp;#39;]&amp;#39; || raw[i] === &amp;#39;}&amp;#39;) {
&lt;&#x2F;span&gt;&lt;span&gt;          stack.pop();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        i++;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      const chunk = raw.slice(start, i);
&lt;&#x2F;span&gt;&lt;span&gt;      try {
&lt;&#x2F;span&gt;&lt;span&gt;        chunks.push(JSON.parse(chunk));
&lt;&#x2F;span&gt;&lt;span&gt;      } catch {
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; ignore invalid chunks
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    } else {
&lt;&#x2F;span&gt;&lt;span&gt;      i++;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  return chunks;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;inspecting-the-data&quot;&gt;Inspecting The Data&lt;&#x2F;h4&gt;
&lt;p&gt;After successfully parsing the data, and there is &lt;strong&gt;a lot&lt;&#x2F;strong&gt; of it, we can take
a better look at two very large arrays.&lt;&#x2F;p&gt;
&lt;p&gt;The first part of the first array is mostly config looking stuff - API tokens for
various services and basic user settings like locale.&lt;&#x2F;p&gt;
&lt;p&gt;My interest is mostly in the actual data, which you can kind of see in the snippet
below. These are items in the array, so you can tell the data is there but it&#x27;s
very confusing to read and code against. It would be easy to assume a key then
a value but then you see things like &lt;code&gt;price&lt;&#x2F;code&gt;, followed by &lt;code&gt;status&lt;&#x2F;code&gt; and can tell
&lt;code&gt;price&lt;&#x2F;code&gt; is obviously missing a value.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;_id&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;cxYvYpWXX66MoAG5f&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;name&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Orchard Disc Golf Course&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;headline&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Moderately wooded technical course, Par 54 unless hole 5 is in long., making that a par 4 hole. (course 55)&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;longDescription&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;18 holes, 1 tee for each hole, 2 basket locations for each hole, rotated regularly.  &amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;holeCount&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;18,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;price&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;status&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Active&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;website&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;https:&#x2F;&#x2F;www.facebook.com&#x2F;groups&#x2F;270758746431057&amp;quot;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before any of that actual data, there is an array which didn&#x27;t make much sense
at first.&lt;&#x2F;p&gt;
&lt;p&gt;After some time digging and debugging (and a little help from ChatGPT), it
clicked into place.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;courseResults&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  [
&lt;&#x2F;span&gt;&lt;span&gt;    73,
&lt;&#x2F;span&gt;&lt;span&gt;    253,
&lt;&#x2F;span&gt;&lt;span&gt;    305,
&lt;&#x2F;span&gt;&lt;span&gt;    382,
&lt;&#x2F;span&gt;&lt;span&gt;    451,
&lt;&#x2F;span&gt;&lt;span&gt;    538,
&lt;&#x2F;span&gt;&lt;span&gt;    598,
&lt;&#x2F;span&gt;&lt;span&gt;    661,
&lt;&#x2F;span&gt;&lt;span&gt;    718,
&lt;&#x2F;span&gt;&lt;span&gt;    774,
&lt;&#x2F;span&gt;&lt;span&gt;    821,
&lt;&#x2F;span&gt;&lt;span&gt;    864,
&lt;&#x2F;span&gt;&lt;span&gt;    919,
&lt;&#x2F;span&gt;&lt;span&gt;    979,
&lt;&#x2F;span&gt;&lt;span&gt;    1026,
&lt;&#x2F;span&gt;&lt;span&gt;    1074,
&lt;&#x2F;span&gt;&lt;span&gt;    1123,
&lt;&#x2F;span&gt;&lt;span&gt;    1174,
&lt;&#x2F;span&gt;&lt;span&gt;    1224,
&lt;&#x2F;span&gt;&lt;span&gt;    1285
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_74&amp;quot;: 75,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_76&amp;quot;: 77,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_78&amp;quot;: 79,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_80&amp;quot;: 81,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_82&amp;quot;: 83,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_84&amp;quot;: 21,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_85&amp;quot;: 86,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_87&amp;quot;: 88,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_89&amp;quot;: 90,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_91&amp;quot;: 92,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_93&amp;quot;: 94,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_95&amp;quot;: 96,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_97&amp;quot;: 98,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_99&amp;quot;: 100,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_101&amp;quot;: 102,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_103&amp;quot;: 104,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_105&amp;quot;: 106,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_107&amp;quot;: 108,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_109&amp;quot;: 110,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_111&amp;quot;: 112,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_113&amp;quot;: 114,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_115&amp;quot;: 116,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_117&amp;quot;: 118,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_120&amp;quot;: 121,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_122&amp;quot;: 123,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_124&amp;quot;: 125,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_126&amp;quot;: 7,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_127&amp;quot;: 128,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_129&amp;quot;: 130,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_138&amp;quot;: 139,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_143&amp;quot;: 144,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_145&amp;quot;: 146,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_162&amp;quot;: 108,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_163&amp;quot;: 164,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_165&amp;quot;: 166,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_167&amp;quot;: 168,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_56&amp;quot;: 170,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_171&amp;quot;: 172,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_221&amp;quot;: 222,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_223&amp;quot;: 125,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_224&amp;quot;: 125,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_225&amp;quot;: -5,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_226&amp;quot;: 125,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_227&amp;quot;: 228,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_230&amp;quot;: 231,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_235&amp;quot;: 21,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_236&amp;quot;: 21,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_237&amp;quot;: 7,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_238&amp;quot;: 125,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_239&amp;quot;: 7,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_240&amp;quot;: 7,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_241&amp;quot;: 7,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_242&amp;quot;: 21,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_243&amp;quot;: 7,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_244&amp;quot;: 245,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_246&amp;quot;: 247,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;_252&amp;quot;: -7
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first array, &lt;code&gt;courseResults&lt;&#x2F;code&gt; is an index map telling us where in this giant
array each result is. If could you look at the site where we found this URL, you
would notice 20 courses in the UI - it just so happens that there are 20 items
in that &lt;code&gt;courseResults&lt;&#x2F;code&gt; array.&lt;&#x2F;p&gt;
&lt;p&gt;If you happen to check &lt;code&gt;array[73]&lt;&#x2F;code&gt;, it&#x27;s the following object from above and that
turns out to be a schema map - saying that the field name at &lt;code&gt;array[74]&lt;&#x2F;code&gt;
is equal to whatever is at &lt;code&gt;array[75]&lt;&#x2F;code&gt; and so on.&lt;&#x2F;p&gt;
&lt;p&gt;So, taking this further, the first result will have values in this giant array
from &lt;code&gt;74&lt;&#x2F;code&gt; to &lt;code&gt;252&lt;&#x2F;code&gt;. If you notice in our index map array above, the second
result will start at &lt;code&gt;253&lt;&#x2F;code&gt; so that makes perfect sense.&lt;&#x2F;p&gt;
&lt;p&gt;If you look at &lt;code&gt;array[253]&lt;&#x2F;code&gt; you will find another schema index to indicate
where to can find all the key value pairs for the 2nd result, which will actually
start at &lt;code&gt;array[254]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To summarize a bit on how this data is encoded:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The file contains multiple top-level JSON blocks, pasted together without separators&lt;&#x2F;li&gt;
&lt;li&gt;The structure includes:
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;top-level&lt;&#x2F;strong&gt; array of values (strings, numbers, objects)&lt;&#x2F;li&gt;
&lt;li&gt;An array named &lt;code&gt;courseResults&lt;&#x2F;code&gt; that lists indices into that top-level array&lt;&#x2F;li&gt;
&lt;li&gt;A set of &lt;strong&gt;object maps&lt;&#x2F;strong&gt; (e.g. at index 73, 253, etc.) that map &quot;key index&quot; → &quot;value index&quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Key Insight:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The file is basically a compressed CSV, but:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Field names and field values are &lt;strong&gt;stored in different locations&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Object schema = &lt;code&gt;{ &quot;_76&quot;: 77, &quot;_78&quot;: 79 }&lt;&#x2F;code&gt; → &lt;code&gt;&quot;name&quot;&lt;&#x2F;code&gt; is at 76, value is at 77&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;putting-it-all-together&quot;&gt;Putting It All Together&lt;&#x2F;h4&gt;
&lt;p&gt;After deciphering how to read the data manually, it was time to do it
programmatically.&lt;&#x2F;p&gt;
&lt;p&gt;With the help of ChatGPT, I wrote a couple functions that would
take our original data and format it down to something much more useable.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;function findCourseResultIndices(data: any[]): number[] {
&lt;&#x2F;span&gt;&lt;span&gt;  for (let i = 0; i &amp;lt; data.length; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;    if (
&lt;&#x2F;span&gt;&lt;span&gt;      Array.isArray(data[i]) &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;      data[i].every((v: unknown) =&amp;gt; typeof v === &amp;#39;number&amp;#39;) &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;      data[i - 1] === &amp;#39;courseResults&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;      return data[i];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  throw new Error(&amp;#39;Could not find courseResults array&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;export function extractCourses(data: any[]): Record&amp;lt;string, any&amp;gt;[] {
&lt;&#x2F;span&gt;&lt;span&gt;  const schemaIndices = findCourseResultIndices(data);
&lt;&#x2F;span&gt;&lt;span&gt;  const courses: Record&amp;lt;string, any&amp;gt;[] = [];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  for (const schemaIndex of schemaIndices) {
&lt;&#x2F;span&gt;&lt;span&gt;    const schema = data[schemaIndex] as Record&amp;lt;string, number&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    if (typeof schema !== &amp;#39;object&amp;#39; || Array.isArray(schema)) continue;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    const course: Record&amp;lt;string, any&amp;gt; = {};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    for (const [rawFieldKey, valueIndex] of Object.entries(schema)) {
&lt;&#x2F;span&gt;&lt;span&gt;      const fieldKeyIndex = parseInt(rawFieldKey.replace(&#x2F;^_&#x2F;, &amp;#39;&amp;#39;), 10);
&lt;&#x2F;span&gt;&lt;span&gt;      const fieldName = data[fieldKeyIndex];
&lt;&#x2F;span&gt;&lt;span&gt;      const value = data[valueIndex];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      if (typeof fieldName === &amp;#39;string&amp;#39;) {
&lt;&#x2F;span&gt;&lt;span&gt;        course[fieldName] = value;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    courses.push(course);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  return courses;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;extractCourses&lt;&#x2F;code&gt; courses is a function that takes an array of any types.&lt;&#x2F;p&gt;
&lt;p&gt;First, it calls out to another function, &lt;code&gt;findCourseResultIndices&lt;&#x2F;code&gt;. That function
is iterating over the array, looking for another array of all numbers that is
preceded by a string named &lt;code&gt;courseResults&lt;&#x2F;code&gt; and returns it.&lt;&#x2F;p&gt;
&lt;p&gt;Then we take that list of indices back and iterate over it. For every index
in that list, we build a schema of key value pairs and rebuild down into a simple
&lt;code&gt;Record&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The result is something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    _id: &amp;#39;cxYvYpWXX66MoAG5f&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    name: &amp;#39;Orchard Disc Golf Course&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    headline: &amp;#39;Moderately wooded technical course, Par 54 unless hole 5 is in long., making that a par 4 hole. (course 55)&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    longDescription: &amp;#39;18 holes, 1 tee for each hole, 2 basket locations for each hole, rotated regularly.  &amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    holeCount: 18,
&lt;&#x2F;span&gt;&lt;span&gt;    price: &amp;#39;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    status: &amp;#39;Active&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    website: &amp;#39;https:&#x2F;&#x2F;www.facebook.com&#x2F;groups&#x2F;270758746431057&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    latitude: 38.0998054149767,
&lt;&#x2F;span&gt;&lt;span&gt;    longitude: -97.87738949287784,
&lt;&#x2F;span&gt;&lt;span&gt;    locationText: &amp;#39;Hutchinson, KS&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    yearEstablished: 2018,
&lt;&#x2F;span&gt;&lt;span&gt;    courseId: 20619,
&lt;&#x2F;span&gt;&lt;span&gt;    ratingCount: 755,
&lt;&#x2F;span&gt;&lt;span&gt;    ratingAverage: 4.385343483628396,
&lt;&#x2F;span&gt;&lt;span&gt;    country: &amp;#39;United States&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    countryCode: &amp;#39;US&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    state: &amp;#39;Kansas&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    city: &amp;#39;Hutchinson&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    accessType: &amp;#39;everyone&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    availabilityStatus: &amp;#39;available&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    availabilityType: &amp;#39;yearRound&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    landType: [ 226 ],
&lt;&#x2F;span&gt;&lt;span&gt;    targetType: &amp;#39;basket&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    targetTypeDescription: &amp;#39;DISCatcher Pro (28 chains)&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    hasBathroom: true,
&lt;&#x2F;span&gt;&lt;span&gt;    hasDrinkingWater: false,
&lt;&#x2F;span&gt;&lt;span&gt;    propertyType: &amp;#39;mixedUse&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    conditions: { _146: 195, _196: 21, _197: 342, _199: 343 },
&lt;&#x2F;span&gt;&lt;span&gt;    location: { _146: 166, _167: 345 },
&lt;&#x2F;span&gt;&lt;span&gt;    shortId: &amp;#39;7F1E&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    topPhoto: {
&lt;&#x2F;span&gt;&lt;span&gt;      _74: 348,
&lt;&#x2F;span&gt;&lt;span&gt;      _242: 349,
&lt;&#x2F;span&gt;&lt;span&gt;      _244: 350,
&lt;&#x2F;span&gt;&lt;span&gt;      _246: 351,
&lt;&#x2F;span&gt;&lt;span&gt;      _248: 352,
&lt;&#x2F;span&gt;&lt;span&gt;      _250: 353,
&lt;&#x2F;span&gt;&lt;span&gt;      _252: 354,
&lt;&#x2F;span&gt;&lt;span&gt;      _254: 355
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    admin1Name: &amp;#39;Kansas&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    worldRankingsRating: 86.11626662182661,
&lt;&#x2F;span&gt;&lt;span&gt;    activeTargetTypes: [ 340 ],
&lt;&#x2F;span&gt;&lt;span&gt;    activeTeeTypes: [ 259 ],
&lt;&#x2F;span&gt;&lt;span&gt;    timezone: &amp;#39;America&#x2F;Chicago&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    layoutConfiguration: { _127: 360, _134: 363, _139: 374, _155: 380, _162: 383 },
&lt;&#x2F;span&gt;&lt;span&gt;    playFeeType: &amp;#39;free&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    isCartFriendly: true,
&lt;&#x2F;span&gt;&lt;span&gt;    isDogFriendly: true,
&lt;&#x2F;span&gt;&lt;span&gt;    limitedAccessReason: undefined,
&lt;&#x2F;span&gt;&lt;span&gt;    isSmartLayoutEnabled: true,
&lt;&#x2F;span&gt;&lt;span&gt;    difficultyBins: [ 203 ],
&lt;&#x2F;span&gt;&lt;span&gt;    contactInfo: { _387: 388, _389: 388 },
&lt;&#x2F;span&gt;&lt;span&gt;    accessTypeDescription: &amp;#39;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    availabilityTypeDescription: &amp;#39;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    byob: false,
&lt;&#x2F;span&gt;&lt;span&gt;    dedicatedTargets: true,
&lt;&#x2F;span&gt;&lt;span&gt;    hasAvailabilityRestrictions: false,
&lt;&#x2F;span&gt;&lt;span&gt;    isLocationPrivate: false,
&lt;&#x2F;span&gt;&lt;span&gt;    isStrollerFriendly: false,
&lt;&#x2F;span&gt;&lt;span&gt;    otherFees: &amp;#39;&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    underConstruction: false,
&lt;&#x2F;span&gt;&lt;span&gt;    accessibility: &amp;#39;notAccessible&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    distanceFromSelectedPlace: { _206: 397, _208: 398 },
&lt;&#x2F;span&gt;&lt;span&gt;    badgesInfo: undefined
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Voila! We have a well formed &lt;code&gt;Course&lt;&#x2F;code&gt; object. If you look at fields like
&lt;code&gt;topPhoto&lt;&#x2F;code&gt;, it looks like the schema map field reference rabbit hole goes even
deeper but that&#x27;s for another post.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h4&gt;
&lt;p&gt;In this post, we have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Found URL for &lt;code&gt;Courses&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Scrubbed and extracted (broken) JSON from said URL&lt;&#x2F;li&gt;
&lt;li&gt;Discovered data included index and schema maps&lt;&#x2F;li&gt;
&lt;li&gt;Wrote functions to format data into useable object&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;plan-for-next-time&quot;&gt;Plan For Next Time&lt;&#x2F;h4&gt;
&lt;p&gt;Enable the user to search for a &lt;code&gt;Place&lt;&#x2F;code&gt; and &lt;code&gt;Courses&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Contributing to the AWS Ruby SDK: When Documentation and Implementation Don&#x27;t Match</title>
          <pubDate>Sat, 23 Aug 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/contributing-to-aws-sdk-ruby/</link>
          <guid>https://jakegoldsborough.com/blog/2025/contributing-to-aws-sdk-ruby/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/contributing-to-aws-sdk-ruby/">&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h3&gt;
&lt;p&gt;I was working on some IAM role configuration at work when our Discourse
deployment started failing with AWS credential errors. The error was
frustrating because according to the AWS documentation, everything should have
been working perfectly.&lt;&#x2F;p&gt;
&lt;p&gt;The deployment was trying to use &lt;code&gt;credential_source = Environment&lt;&#x2F;code&gt; in the AWS
config, which is a standard approach documented in the AWS CLI guide. But for
some reason, the Ruby SDK wasn&#x27;t picking up the credentials.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-investigation&quot;&gt;The Investigation&lt;&#x2F;h3&gt;
&lt;p&gt;Like any good debugging session, I started by tracing through the credential
chain. The AWS Ruby SDK has a pretty clear credential resolution process, so I
dug into the source code to see what was happening.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s when I found something interesting: the AWS CLI documentation clearly
shows &lt;code&gt;Environment&lt;&#x2F;code&gt; as a supported credential source, but when I looked at the
Ruby SDK implementation, that option was completely missing.&lt;&#x2F;p&gt;
&lt;p&gt;Here are the &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;cli&#x2F;latest&#x2F;userguide&#x2F;cli-configure-role.html&quot;&gt;docs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s what I found in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-ruby&#x2F;blob&#x2F;version-3&#x2F;gems&#x2F;aws-sdk-core&#x2F;lib&#x2F;aws-sdk-core&#x2F;shared_config.rb#L362&quot;&gt;SDK&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;case credential_source
&lt;&#x2F;span&gt;&lt;span&gt;  when &amp;#39;Ec2InstanceMetadata&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    # ... implementation exists
&lt;&#x2F;span&gt;&lt;span&gt;  when &amp;#39;EcsContainer&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    # ... implementation exists
&lt;&#x2F;span&gt;&lt;span&gt;  when &amp;#39;Environment&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    # ... nothing here! end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The CLI supports it, the documentation says it should work, but the Ruby SDK
just... doesn&#x27;t implement it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h3&gt;
&lt;p&gt;This felt like a classic case where implementation lagged behind documentation.
Since I needed this working for our deployment, I decided to contribute the
missing functionality back to the project.&lt;&#x2F;p&gt;
&lt;p&gt;The fix was actually pretty straightforward once I understood the pattern:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;when &amp;#39;Environment&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;  Aws::Credentials.new(
&lt;&#x2F;span&gt;&lt;span&gt;    ENV[&amp;#39;AWS_ACCESS_KEY_ID&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;    ENV[&amp;#39;AWS_SECRET_ACCESS_KEY&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;    ENV[&amp;#39;AWS_SESSION_TOKEN&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I added comprehensive tests to make sure it worked correctly and that I wasn&#x27;t
breaking any of the existing 20,000+ tests in the project.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-contribution&quot;&gt;The Contribution&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-ruby&#x2F;pull&#x2F;3283&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-ruby&#x2F;pull&#x2F;3283&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the thing - I don&#x27;t really know Ruby that well. But the codebase was
well-organized and the patterns were clear enough that I could understand what
needed to happen.&lt;&#x2F;p&gt;
&lt;p&gt;I submitted the PR with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The missing implementation&lt;&#x2F;li&gt;
&lt;li&gt;Proper test coverage&lt;&#x2F;li&gt;
&lt;li&gt;Clear documentation of what was being added&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-response&quot;&gt;The Response&lt;&#x2F;h3&gt;
&lt;p&gt;The response from the AWS team was exactly what you hope for in open source:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;Hey, thanks for opening a PR. I agree that we should support this and I may
make some changes to this PR as well.&quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That&#x27;s maintainer gold right there - acknowledgment that the gap was real and
willingness to collaborate on getting it merged.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-i-learned&quot;&gt;What I Learned&lt;&#x2F;h3&gt;
&lt;p&gt;This whole experience reinforced a few things for me:&lt;&#x2F;p&gt;
&lt;p&gt;Documentation gaps happen: Even in well-maintained projects like the AWS SDKs,
there can be mismatches between what&#x27;s documented and what&#x27;s implemented.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t let unfamiliar languages stop you: I was able to contribute meaningfully
to a Ruby project despite not being a Ruby developer. Good code organization
and clear patterns make this possible.&lt;&#x2F;p&gt;
&lt;p&gt;Small changes can have big impact: This was maybe 10 lines of actual code, but
it unblocked our deployment and will help other developers who hit the same
issue.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-bigger-picture&quot;&gt;The Bigger Picture&lt;&#x2F;h3&gt;
&lt;p&gt;This kind of contribution is exactly why I love working as a generalist.
Instead of saying &quot;that&#x27;s not my language&quot; or &quot;someone else should fix the AWS
SDK,&quot; I could trace the problem to its source and ship a fix.&lt;&#x2F;p&gt;
&lt;p&gt;The best part? Our Discourse deployment should work now, and hopefully other
developers won&#x27;t hit this same roadblock in the future.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;update&quot;&gt;Update&lt;&#x2F;h3&gt;
&lt;p&gt;Since writing this, the change has been expanded with additional tests and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-ruby&#x2F;pull&#x2F;3283&quot;&gt;approved by the maintainers&lt;&#x2F;a&gt;.
It&#x27;s really rewarding to see a small contribution grow into something that&#x27;s
now part of the SDK itself. This is a great reminder that even small fixes
matter -- they can make life easier for the next developer who comes along.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-saga-continues&quot;&gt;The Saga Continues&lt;&#x2F;h3&gt;
&lt;p&gt;This turned out to be just the beginning. After getting the feature merged, I
discovered it didn&#x27;t actually work due to credential chain precedence issues.
Read more in &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;contributing-to-aws-sdk-ruby-pt2&#x2F;&quot;&gt;Part
2&lt;&#x2F;a&gt;
and &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;contributing-to-aws-sdk-ruby-pt3&#x2F;&quot;&gt;Part
3&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT assisted Changelog - 34&#x2F;52</title>
          <pubDate>Fri, 22 Aug 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-34/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-34/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-34/">&lt;p&gt;This week balanced travel research, disc golf writing edits, technical
debugging, and creative design work. On the travel side, questions came up
about flying with  money internationally and how ATM fees
might look in the Czech Republic with an OnPoint credit union card. You also
researched the best European power adapters, checking Wirecutter&#x27;s
recommendations for reliable options.&lt;&#x2F;p&gt;
&lt;p&gt;In Shelltrax, you continued to refine autoplay. The &lt;code&gt;play_next_track&lt;&#x2F;code&gt; function
was revisited to keep the footer showing artist and song info, just as before.
The main issue left was that the progress bar didn&#x27;t carry over correctly
between tracks when autoplay advanced.&lt;&#x2F;p&gt;
&lt;p&gt;On the creative side, you explored what the Discourse logo might look like if
it had aged 100 years, and separately, how it could be reimagined if the
company had started as a penpal or letter-writing business. Both ideas fit into
your broader exploration of branding experiments.&lt;&#x2F;p&gt;
&lt;p&gt;The Swedish (and some German) study streak has been extended to 239 days in a
row.&lt;&#x2F;p&gt;
&lt;p&gt;Overall, the week tied together preparations for international travel, cleanup
work on ongoing projects, and a mix of technical and creative problem-solving.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT assisted Changelog - 32+33&#x2F;52</title>
          <pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-32-33/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-32-33/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-32-33/">&lt;p&gt;&lt;strong&gt;Early August Projects&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The first week of August was centered on your Node-postgres-exporter work.
You finished the conversion to ESM and TypeScript and started thinking about
next steps. Around the same time, you were also looking into writing a Nix
package for Discourse, asking how to handle complex setups that involve
databases and services.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;System and Config Troubles&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A fair amount of time went into NixOS. You ran into an error with
&lt;code&gt;nixos-option&lt;&#x2F;code&gt; and flakes not being found in &lt;code&gt;.config&#x2F;nix&lt;&#x2F;code&gt;, and later were
debugging Git commit signing issues (wrong email in the commit vs author
fields). You also asked about forcing Git to use a certain SSH key or email
per repo. Other NixOS topics included setting up Wi-Fi on your Framework 16,
writing custom modules (like for Kolide), installing packages for Python and
Ruby in nix-shell, and configuring Starship with Nushell.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Hardware and Devices&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You were troubleshooting Librewolf not showing your Bluetooth headset mic,
plus issues with Wi-Fi and Ethernet modules on the Framework. There was also
a question about pinentry not working with GPG on NixOS. On the hardware
front, you asked about pixel misalignment on your monitor and learned about
TCON as a possible cause.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Lifestyle and Planning&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You asked about FSAs and their use. Travel came up too, with your upcoming
Europe trip and looking  for the best power adapters (especially for the Czech
Republic).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Blogging and Writing&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Your NixOS daily driver series continued, with a post on getting Wi-Fi
working on the Framework 16. You considered what direction to take the next
entry. You also asked for an intro&#x2F;about section to describe yourself,
condensing it down to 5 sentences. In parallel, you&#x27;ve kept up with weekly
summaries and changelog-style posts.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Miscellaneous&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Other threads included practicing Terraform and Nomad, CSS layout questions,
and making Hyprland keybinds prompt for confirmation before closing a window.
On the wearable side, your PineTime step counter broke and you asked about
firmware, Gadgetbridge, and even writing your own step-tracking app in Rust
or Kotlin.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT assisted Changelog - 31&#x2F;52</title>
          <pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-31/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-31/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-31/">&lt;p&gt;&lt;strong&gt;Nix package development&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We discussed writing a Nix package for a complex project with multiple
resources, using the Discourse install-cloud guide as a template to structure
derivations and manage dependencies cleanly.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NixOS Wi-Fi on Framework 16&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We troubleshooted nmcli reporting the Intel AX210 as DOWN, enabled wireless in
configuration.nix, and resolved common pitfalls to bring up the wireless
interface successfully.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Git commit signing&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We covered forcing Git to use a specific SSH key for a given repository, how to
resign commits, and how to update the commit email so that signatures appear
valid.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Hyprland keybinds&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We added a custom Hyprland keybind to close the active window with a
confirmation dialog, and refined the yes&#x2F;no prompts and dialog appearance for
better usability.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Terraform and Nomad learning&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We explored practical resources--sample projects, tutorials, and sandbox
environments--to build hands-on experience with Terraform and Nomad
orchestration.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Bluetooth audio input&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We investigated why LibreWolf failed to detect a Bluetooth headset mic,
including how to identify the board, check firmware versions, and verify
driver support.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Email server on NixOS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We outlined setting up a mail server on NixOS and using Caddy to automate TLS
certificate issuance for secure SMTP and IMAP provisioning.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Privacy-focused smartwatches&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We reviewed open-source options like the PineTime, diagnosed step-counter
failures, checked return policies, and sketched a plan for a Rust-based long-
term step tracker integrated with Gadgetbridge.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Swedish Studies&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;221 days in a row on Babbel. Listened to audio books as well this week.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Hyprland Tricks - Close Window Keybind With Confirmation Window</title>
          <pubDate>Mon, 28 Jul 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/hyprland-tricks-close-window-confirmation/</link>
          <guid>https://jakegoldsborough.com/blog/2025/hyprland-tricks-close-window-confirmation/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/hyprland-tricks-close-window-confirmation/">&lt;p&gt;By default, &lt;code&gt;hyprctl dispatch killactive&lt;&#x2F;code&gt; will instantly close your focused
window. If you&#x27;re like me and have ever yanked a terminal or browser window
when you weren&#x27;t ready, this tiny script adds a &quot;Yes&#x2F;No&quot; confirmation window
using Wofi.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;wofi-close-window-dialog.png&quot; alt=&quot;A dialog showing a yes or no confirmation selection&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-the-script&quot;&gt;Create the Script&lt;&#x2F;h3&gt;
&lt;p&gt;For me, I will be adding this to &lt;code&gt;~&#x2F;dotfiles&#x2F;hypr&#x2F;scripts&#x2F;hypr-confirm-close&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;#!&#x2F;usr&#x2F;bin&#x2F;env bash
&lt;&#x2F;span&gt;&lt;span&gt;# prompt &amp;quot;Close window?&amp;quot; with Yes&#x2F;No via wofi
&lt;&#x2F;span&gt;&lt;span&gt;choice=$(printf &amp;quot;Yes\nNo&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;  | wofi --dmenu --prompt=&amp;quot;Close window?&amp;quot; --lines=5)
&lt;&#x2F;span&gt;&lt;span&gt;[ &amp;quot;$choice&amp;quot; = &amp;quot;Yes&amp;quot; ] &amp;amp;&amp;amp; hyprctl dispatch killactive
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember to make it executable.
&lt;code&gt;chmod +x ~&#x2F;dotfiles&#x2F;hypr&#x2F;scripts&#x2F;hypr-confirm-close&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bind-the-key&quot;&gt;Bind the Key&lt;&#x2F;h3&gt;
&lt;p&gt;In your &lt;code&gt;hyprland.conf&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;bind = $mod, q, exec, bash, ~&#x2F;.config&#x2F;hypr&#x2F;scripts&#x2F;hypr-confirm-close
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The filepath is different here because it will get copied from our &lt;code&gt;~&#x2F;dotfiles&lt;&#x2F;code&gt;
dir to the normal &lt;code&gt;~&#x2F;.config&lt;&#x2F;code&gt; directory.&lt;&#x2F;p&gt;
&lt;p&gt;Reload:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;hyprctl reload&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h3&gt;
&lt;p&gt;Now &lt;code&gt;MOD+q&lt;&#x2F;code&gt; pops up a two-line menu and only when you select &quot;Yes&quot; will your
window be closed.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>NixOS as a daily driver or Zero to Nixty, part 9&#x2F;? - Enabling Wi-Fi</title>
          <pubDate>Sun, 27 Jul 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-9/</link>
          <guid>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-9/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/nixos-daily-driver-9/">&lt;p&gt;I recently got a new
&lt;a href=&quot;https:&#x2F;&#x2F;frame.work&#x2F;products&#x2F;laptop16-diy-amd-7040&quot;&gt;Framework 16&lt;&#x2F;a&gt; (thanks
Discourse!). In the previous post, we talked about encrypting the machine and
refactoring our config into a modular layout. You can read about that and more
in the &lt;a href=&quot;&#x2F;tags&#x2F;nixos&quot;&gt;NixOS As A Daily Driver&lt;&#x2F;a&gt; series.&lt;&#x2F;p&gt;
&lt;p&gt;Today I will be showing how I got Wi-Fi working because it did not work on NixOS
by default. The Framework 16 ships with an Intel AX210 Wi-Fi module.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-symptoms&quot;&gt;The Symptoms&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nmcli device status&lt;&#x2F;code&gt; shows my &lt;code&gt;wlp2s0&lt;&#x2F;code&gt; as &quot;DOWN&quot;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ip link set wlp2s0 up&lt;&#x2F;code&gt; was not effective&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nmtui&lt;&#x2F;code&gt; would show SSIDs but refused to connect&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;steps-to-fix&quot;&gt;Steps To Fix&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Load the Intel driver&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The AX210 needs the &lt;code&gt;iwlwifi&lt;&#x2F;code&gt; kernel module and firmware:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;boot.kernelModules = [ &amp;quot;iwlwifi&amp;quot; ];
&lt;&#x2F;span&gt;&lt;span&gt;hardware.enableRedistributableFirmware = true;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This ensures the driver is in my &lt;code&gt;init-ramfs&lt;&#x2F;code&gt; and the firmware is present.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Explicitly define Wi-Fi backend&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;networking.networkmanager.enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;networking.networkmanager.wifi.backend = &amp;quot;wpa_supplicant&amp;quot;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;full-minimal-config-snippet&quot;&gt;Full Minimal Config Snippet&lt;&#x2F;h3&gt;
&lt;p&gt;All in all, this is what I added:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# Load the Intel AX210 driver and firmware
&lt;&#x2F;span&gt;&lt;span&gt;boot.kernelModules               = [ &amp;quot;iwlwifi&amp;quot; ];
&lt;&#x2F;span&gt;&lt;span&gt;hardware.enableRedistributableFirmware = true;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Enable the wireless module and NM
&lt;&#x2F;span&gt;&lt;span&gt;networking.networkmanager.enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;networking.networkmanager.wifi.backend = &amp;quot;wpa_supplicant&amp;quot;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;rebuild-reboot&quot;&gt;Rebuild &amp;amp; Reboot&lt;&#x2F;h3&gt;
&lt;p&gt;Make sure all the new config will take hold by rebuilding and rebooting.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo nixos-rebuild switch
&lt;&#x2F;span&gt;&lt;span&gt;sudo reboot now
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can confirm everything worked by running:
&lt;code&gt;nmcli device status | grep wlp2s0&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;victory&quot;&gt;Victory!&lt;&#x2F;h3&gt;
&lt;p&gt;After rebooting, my &lt;code&gt;iwlwifi&lt;&#x2F;code&gt; driver loaded, &lt;code&gt;wlp2s0&lt;&#x2F;code&gt; came up, and &lt;code&gt;nmtui&lt;&#x2F;code&gt; was
able to both see and connect to the SSIDs.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT assisted Changelog - 30&#x2F;52</title>
          <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-30/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-30/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-30/">&lt;h3 id=&quot;tech&quot;&gt;Tech&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Waybar network module&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Discussions on adding an ethernet or wifi status module to Waybar
configuration for Hyprland in NixOS.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Nixvim branch specification&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Explored how to pin a specific branch in nixvim and how imports resolve
relative paths in modular NixOS configs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Kolide nix-agent on NixOS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Reviewed non-flake-based Kolide agent setup, module imports, time zone
settings, and troubleshooting import errors.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Responsive CSS patterns&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Covered CSS techniques for responsive background images and use of the
&lt;code&gt;:before&lt;&#x2F;code&gt; pseudo-element to style boxes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;TUI music player pause fix&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Debugged keybinding logic in the Rust TUI music player, refining
toggle_pause behavior to eliminate extra keystrokes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Arch Linux vs NixOS installation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Compared archinstall features, encryption support, and filesystem choices
(btrfs vs ext4); discussed backup and fallback strategies.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Wi-Fi and GPG in NixOS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Troubleshooted wifi connections via NetworkManager, git commit email
issues, and GPG pinentry failures in a NixOS environment.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;SSH key management&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Advised on forcing Git to use specific SSH keys per repository and
evaluated ed25519 as the default key type.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Starship prompt in NixOS and Nushell&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Installed and configured Starship in NixOS, and explored Nushell integration.
Need to fix path in Nushell.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Python and Ruby in nix-shell&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Set up nix-shell with Python packages, managed Ruby gems, and fixed
pinentry and gemdir errors within shellHook workarounds.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;personal&quot;&gt;Personal&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;First Week at Discourse!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The onboarding process has been very smooth and everyone is very welcoming. I am
excited about my future there.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Swedish&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;215 days in a row.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Today is my first day at Discourse!</title>
          <pubDate>Mon, 21 Jul 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/joining-discourse/</link>
          <guid>https://jakegoldsborough.com/blog/2025/joining-discourse/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/joining-discourse/">&lt;p&gt;Today I am joining &lt;a href=&quot;https:&#x2F;&#x2F;discourse.org&quot;&gt;Discourse&lt;&#x2F;a&gt; as a software engineer on
the infrastructure team.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;who-is-discourse&quot;&gt;Who is Discourse?&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Discourse is the 100% open source discussion platform built for the next
decade of the Internet. We make it easy to have meaningful conversations and
collaborate anytime, anywhere.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We are the home of ~22k communities across 23 countries and 13 timezones.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-discourse&quot;&gt;Why Discourse?&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;m excited about working at Discourse for a number of reasons really.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Most of my tech and programming focused life has revolved around open source
software and it&#x27;s always been a dream to get paid to work on an open source
software project.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;It&#x27;s a software engineer role on the infrastructure team. I was introduced
to DevOps work at my last job and fell down the rabbit hole. I love config
based workflows so things like IaC and NixOS have really clicked.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The company as a whole. This kind of goes with number 1 but I feel very
aligned with Discourse as a company. We work in an async format while being
completely remote. The company is very transparent, inclusive, and let&#x27;s be
real, the benefits are great.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I think this can be a very important and fulfilling chapter of my professional
and personal life and I&#x27;m looking forward to making the internet a better place
through open source software.&lt;&#x2F;p&gt;
&lt;p&gt;This is the second time now I&#x27;ve lost a job then found a much, much better one.
I think this is a valuable lesson to try and remember if I&#x27;m in that situation
again.&lt;&#x2F;p&gt;
&lt;p&gt;If Discourse sounds like the place for you, see if we&#x27;re hiring:
&lt;a href=&quot;https:&#x2F;&#x2F;discourse.org&#x2F;jobs&quot;&gt;https:&#x2F;&#x2F;discourse.org&#x2F;jobs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>NixOS as a daily driver or Zero to Nixty, part 8&#x2F;? - Modular Config</title>
          <pubDate>Sun, 20 Jul 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-8/</link>
          <guid>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-8/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/nixos-daily-driver-8/">&lt;p&gt;Check out the whole series here:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;tags&#x2F;nixos&quot;&gt;NixOS as a Daily Driver - Zero to Nixty&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h3&gt;
&lt;p&gt;Today is all about configuration and setting up our new encrypted machine. As
I stated at the end of the previous post, this didn&#x27;t go as smoothly as I was
hoping.&lt;&#x2F;p&gt;
&lt;p&gt;My plan was to just use labels when setting up the filesystems so my same exact
configuration could be copied around. This plan was short-sighted for a number
of reasons but it was definitely not going to work after seeing what the basic
configuration looked like after installing with encryption enabled. The LUKS
device setup is more complex than the normal, unencrypted filesystem
config. There may be a way to use labels here but I don&#x27;t really want to mess
with that right now. I have an encrypted machine that boots so I&#x27;m going to
leave it that way.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;breaking-config-into-modules&quot;&gt;Breaking Config Into Modules&lt;&#x2F;h3&gt;
&lt;p&gt;After some thinking and research, I decided to refactor the way I store the
config. I had been wanting to modularize it a bit anyway, so what better time
than now.&lt;&#x2F;p&gt;
&lt;p&gt;First, I broke my config up into some modules in a &lt;code&gt;common&lt;&#x2F;code&gt; directory.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nixos&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── common
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── base.nix
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── desktop.nix
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── packages.nix
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── services.nix
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── uefi.nix
&lt;&#x2F;span&gt;&lt;span&gt;│   └── users.nix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, I created a &lt;code&gt;hosts&lt;&#x2F;code&gt; directory that includes a file for each machine.
That file imports these basic modules and adds anything host specific like
hostname.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nixos&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── hosts
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── framework-personal.nix
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── framework-work.nix
&lt;&#x2F;span&gt;&lt;span&gt;│   └── macbook.nix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One of those files looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{ ... }:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  imports = [
&lt;&#x2F;span&gt;&lt;span&gt;    ..&#x2F;common&#x2F;base.nix
&lt;&#x2F;span&gt;&lt;span&gt;    ..&#x2F;common&#x2F;users.nix
&lt;&#x2F;span&gt;&lt;span&gt;    ..&#x2F;common&#x2F;desktop.nix
&lt;&#x2F;span&gt;&lt;span&gt;    ..&#x2F;common&#x2F;packages.nix
&lt;&#x2F;span&gt;&lt;span&gt;    ..&#x2F;common&#x2F;services.nix
&lt;&#x2F;span&gt;&lt;span&gt;  ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  networking.hostName = &amp;quot;macbook&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then I just update the &lt;code&gt;&#x2F;etc&#x2F;nixos&#x2F;configuration.nix&lt;&#x2F;code&gt; that was created for
me and import that one module. One of those files looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{ config, pkgs, ... }:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  imports = [
&lt;&#x2F;span&gt;&lt;span&gt;    .&#x2F;hardware-configuration.nix
&lt;&#x2F;span&gt;&lt;span&gt;    .&#x2F;hosts&#x2F;macbook.nix
&lt;&#x2F;span&gt;&lt;span&gt;  ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  # Replace actual UUID below
&lt;&#x2F;span&gt;&lt;span&gt;  boot.initrd.luks.devices.&amp;quot;$UUID&amp;quot;.device = &amp;quot;&#x2F;dev&#x2F;disk&#x2F;by-uuid&#x2F;$UUID&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  # Do not change this value unless you know what you are doing!
&lt;&#x2F;span&gt;&lt;span&gt;  # This value does *not* affect the Nixpkgs version. It is used to determine
&lt;&#x2F;span&gt;&lt;span&gt;  # whether to enable software and configuration options that require backwards
&lt;&#x2F;span&gt;&lt;span&gt;  # compatibility with older NixOS releases. Changing it may result in a system
&lt;&#x2F;span&gt;&lt;span&gt;  # that cannot be upgraded or has other surprising consequences.
&lt;&#x2F;span&gt;&lt;span&gt;  system.stateVersion = &amp;quot;25.05&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;complete-new-machine-flow&quot;&gt;Complete New Machine Flow&lt;&#x2F;h3&gt;
&lt;p&gt;Now, my new machine flow looks something like this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install NixOS&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Boot up and open a dev shell:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;nix-shell -p git rustup neovim&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;(We use git to check out config, rustup to install rust&#x2F;dotter, and neovim
for easier editing.)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Check out my dotfiles through https for now. This way I don&#x27;t need to create
an SSH key and add it to Github yet:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;dotfiles.git&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Install latest Rust then dotter:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;rustup install stable; cargo install dotter&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Checkout a new branch in my dotfiles dir and add a new host file&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Add a new local config for Dotter at&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;dotfiles&#x2F;.dotter&#x2F;local.toml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use the installed Dotter to deploy my dotfiles:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;~&#x2F;.cargo&#x2F;bin&#x2F;dotter deploy&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Rebuild NixOS:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;sudo nixos-rebuild switch&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Start Hypr:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Hyprland&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Celebrate! :tada:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;If everything went well, I am now sitting behind a duplicate of my other machines.
This workflow might seem long but it really only takes 10-30 mins to do all
this. It can obviously vary on your machine and build size. It&#x27;s far easier than
any other new machine flow I&#x27;ve tried. I&#x27;ve read about people using ansible
to do this kind of thing but this just feels so clean and easy once you get
around the rough edges.&lt;&#x2F;p&gt;
&lt;p&gt;I have executed this flow on 3 machines now and it&#x27;s worked well. I had to make
a few small changes like adding a &lt;code&gt;ref&lt;&#x2F;code&gt; to a branch for NixVim, and I&#x27;m
honestly not sure why that is. I don&#x27;t think it has anything to do with my
config as it was building before.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h3&gt;
&lt;p&gt;In this post, I showed how I broke my NixOS config down into modules so they can
be easily imported per host. I think this is a clean and reproducible way
to store and share my NixOS config. I have all my base config in easy to use
modules, then I can simply add any host specific setup to that single file.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;next-time&quot;&gt;Next Time&lt;&#x2F;h3&gt;
&lt;p&gt;At this point, things are feeling pretty good for my setup personally. I keep
things pretty minimal so as long as I can navigate around with the correct
keybinds and have basic tools like Nix&#x2F;Neovim and Librewolf installed and
setup, I&#x27;m mostly good to go. There are definitely some non-NixOS specific
things I could pivot to to stick with the &quot;Daily Driver&quot; theme.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re reading this and have suggestions or you&#x27;re curious about something,
let me know: &lt;a href=&quot;mailto:nixos@jakegoldsborough.com&quot;&gt;nixos@jakegoldsborough.com&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT assisted Changelog - 29&#x2F;52</title>
          <pubDate>Fri, 18 Jul 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-29/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-29/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-29/">&lt;h3 id=&quot;nixos-daily-driver-and-dotfiles&quot;&gt;NixOS Daily Driver and Dotfiles&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Continued refining NixOS setup and daily driver blog series&lt;&#x2F;li&gt;
&lt;li&gt;Modularized dotfiles using Dotter with template support&lt;&#x2F;li&gt;
&lt;li&gt;Adopted approach of letting NixOS generate base config, layering custom on top&lt;&#x2F;li&gt;
&lt;li&gt;Explored idea of a &quot;LazyNix&quot; dev toolkit using importable modules&lt;&#x2F;li&gt;
&lt;li&gt;Troubleshot and resolved GRUB and UEFI encryption setup issues&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;framework-laptop-and-qmk-customization&quot;&gt;Framework Laptop and QMK Customization&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;New laptop! Framework 16&lt;&#x2F;li&gt;
&lt;li&gt;Investigated Framework RGB keyboard and LED matrix customization&lt;&#x2F;li&gt;
&lt;li&gt;Confirmed QMK support and existence of Rust libraries (most tooling is in C)&lt;&#x2F;li&gt;
&lt;li&gt;Searched for examples and guides to interact with Framework&#x27;s LED module&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;task-management-and-productivity-tools&quot;&gt;Task Management and Productivity Tools&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Looked into Rust-based TUI task managers like Taskwarrior&lt;&#x2F;li&gt;
&lt;li&gt;Reviewed Taskwarrior features like due dates, tags, and urgency scoring&lt;&#x2F;li&gt;
&lt;li&gt;Practiced adding and updating tasks with CLI syntax&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;git-and-hosting&quot;&gt;Git and Hosting&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Managing personal site using two remotes, pushing to both for now&lt;&#x2F;li&gt;
&lt;li&gt;Long-term plan is to self-host once everything is working reliably&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;nixcon-2025-planning&quot;&gt;NixCon 2025 Planning&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Would like to attend NixCon in Rapperswil-Jona, Sept 5 to 7&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;avatars-and-stickers&quot;&gt;Avatars and Stickers&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Tweaked Tux-human avatar&lt;&#x2F;li&gt;
&lt;li&gt;Looked for places to buy open source stickers that support the projects&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;neovim-fonts-and-waybar&quot;&gt;Neovim, Fonts, and Waybar&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Set up Nixvim to remove trailing whitespace on save&lt;&#x2F;li&gt;
&lt;li&gt;Troubleshot font issue in WezTerm by refreshing font cache and restarting&lt;&#x2F;li&gt;
&lt;li&gt;Created toggleable Waybar for system stats using manual launch approach&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;language-learning&quot;&gt;Language Learning&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;210 days of Swedish in a row&lt;&#x2F;li&gt;
&lt;li&gt;Trying to pick some German back up for trip to Prague&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>NixOS as a daily driver or Zero to Nixty, part 7.5&#x2F;? - Trial by Encrypted Fire</title>
          <pubDate>Sun, 13 Jul 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-7-5/</link>
          <guid>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-7-5/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/nixos-daily-driver-7-5/">&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h3&gt;
&lt;p&gt;So far in this series, we have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;installed NixOS&lt;&#x2F;li&gt;
&lt;li&gt;enabled a desktop environment&lt;&#x2F;li&gt;
&lt;li&gt;setup a user and some basic daily driving tools&lt;&#x2F;li&gt;
&lt;li&gt;added our config to version control&lt;&#x2F;li&gt;
&lt;li&gt;introduced NixVim, a declarative way to configure Neovim&lt;&#x2F;li&gt;
&lt;li&gt;learned about NixOS dev environments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Catch up here:
&lt;a href=&quot;&#x2F;tags&#x2F;nixos&quot;&gt;NixOS Daily Driver series list&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This post is a bit of a detour as we&#x27;ll be completing a fresh reinstall
to enable disk encryption. We will be getting back to our configuration soon
though. The next post will show how to take our version controlled config
and apply it to our new install.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;encryption&quot;&gt;Encryption&lt;&#x2F;h3&gt;
&lt;p&gt;But first, let&#x27;s talk encryption. So far I have not been installing NixOS with
the drive encrypted. I recently learned that my new job will require the machine
used for work to have an encrypted drive. This is a good thing and I should
have been defaulting to encrypting my drives. Even though it&#x27;s good, it does
add some complexity to our NixOS configuration. Because I was doing this for
the first time, I decided to first test the encrypted installation on an old
System76 netbook I have.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;manual-attempts-with-luks-and-lvm&quot;&gt;Manual Attempts with LUKS and LVM&lt;&#x2F;h3&gt;
&lt;p&gt;Initially I planned to just do this manually. I have installed NixOS manually
every time so far, so I was hoping it would just be a few more steps. For the
most part this was true, but I still ran into some issues.&lt;&#x2F;p&gt;
&lt;p&gt;To start, I used &lt;code&gt;gparted&lt;&#x2F;code&gt;, &lt;code&gt;mkfs&lt;&#x2F;code&gt;, and &lt;code&gt;cryptsetup&lt;&#x2F;code&gt; to format the disk
and create some &lt;code&gt;LUKS&lt;&#x2F;code&gt; partitions.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;partitioning-and-luks-encryption&quot;&gt;Partitioning and LUKS encryption&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# Partition disk (example: &#x2F;dev&#x2F;sda)
&lt;&#x2F;span&gt;&lt;span&gt;parted &#x2F;dev&#x2F;sda mklabel gpt
&lt;&#x2F;span&gt;&lt;span&gt;parted &#x2F;dev&#x2F;sda mkpart ESP fat32 1MiB 512MiB
&lt;&#x2F;span&gt;&lt;span&gt;parted &#x2F;dev&#x2F;sda set 1 boot on
&lt;&#x2F;span&gt;&lt;span&gt;parted &#x2F;dev&#x2F;sda mkpart primary 512MiB 100%
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Format boot partition
&lt;&#x2F;span&gt;&lt;span&gt;mkfs.vfat -F32 &#x2F;dev&#x2F;sda1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Encrypt root partition with LUKS
&lt;&#x2F;span&gt;&lt;span&gt;cryptsetup luksFormat &#x2F;dev&#x2F;sda2
&lt;&#x2F;span&gt;&lt;span&gt;cryptsetup open &#x2F;dev&#x2F;sda2 cryptroot
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This all worked fine and I was able to set a password for the encrypted drive
and then unlock it right after.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;lvm&quot;&gt;LVM&lt;&#x2F;h4&gt;
&lt;p&gt;Now use LVM to allow flexibility inside the encrypted container:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# Initialize LVM
&lt;&#x2F;span&gt;&lt;span&gt;pvcreate &#x2F;dev&#x2F;mapper&#x2F;cryptroot
&lt;&#x2F;span&gt;&lt;span&gt;vgcreate vg &#x2F;dev&#x2F;mapper&#x2F;cryptroot
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Create logical volumes
&lt;&#x2F;span&gt;&lt;span&gt;lvcreate -L 16G -n swap vg
&lt;&#x2F;span&gt;&lt;span&gt;lvcreate -l 100%FREE -n root vg
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Format filesystems
&lt;&#x2F;span&gt;&lt;span&gt;mkfs.ext4 &#x2F;dev&#x2F;vg&#x2F;root
&lt;&#x2F;span&gt;&lt;span&gt;mkswap &#x2F;dev&#x2F;vg&#x2F;swap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;mounting-for-installation&quot;&gt;Mounting for Installation&lt;&#x2F;h4&gt;
&lt;p&gt;Next was to mount our partitions for installation.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# Mount the root volume
&lt;&#x2F;span&gt;&lt;span&gt;mount &#x2F;dev&#x2F;vg&#x2F;root &#x2F;mnt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Mount the EFI partition
&lt;&#x2F;span&gt;&lt;span&gt;mkdir -p &#x2F;mnt&#x2F;boot
&lt;&#x2F;span&gt;&lt;span&gt;mount &#x2F;dev&#x2F;sda1 &#x2F;mnt&#x2F;boot
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Enable swap
&lt;&#x2F;span&gt;&lt;span&gt;swapon &#x2F;dev&#x2F;vg&#x2F;swap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;configuration-and-installation&quot;&gt;Configuration and Installation&lt;&#x2F;h4&gt;
&lt;p&gt;The next step was to generate the NixOS configuration for our mounted filesystem:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;nixos-generate-config --root &#x2F;mnt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When running this, NixOS will generate a basic configuration for you based on
the disks you create and mount. This works well when creating an unencrypted
drive and the boot, root, and swap partitions are all configured correctly. For
whatever reason, the &lt;code&gt;LUKS&lt;&#x2F;code&gt; devices do not get picked up by this. This means
we&#x27;ll have to manually update our configuration to include the &lt;code&gt;LUKS&lt;&#x2F;code&gt; devices.&lt;&#x2F;p&gt;
&lt;p&gt;This is fine because from what I read in the docs, this isn&#x27;t too complex. It
should look something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# Attempted configuration
&lt;&#x2F;span&gt;&lt;span&gt;boot.initrd.luks.devices.&amp;quot;cryptroot&amp;quot; = {
&lt;&#x2F;span&gt;&lt;span&gt;  device = &amp;quot;&#x2F;dev&#x2F;disk&#x2F;by-uuid&#x2F;XXXX&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The docs also mention adding a kernel module:
&lt;code&gt;boot.initrd.kernelModules = [ &quot;cryptd&quot; ];&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After that, it was time to rebuild then reboot.&lt;&#x2F;p&gt;
&lt;p&gt;And, at first, success! During boot, I get asked for a password to open my
encrypted drive.&lt;&#x2F;p&gt;
&lt;p&gt;But then... failure! The passphrase will not work. My first instinct was I fat
fingered it but I tried multiple times and it would just not work.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;recovery&quot;&gt;Recovery&lt;&#x2F;h4&gt;
&lt;p&gt;Welp, time to boot into the live ISO again. I wanted to doublecheck all the
config and make sure I didn&#x27;t mess something up.&lt;&#x2F;p&gt;
&lt;p&gt;First, I needed to open the encrypted root partition:
&lt;code&gt;cryptsetup open &#x2F;dev&#x2F;sda2 cryptroot&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This creates &lt;code&gt;&#x2F;dev&#x2F;mapper&#x2F;cryptroot&lt;&#x2F;code&gt; and gives access to what&#x27;s inside.&lt;&#x2F;p&gt;
&lt;p&gt;Next, the volume groups needed activated:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;vgscan
&lt;&#x2F;span&gt;&lt;span&gt;vgchange -ay
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we mount some important directories:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;mount &#x2F;dev&#x2F;vg&#x2F;root &#x2F;mnt
&lt;&#x2F;span&gt;&lt;span&gt;mkdir -p &#x2F;mnt&#x2F;boot
&lt;&#x2F;span&gt;&lt;span&gt;mount &#x2F;dev&#x2F;sda1 &#x2F;mnt&#x2F;boot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, we&#x27;ll use &lt;code&gt;nixos-enter&lt;&#x2F;code&gt;. This gave me a shell inside the broken system --
same environment as if it had booted normally.&lt;&#x2F;p&gt;
&lt;p&gt;We can check our config files to make sure nothing looks off:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nano &#x2F;etc&#x2F;nixos&#x2F;configuration.nix
&lt;&#x2F;span&gt;&lt;span&gt;nano &#x2F;etc&#x2F;nixos&#x2F;hardware-configuration.nix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately for me, I could not find anything wrong. In fact, I tried 3 fresh
installs and could never get it working manually.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;graphical-installer&quot;&gt;Graphical Installer&lt;&#x2F;h3&gt;
&lt;p&gt;After all that, I decided to just give up on the manual install and try the
graphical installer. I should have probably started here but I didn&#x27;t see a
certain sentence in the wiki in time.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are a few options for full disk encryption. The easiest way is to use
the graphical installer and choose &quot;encrypt&quot; while doing the installation.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;And ya know what, it was easy. So easy in fact, it worked the first time and I
could instantly power up, enter my encrypted drive password, and be taken to
the login console.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;outro&quot;&gt;Outro&lt;&#x2F;h3&gt;
&lt;p&gt;This post was kind of a detour from the normal series as we reinstalled
so we could encrypt the drive. In the next post, I will be going over how
we can take the configuration we added to git in the previous posts and apply
it to our new, freshly installed and encrypted system.&lt;&#x2F;p&gt;
&lt;p&gt;Spoiler: it does not go as smoothly as I had hoped.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT assisted Changelog - 28&#x2F;52</title>
          <pubDate>Fri, 11 Jul 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-28/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-28/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-28/">&lt;h3 id=&quot;20250704-20250711&quot;&gt;20250704 - 20250711&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;cyberspace&quot;&gt;Cyberspace&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;nixos&quot;&gt;NixOS&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Published two posts in Daily Driver series. My late 2011 Macbook Pro running
NixOs is already feeling ready for daily use really:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;nixos-daily-driver-5&#x2F;&quot;&gt;Part 5&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;nixos-daily-driver-6&#x2F;&quot;&gt;Part 6&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Fighting encrypted disk installation. Installation seems fine but then I can&#x27;t
unlock drive to boot up.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;meatspace&quot;&gt;Meatspace&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;disc-golf&quot;&gt;Disc Golf&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Played Pier Park&lt;&#x2F;li&gt;
&lt;li&gt;Played Memorial Park&lt;&#x2F;li&gt;
&lt;li&gt;Published post about experience with UDisc regarding my open source library:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;fairway-client-not-fair-enough&#x2F;&quot;&gt;Fairway Client Not Fair Enough&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;language-studies&quot;&gt;Language Studies&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Swedish&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;204 day streak on Babbel. Did a few more lessons this week and not just
review. Listened to some Radio Sweden på lätt Svenska (Radio Sweden in easy
Swedish)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Czech&#x2F;German&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I found out I&#x27;ll be going to Prague in Sept so I may try to pick up a little
Czech and brush up on German as many speak it there apparently.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;garden&quot;&gt;Garden&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Harvested 3 squash&lt;&#x2F;li&gt;
&lt;li&gt;Blueberry bush is fruiting&lt;&#x2F;li&gt;
&lt;li&gt;Raspberry bush is flowering&lt;&#x2F;li&gt;
&lt;li&gt;Tomatoes are flowering&#x2F;growing&lt;&#x2F;li&gt;
&lt;li&gt;New tomato and pepper starts are doing well&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;music&quot;&gt;Music&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Listened to a lot of Top Dawg Entertainment this week - Kendrick Lamar,
Ab-Soul, Doechii, Schoolboy-Q&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>NixOS as a daily driver or Zero to Nixty, part 6&#x2F;? - Dev environment</title>
          <pubDate>Tue, 08 Jul 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-6/</link>
          <guid>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-6/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/nixos-daily-driver-6/">&lt;h3 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h3&gt;
&lt;p&gt;In the last post, we added some quality of life enhancements. This included
key remapping and getting hypridle and hyprlock set up.&lt;&#x2F;p&gt;
&lt;p&gt;See that post &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;nixos-daily-driver-5&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h3&gt;
&lt;p&gt;Today, I will be introducing &lt;code&gt;NixVim&lt;&#x2F;code&gt; and show you how to set up some
per-project development shells. The latter is a very powerful part of NixOS as
you&#x27;ll see.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nixvim&quot;&gt;NixVim&lt;&#x2F;h3&gt;
&lt;p&gt;NixVim is a project that lets you declaratively configure Neovim in Nix. No
&lt;code&gt;init.lua&lt;&#x2F;code&gt;, &lt;code&gt;vimrc&lt;&#x2F;code&gt;, or plugin managers like Lazy or Packer.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s part of a broader Nix-native ecosystem where tools, config, and
dependencies are defined in one declarative, reproducible system.&lt;&#x2F;p&gt;
&lt;p&gt;I use and suggest this for a few reasons:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Fully Declarative Neovim Config&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This means all your plugins, keymaps, etc
are explicity defined. This will allow you to easily version it, share it, and
reproduce it on another system.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Automatic Plugin Management&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;No need to install anything with a plugin manager or run &lt;code&gt;:PackerInstall&lt;&#x2F;code&gt;,
&lt;code&gt;:LazySync&lt;&#x2F;code&gt; etc. When you build Nix, NixVim builds Neovim with all your plugins
downloaded and ready.&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Tight Integration with Nix packages&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You can inherit pkgs to bring in dependencies like &lt;code&gt;ripgrep&lt;&#x2F;code&gt;,
&lt;code&gt;lua-language-server&lt;&#x2F;code&gt;, or &lt;code&gt;stylua&lt;&#x2F;code&gt; directly. No external &lt;code&gt;npm&lt;&#x2F;code&gt;, &lt;code&gt;cargo&lt;&#x2F;code&gt;, &lt;code&gt;pip&lt;&#x2F;code&gt;,
or language-specific managers needed.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;initial-config&quot;&gt;Initial Config&lt;&#x2F;h4&gt;
&lt;p&gt;We are going to start small with our config and extend it further later.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{ pkgs, ... }: {
&lt;&#x2F;span&gt;&lt;span&gt;  programs.nixvim = {
&lt;&#x2F;span&gt;&lt;span&gt;    enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    # Enable basic plugins
&lt;&#x2F;span&gt;&lt;span&gt;    plugins = {
&lt;&#x2F;span&gt;&lt;span&gt;      lualine.enable = true;           # Statusline
&lt;&#x2F;span&gt;&lt;span&gt;      telescope.enable = true;         # Fuzzy finder
&lt;&#x2F;span&gt;&lt;span&gt;      treesitter.enable = true;        # Better syntax highlighting
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    # Use a Gruvbox theme (optional)
&lt;&#x2F;span&gt;&lt;span&gt;    colorschemes.gruvbox.enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    # LSP support
&lt;&#x2F;span&gt;&lt;span&gt;    plugins.lsp = {
&lt;&#x2F;span&gt;&lt;span&gt;      enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      # Example LSP: Lua
&lt;&#x2F;span&gt;&lt;span&gt;      servers = {
&lt;&#x2F;span&gt;&lt;span&gt;        lua-ls.enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    # Keymap example
&lt;&#x2F;span&gt;&lt;span&gt;    keymaps = [
&lt;&#x2F;span&gt;&lt;span&gt;      {
&lt;&#x2F;span&gt;&lt;span&gt;        mode = &amp;quot;n&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        key = &amp;quot;&amp;lt;leader&amp;gt;ff&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        action = &amp;quot;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;CR&amp;gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        options = {
&lt;&#x2F;span&gt;&lt;span&gt;          desc = &amp;quot;Find files&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s break this config down.&lt;&#x2F;p&gt;
&lt;p&gt;First, and most importantly, we enable Nixvim by setting
&lt;code&gt;programs.nixvim.enable&lt;&#x2F;code&gt; to &lt;code&gt;true&lt;&#x2F;code&gt;. Then, we enable a few basic plugins through
&lt;code&gt;programs.nixvim.plugins&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After that we enable the &lt;code&gt;gruvbox&lt;&#x2F;code&gt; color scheme and setup some basic LSP support.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we setup a keymap for &lt;code&gt;&amp;lt;leader&amp;gt;ff&lt;&#x2F;code&gt; that uses &lt;code&gt;telescope&lt;&#x2F;code&gt; to find files.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nix-shell-what-is-it&quot;&gt;&lt;code&gt;nix-shell&lt;&#x2F;code&gt; - What is it?&lt;&#x2F;h3&gt;
&lt;p&gt;Now onto &lt;code&gt;nix-shell&lt;&#x2F;code&gt;. &lt;code&gt;nix-shell&lt;&#x2F;code&gt; is a tool that lets you temporarily enter a
development environment defined by a Nix expression. Think of it as a
lightweight, project-specific sandbox with all the tools and dependencies you
need -- and nothing you don&#x27;t. They are like Python virtual environments, but
for any tool or language.&lt;&#x2F;p&gt;
&lt;p&gt;You can use &lt;code&gt;nix-shell&lt;&#x2F;code&gt; to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Spin up a shell with specific packages available&lt;&#x2F;li&gt;
&lt;li&gt;Test tools or languages without installing them system-wide&lt;&#x2F;li&gt;
&lt;li&gt;Set up consistent dev environments across machines or teams&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;why-use-it&quot;&gt;Why Use It?&lt;&#x2F;h4&gt;
&lt;p&gt;If you&#x27;ve ever run into &quot;works on my machine&quot; issues, &lt;code&gt;nix-shell&lt;&#x2F;code&gt; is the
antidote. By declaring your environment as code, you get repeatable,
deterministic setups every time -- no more dependency drift or missing tools.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s also fantastic for trying out a new language or toolchain. Want to test
something in Ruby, Rust, or Go? You can be up and running with just a few
lines.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;example&quot;&gt;Example&lt;&#x2F;h4&gt;
&lt;p&gt;Here’s what a simple &lt;code&gt;shell.nix&lt;&#x2F;code&gt; might look like for Rust development:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;pkgs ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;nixpkgs&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkShell &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;buildInputs &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rustc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo
&lt;&#x2F;span&gt;&lt;span&gt;  ];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run &lt;code&gt;nix-shell&lt;&#x2F;code&gt; in that directory, and boom, you&#x27;ll be dropped into a shell
environment with &lt;code&gt;rustc&lt;&#x2F;code&gt; and &lt;code&gt;cargo&lt;&#x2F;code&gt; available but without being installed
globally.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;one-off-shells&quot;&gt;One-Off Shells&lt;&#x2F;h4&gt;
&lt;p&gt;In fact, you don&#x27;t even need a &lt;code&gt;shell.nix&lt;&#x2F;code&gt; file. You could run
&lt;code&gt;nix-shell -p nodejs&lt;&#x2F;code&gt; and you would be dropped into a shell with &lt;code&gt;nodejs&lt;&#x2F;code&gt;
installed locally, meaning it&#x27;s not installed globally.&lt;&#x2F;p&gt;
&lt;p&gt;Overall, &lt;code&gt;nix-shell&lt;&#x2F;code&gt; is one of the most powerful parts of Nix&#x2F;NixOS.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h3&gt;
&lt;p&gt;In this post, we have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Enabled NixVim and set up a simple, usable Neovim config&lt;&#x2F;li&gt;
&lt;li&gt;Introduced &lt;code&gt;nix-shell&lt;&#x2F;code&gt; and showed how it can be used to create temporary,
repeatable dev environments&lt;&#x2F;li&gt;
&lt;li&gt;Explained how to launch one-off shells and why &lt;code&gt;nix-shell&lt;&#x2F;code&gt; is so useful for
development workflows&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>NixOS as a daily driver or Zero to Nixty, part 5&#x2F;? - QoL enhancements</title>
          <pubDate>Mon, 07 Jul 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-5/</link>
          <guid>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-5/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/nixos-daily-driver-5/">&lt;h3 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h3&gt;
&lt;p&gt;In the last post, we successfully got our configuration stored in version control.
This will make it very simple to pass our config around if needed. We also
learned about Dotter, a dotfile configuration management tool, which we will
be using again today.&lt;&#x2F;p&gt;
&lt;p&gt;See that post &lt;a href=&quot;&#x2F;blog&#x2F;content&#x2F;nixos-daily-driver-4&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h3&gt;
&lt;p&gt;Today, we will be covering a few quality of life enhancements. Those will
include keyboard remapping and locking our screen after a certain amount of
idle time.&lt;&#x2F;p&gt;
&lt;p&gt;Quality of life enhancements are things that while not strictly necessary,
they make life much better.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;keyboard-remapping&quot;&gt;Keyboard Remapping&lt;&#x2F;h3&gt;
&lt;p&gt;First, I&#x27;ll show you how to remap keys. For me personally, this will include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Caps Lock -&amp;gt; Esc when pressed&lt;&#x2F;li&gt;
&lt;li&gt;Caps Lock -&amp;gt; Control when held (and another key is pressed)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Caps Lock as Control when being held is a new change for me but I&#x27;m really
enjoying it. It has opened up many more keybind options for me.&lt;&#x2F;p&gt;
&lt;p&gt;This remapping will be done using &quot;Interception Tools&quot;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;interception-tools&quot;&gt;Interception Tools&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;title&#x2F;Interception-tools&quot;&gt;Interception Tools&lt;&#x2F;a&gt; is a
set of utilities to control and customize the behavior of keyboard input
mappings.&lt;&#x2F;p&gt;
&lt;p&gt;It works at a lower level than tools like &lt;code&gt;xcape&lt;&#x2F;code&gt; or &lt;code&gt;xmodmap&lt;&#x2F;code&gt; which makes it
one of the only options available for customizing keyboard behavior across
X11, Wayland, and the Linux console.&lt;&#x2F;p&gt;
&lt;p&gt;Below is an example of mine. It&#x27;s stored in
&lt;code&gt;~&#x2F;dotfiles&#x2F;nixos&#x2F;modules&#x2F;interception-caps.nix&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This config:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;enables the &lt;code&gt;services.interception-tools&lt;&#x2F;code&gt; module&lt;&#x2F;li&gt;
&lt;li&gt;adds a plugin called caps2esc&lt;&#x2F;li&gt;
&lt;li&gt;adds a &lt;code&gt;udevmonConfig&lt;&#x2F;code&gt; file&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{ config, pkgs, ...}:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let
&lt;&#x2F;span&gt;&lt;span&gt;  intercept = &amp;quot;${pkgs.interception-tools}&#x2F;bin&#x2F;intercept&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  uinput = &amp;quot;${pkgs.interception-tools}&#x2F;bin&#x2F;uinput&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;in {
&lt;&#x2F;span&gt;&lt;span&gt;  services.interception-tools = {
&lt;&#x2F;span&gt;&lt;span&gt;    enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;    plugins = with pkgs; [
&lt;&#x2F;span&gt;&lt;span&gt;      interception-tools-plugins.caps2esc
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;span&gt;    udevmonConfig = &amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      - JOB: &amp;quot;${intercept} -g $DEVNODE |
&lt;&#x2F;span&gt;&lt;span&gt;              ${pkgs.interception-tools-plugins.caps2esc}&#x2F;bin&#x2F;caps2esc -m 1 |
&lt;&#x2F;span&gt;&lt;span&gt;              ${uinput} -d $DEVNODE&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        DEVICE:
&lt;&#x2F;span&gt;&lt;span&gt;          EVENTS:
&lt;&#x2F;span&gt;&lt;span&gt;            EV_KEY: [KEY_CAPSLOCK, KEY_ESC]
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s breakdown what&#x27;s happening here.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JOB&lt;&#x2F;code&gt; defines a processing pipeline for input events. Each matching device runs
this chain of commands.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;${intercept} -g $DEVNODE&lt;&#x2F;code&gt; reads events from the input device&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;intercept&lt;&#x2F;code&gt; is the main input capture tool&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-g&lt;&#x2F;code&gt; ensures the device stays grabbed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;caps2esc -m 1&lt;&#x2F;code&gt; is what actually transform the Caps Lock input into our dual
behavior&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Tap&#x2F;Press = Escape&lt;&#x2F;li&gt;
&lt;li&gt;Hold = Control&lt;&#x2F;li&gt;
&lt;li&gt;Note - Control is only emitted if another key is pressed. holding Caps Lock
will not simply emit Control&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;${input} -d $DEVNODE&lt;&#x2F;code&gt; writes the transformed input back into the system using
&lt;code&gt;uinput&lt;&#x2F;code&gt; kernel device&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DEVICE&lt;&#x2F;code&gt; block filters which devices this pipelines applies to.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EV_KEY: [KEY_CAPSLOCK, KEY_ESC]&lt;&#x2F;code&gt; means this only runs for devices that emit
Caps Locks or Escape key events&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In short, this config captures raw key events for Caps Lock and Escape,
transforms them using the caps2esc plugin, and injects the new behavior back
into the system -- all at a low level that works across Wayland, X11, and even
TTYs.&lt;&#x2F;p&gt;
&lt;p&gt;The above is stored in a separate NixOS module and then imported in my main
configuration:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;imports =
&lt;&#x2F;span&gt;&lt;span&gt;  [ # Include the results of the hardware scan.
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;etc&#x2F;nixos&#x2F;hardware-configuration.nix
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;etc&#x2F;nixos&#x2F;modules&#x2F;interception-caps.nix
&lt;&#x2F;span&gt;&lt;span&gt;  ];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;idle-and-lock&quot;&gt;Idle and Lock&lt;&#x2F;h3&gt;
&lt;p&gt;Next, we will set our machine up to first lock, then power the screen down after
a certain amount of idle time.&lt;&#x2F;p&gt;
&lt;p&gt;This is done using Hyprland companion packages, &lt;code&gt;hyprlock&lt;&#x2F;code&gt; and &lt;code&gt;hypridle&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can install those by adding them to your package list:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;environment.systemPackages = with pkgs; [
&lt;&#x2F;span&gt;&lt;span&gt;  hypridle
&lt;&#x2F;span&gt;&lt;span&gt;  hyprlock
&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;hyperidle&quot;&gt;Hyperidle&lt;&#x2F;h4&gt;
&lt;p&gt;Save this config as:
&lt;code&gt;~&#x2F;dotfiles&#x2F;hypr&#x2F;hypridle.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here is my current setup:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;general {
&lt;&#x2F;span&gt;&lt;span&gt;    lock_cmd = hyprlock
&lt;&#x2F;span&gt;&lt;span&gt;    before_sleep_cmd = hyprlock
&lt;&#x2F;span&gt;&lt;span&gt;    after_sleep_cmd = hyprctl dispatch dpms on
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;listener {
&lt;&#x2F;span&gt;&lt;span&gt;    timeout = 300
&lt;&#x2F;span&gt;&lt;span&gt;    on-timeout = hyprlock
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;listener {
&lt;&#x2F;span&gt;&lt;span&gt;    timeout = 330
&lt;&#x2F;span&gt;&lt;span&gt;    on-timeout = hyprctl dispatch dpms off
&lt;&#x2F;span&gt;&lt;span&gt;    on-resume = hyprctl dispatch dpms on
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is telling &lt;code&gt;hypridle&lt;&#x2F;code&gt; to run &lt;code&gt;hyprlock&lt;&#x2F;code&gt; as the lock_cmd and right before sleep.
Then after we wake, use hyprctl to turn the monitor back on.&lt;&#x2F;p&gt;
&lt;p&gt;Then we set up a few simple listeners. The first one is for 300 seconds (5
minutes) and simply runs &lt;code&gt;hyprlock&lt;&#x2F;code&gt; on-timeout. Then, I have another for 330
seconds (5 minutes 30 seconds) that will shut my monitor off on-timeout, and turn
it back on after resuming.&lt;&#x2F;p&gt;
&lt;p&gt;Reload hypr conf with &lt;code&gt;hyprctl reload&lt;&#x2F;code&gt; and you should now have a functioning
idle and lock screen.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;hyperlock&quot;&gt;Hyperlock&lt;&#x2F;h4&gt;
&lt;p&gt;Note: Hyprlock does not automatically create a config, and without one,
&lt;code&gt;hyprlock&lt;&#x2F;code&gt; will not render anything, meaning you will just see your screen, but
it will be locked -- you will not be able to interact with it again until you
enter your password and hit Enter.&lt;&#x2F;p&gt;
&lt;p&gt;We are also able to customize our lock screen some. This config will also
live in the same directory as the other hyprland config files.
&lt;code&gt;~&#x2F;dotfiles&#x2F;hypr&#x2F;hyprlock.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Below is an example of mine. It looks similar to css styling but not exactly.&lt;&#x2F;p&gt;
&lt;p&gt;Here, I&#x27;m setting up a simple background color, an input field with a border,
and a label that just outputs the time. I like to keep mine simple but you can
add a background image, move the input box around, and do a lot more than I am.&lt;&#x2F;p&gt;
&lt;p&gt;You can find more in the docs
&lt;a href=&quot;https:&#x2F;&#x2F;wiki.hypr.land&#x2F;Hypr-Ecosystem&#x2F;hyprlock&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;. It covers all the
available elements you can use to style your Hyprlock screen.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;background {
&lt;&#x2F;span&gt;&lt;span&gt;    color = rgb(282828)  # Gruvbox dark background
&lt;&#x2F;span&gt;&lt;span&gt;    blur_passes = 0
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;input-field {
&lt;&#x2F;span&gt;&lt;span&gt;    font_color = rgb(ebdbb2)
&lt;&#x2F;span&gt;&lt;span&gt;    inner_color = rgb(282828) # Slightly lighter than background
&lt;&#x2F;span&gt;&lt;span&gt;    outer_color = rgb(928374)
&lt;&#x2F;span&gt;&lt;span&gt;    outline_thickness = 3
&lt;&#x2F;span&gt;&lt;span&gt;    size = 500, 50
&lt;&#x2F;span&gt;&lt;span&gt;    position = 0, -33%
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;label {
&lt;&#x2F;span&gt;&lt;span&gt;    text = cmd[update:1000] echo &amp;quot;&amp;lt;b&amp;gt;&amp;lt;big&amp;gt; $(date +&amp;quot;%H:%M:%S&amp;quot;) &amp;lt;&#x2F;big&amp;gt;&amp;lt;&#x2F;b&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    color = rgb(ebdbb2)
&lt;&#x2F;span&gt;&lt;span&gt;    font_size = 32
&lt;&#x2F;span&gt;&lt;span&gt;    position = 0, 0
&lt;&#x2F;span&gt;&lt;span&gt;    valign = center
&lt;&#x2F;span&gt;&lt;span&gt;    halign = center
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After adding both files, remember to run &lt;code&gt;dotter deploy&lt;&#x2F;code&gt;. This will add symlinks
for our newly added files to our correct Hyprland config directory by default
based on our Dotter config.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fun-fact&quot;&gt;Fun Fact&lt;&#x2F;h3&gt;
&lt;p&gt;This post was written from NixOS!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h3&gt;
&lt;p&gt;In this post, we have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Configured some muscle memory engraved key remappings including:
&lt;ul&gt;
&lt;li&gt;Caps Lock -&amp;gt; Esc when pressed&lt;&#x2F;li&gt;
&lt;li&gt;Caps Lock -&amp;gt; Control when held (and another key is pressed)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Setup &lt;code&gt;hypridle&lt;&#x2F;code&gt; to lock out computer after 5 minutes then turn the screen off
30 seconds after that.&lt;&#x2F;li&gt;
&lt;li&gt;Styled a simple &lt;code&gt;hyprlock&lt;&#x2F;code&gt; screen that shows the time and an input box for our
password&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;next-time&quot;&gt;Next Time&lt;&#x2F;h3&gt;
&lt;p&gt;Next time will be all about development work. We will introduce Nixvim and
&lt;code&gt;nix shell&lt;&#x2F;code&gt;. Nix shells are development environments you can set up via config.
They are very powerful and make developing on NixOS much easier.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Fairway Client Not Fair Enough for MyFrisbee</title>
          <pubDate>Sun, 06 Jul 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/fairway-client-not-fair-enough/</link>
          <guid>https://jakegoldsborough.com/blog/2025/fairway-client-not-fair-enough/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/fairway-client-not-fair-enough/">&lt;h3 id=&quot;takedown-request&quot;&gt;Takedown Request&lt;&#x2F;h3&gt;
&lt;p&gt;Recently, I&#x27;ve been writing about reverse engineering a unique data
structure I found while investigating the UDisc web app. I also created
a free and open source library called Fairway Client. It&#x27;s a fair way for
accessing UDisc&#x27;s &lt;code&gt;.data&lt;&#x2F;code&gt; endpoints - the same ones their own web app uses.
These are public, unauthenticated endpoints available to any browser.&lt;&#x2F;p&gt;
&lt;p&gt;The only intent was curiosity and a belief in open, user-accessible data
and software. People have asked for this kind of access before, and
UDisc has repeatedly said no. So I decided to see for myself. The data
was right there - how hard could it be?&lt;&#x2F;p&gt;
&lt;p&gt;Turns out, not very.&lt;&#x2F;p&gt;
&lt;p&gt;Much of this data is &lt;strong&gt;user-submitted&lt;&#x2F;strong&gt;, and in some cases, &lt;strong&gt;user-paid&lt;&#x2F;strong&gt;.
UDisc does offer a CSV export, but come on - programming is about
automation, not downloading spreadsheets.&lt;&#x2F;p&gt;
&lt;p&gt;I posted about my findings and tools on the UDisc forum. That didn&#x27;t go
well. First, I didn&#x27;t realize posts were moderated so my comment never got
posted and that&#x27;s on me. Second, they weren&#x27;t pleased. I received a sternly
worded email asking me to remove both the blog series and the codebase.&lt;&#x2F;p&gt;
&lt;p&gt;I wasn&#x27;t sure what to expect - but I was still disappointed.
I was hoping for curiosity, maybe even appreciation.
Instead, I got a takedown request.&lt;&#x2F;p&gt;
&lt;p&gt;They cited their ToS, but if offering a clean, read-only interface to user-owned
public data violates the ToS, maybe it&#x27;s the ToS that is wrong.&lt;&#x2F;p&gt;
&lt;p&gt;The the code is down. I will be obscuring the posts to not reveal details but I
have spent time and effort on them so they will be staying up in some form.&lt;&#x2F;p&gt;
&lt;p&gt;It might be time to give disc golf metrix a shot:
&lt;a href=&quot;https:&#x2F;&#x2F;discgolfmetrix.com&#x2F;&quot;&gt;https:&#x2F;&#x2F;discgolfmetrix.com&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT Changelog - 27&#x2F;52</title>
          <pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-27/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-27/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-27/">&lt;h3 id=&quot;nixos-nixvim-work&quot;&gt;NixOS &amp;amp; NixVim Work&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed issues with &lt;code&gt;interception&lt;&#x2F;code&gt; and remapping caps lock to esc on tap
and ctrl on hold&lt;&#x2F;li&gt;
&lt;li&gt;Investigated how to migrate from LazyVim to NixVim in a non-flake setup and
how to modularize configuration.&lt;&#x2F;li&gt;
&lt;li&gt;Installed Starship and worked through integration with Nushell on NixOS,
resolving autocomplete issues related to Carapace and Fish.&lt;&#x2F;li&gt;
&lt;li&gt;PipeWire was installed and CLI methods for inspecting its settings were
explored.&lt;&#x2F;li&gt;
&lt;li&gt;Requested a developer-friendly NixVim config with completions and LSP support
for both Node.js and Rust.&lt;&#x2F;li&gt;
&lt;li&gt;Compared nix-shell and flakes, with interest in setting up per-project
environments for tools like Zola, Node, and Rust.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;udisc-reverse-engineering&quot;&gt;UDisc Reverse Engineering&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Public GitHub repo and blog posts were removed following a takedown request
from UDisc. Redacted versions will be reposted later.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;etsy-and-woodworking&quot;&gt;Etsy and Woodworking&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Added chunky maple cooking utensil&lt;&#x2F;li&gt;
&lt;li&gt;Added 4 piece mixed hardwood coaster set&lt;&#x2F;li&gt;
&lt;li&gt;Working on utensil rest&lt;&#x2F;li&gt;
&lt;li&gt;Working on guitar body&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;personal&quot;&gt;Personal&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Swedish learning streak hit 198 days&lt;&#x2F;li&gt;
&lt;li&gt;Received an offer letter!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>NixOS as a daily driver or Zero to Nixty, part 4&#x2F;? - dotfile&#x2F;config management</title>
          <pubDate>Fri, 27 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-4/</link>
          <guid>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-4/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/nixos-daily-driver-4/">&lt;h3 id=&quot;from-tty-to-tiling&quot;&gt;From TTY to Tiling&lt;&#x2F;h3&gt;
&lt;p&gt;In the last post, we enabled Hyprland and set it to run by default on login.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, we will be taking a slight detour and will be going over how to
manage your NixOS config in version control. This step might be overkill for
some but it makes it so we can easily checkout our config on any machine and
have a working NixOS install fairly quickly.&lt;&#x2F;p&gt;
&lt;p&gt;We will also cover a little Hyprland config at the end.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;introducing-dotter&quot;&gt;Introducing Dotter&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SuperCuber&#x2F;dotter&quot;&gt;Dotter&lt;&#x2F;a&gt; is a dotfile manager and templater.&lt;&#x2F;p&gt;
&lt;p&gt;You have a repo of dotfiles and two main config files:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;.dotter&#x2F;global.toml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;global config where you define &quot;modules&quot; and tell Dotter how to handle
copying config.&lt;&#x2F;li&gt;
&lt;li&gt;commit to version control&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;.dotter&#x2F;local.toml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Per machine file that tells dotter which config to load. The idea being
you may have different config needs for linux, macos, or windows.&lt;&#x2F;li&gt;
&lt;li&gt;This file is not committed to git because local lets you switch configs
per machine without affecting version control&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Add a &lt;code&gt;.gitignore&lt;&#x2F;code&gt; if not already present.
Add a new line:
&lt;code&gt;.dotter&#x2F;local.toml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After configuring everything, you simply run &lt;code&gt;dotter deploy&lt;&#x2F;code&gt; and the config
files are copied to the locations set in &lt;code&gt;global.toml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a great project and I highly recommend it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;moving-nixos-config-to-dotfiles-repo&quot;&gt;Moving NixOS Config to Dotfiles Repo&lt;&#x2F;h3&gt;
&lt;p&gt;The first thing we&#x27;ll do is add a new directory in our dotfile repo. Then
we&#x27;ll need to open up our &lt;code&gt;.dotter&#x2F;global.toml&lt;&#x2F;code&gt; file and add our NixOS config
paths. That looks like this for me:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[nixos.files]
&lt;&#x2F;span&gt;&lt;span&gt;nixos = &amp;#39;&#x2F;etc&#x2F;nixos&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In Dotter talk, this is setting up a &quot;module&quot; named &lt;code&gt;nixos&lt;&#x2F;code&gt;. We are telling Dotter
that this module&#x27;s files will be located in the &lt;code&gt;nixos&lt;&#x2F;code&gt; folder and need to be
copied to &lt;code&gt;&#x2F;etc&#x2F;nixos&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now you will need to move the current NixOS config from
&lt;code&gt;&#x2F;etc&#x2F;nixos&#x2F;configuration.nix&lt;&#x2F;code&gt; to your new &lt;code&gt;nixos&lt;&#x2F;code&gt; folder.&lt;&#x2F;p&gt;
&lt;p&gt;One other step will be to allow writes to your &lt;code&gt;&#x2F;etc&#x2F;nixos&lt;&#x2F;code&gt; dir by running
&lt;code&gt;sudo chmod o+w &#x2F;etc&#x2F;nixos&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One important configuration option to mention for Dotter is the
&lt;code&gt;default_target_type&lt;&#x2F;code&gt;. Because of the template functionality of Dotter,
it can either physically copy your config, or simply create a symlink.&lt;&#x2F;p&gt;
&lt;p&gt;I prefer symlinks by default so I use this config option. In &lt;code&gt;global.toml&lt;&#x2F;code&gt;, I
set the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[settings]
&lt;&#x2F;span&gt;&lt;span&gt;default_target_type = &amp;#39;symbolic&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;More info about that can be found in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SuperCuber&#x2F;dotter&#x2F;wiki&#x2F;5.-Built%E2%80%90ins,-Helpers,-and-Settings#settings&quot;&gt;Dotter wiki&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you plan to use symlinks with Dotter, you will need to open up
&lt;code&gt;nixos&#x2F;configuration.nix&lt;&#x2F;code&gt; and make the &lt;code&gt;hardware-configuration.nix&lt;&#x2F;code&gt; import
an absolute path instead of relative path.&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# nixos&#x2F;configuration.nix
&lt;&#x2F;span&gt;&lt;span&gt;{ config, pkgs, ... }:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  imports =
&lt;&#x2F;span&gt;&lt;span&gt;    [ &#x2F;etc&#x2F;nixos&#x2F;hardware-configuration.nix ];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You will also need to add your &lt;code&gt;.dotter&#x2F;local.toml&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;That will look something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;packages = [
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;cmus&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;git&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;hypr&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;nvim&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;nushell&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;starship&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;waybar&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;wezterm&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;wofi&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is telling Dotter which of the &quot;packages&quot; in your &lt;code&gt;global.toml&lt;&#x2F;code&gt; should be
copied. This helps allow us to define our complete config in one repo even if
every host doesn&#x27;t use every package. Each host will have a &lt;code&gt;local.toml&lt;&#x2F;code&gt; that
copies specific packages.&lt;&#x2F;p&gt;
&lt;p&gt;Now it&#x27;s finally time to run &lt;code&gt;dotter deploy&lt;&#x2F;code&gt;. This will do the important step
of taking our local dotfiles and copying (or symlinking) to the dirs we
specified. After running that command, you will see
&lt;code&gt;&#x2F;etc&#x2F;nixos&#x2F;configuration.nix&lt;&#x2F;code&gt; is present again.&lt;&#x2F;p&gt;
&lt;p&gt;The moment of truth, time to rebuild. You can start by doing a dry run
&lt;code&gt;sudo nixos-rebuild dry-activate&lt;&#x2F;code&gt;. This will build the system and tell you what
would happen. If that goes well, run &lt;code&gt;sudo nixos-rebuild switch&lt;&#x2F;code&gt;. NixOS gives a lot
of protection around broken config so it&#x27;s unlikely anything should break here
and if it does, there will be an error that tells you why.&lt;&#x2F;p&gt;
&lt;p&gt;Commit your configuration file and merge your branch back to &lt;code&gt;main&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;adding-hyprland-config-to-dotfiles-repo&quot;&gt;Adding Hyprland Config to Dotfiles Repo&lt;&#x2F;h3&gt;
&lt;p&gt;We are now going to do the same with our &lt;code&gt;Hyprland&lt;&#x2F;code&gt; config. The steps are pretty
much the same minus some &lt;code&gt;chmod&lt;&#x2F;code&gt; and file path updates.&lt;&#x2F;p&gt;
&lt;p&gt;First, create a new branch and check it out. Then we create a new directory that
I simply called &lt;code&gt;hypr&lt;&#x2F;code&gt;. Next, copy the current &lt;code&gt;Hyprland&lt;&#x2F;code&gt; config from
&lt;code&gt;~&#x2F;.config&#x2F;hypr&lt;&#x2F;code&gt; into this new dir.&lt;&#x2F;p&gt;
&lt;p&gt;Now we will need to add a little Dotter config:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[hypr.files]
&lt;&#x2F;span&gt;&lt;span&gt;hypr = &amp;#39;~&#x2F;.config&#x2F;hypr&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, in Dotter talk, we are creating a &lt;code&gt;hypr&lt;&#x2F;code&gt; module. Then we tell Dotter that
any files in our local &lt;code&gt;hypr&lt;&#x2F;code&gt; dir need to be copied to &lt;code&gt;~&#x2F;.config&#x2F;hypr&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now it&#x27;s time to run &lt;code&gt;dotter deploy&lt;&#x2F;code&gt;. This will do the step of copying our
local config to the correct path in &lt;code&gt;~&#x2F;.config&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Confirm that file got copied and then run &lt;code&gt;hyprctl reload&lt;&#x2F;code&gt; to reload the &lt;code&gt;hypr&lt;&#x2F;code&gt;
config.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;congrats-on-version-controlled-config&quot;&gt;Congrats On Version Controlled Config&lt;&#x2F;h3&gt;
&lt;p&gt;Your dotfile repo should now look something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;dotfiles&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── .dotter&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── global.toml
&lt;&#x2F;span&gt;&lt;span&gt;│   └── local.toml
&lt;&#x2F;span&gt;&lt;span&gt;├── hypr&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   └── hyprland.conf
&lt;&#x2F;span&gt;&lt;span&gt;└── nixos&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    └── configuration.nix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have now added two sets of our config into version control. This will allow
us to easily pass around our config to a new machine if needed, especially with
NixOS and it&#x27;s declarative config.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;next-time&quot;&gt;Next Time&lt;&#x2F;h3&gt;
&lt;p&gt;In the next post, I plan to get back to actually setting up NixOS for daily driver
use. This will probably include some &lt;code&gt;hypr&lt;&#x2F;code&gt; config and introducing Nixvim. Nixvim
is a way to manage your neovim plugins in a NixOS-y way.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT Changelog (fka Weekly Summary) - 26&#x2F;52</title>
          <pubDate>Fri, 27 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-26/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-26/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-26/">&lt;h2 id=&quot;nixos-workflow-improvements&quot;&gt;NixOS Workflow &amp;amp; Improvements&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Refined NixOS development workflow by exploring the use of &lt;code&gt;nix-shell&lt;&#x2F;code&gt;
and Flakes for environment isolation and reproducibility. Discussed how to
structure shell files for separate projects (e.g. Rust&#x2F;Zola vs. Node).&lt;&#x2F;li&gt;
&lt;li&gt;Discovered how tools like &lt;code&gt;rustup&lt;&#x2F;code&gt; and &lt;code&gt;volta&lt;&#x2F;code&gt; behave in Nix environments.
You acknowledged that &lt;code&gt;nix-shell&lt;&#x2F;code&gt; helps contain them safely, but the
Nix-native approach may still be preferable long term.&lt;&#x2F;li&gt;
&lt;li&gt;Cleaned up a bug with &lt;code&gt;nixvim&lt;&#x2F;code&gt; setup by updating to the latest
version and resolving a plugin rename (&lt;code&gt;coedium-vim&lt;&#x2F;code&gt; ➝ &lt;code&gt;windsurf&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Added Blueman via Nix, and experimented with different ways to start Waybar
without tying up terminal (eventually using &lt;code&gt;hyprctl dispatch exec&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Successfully reversed trackpad scroll direction in Hyprland using overrides,
and this worked well across setup.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;gitvote-gpg-work&quot;&gt;GitVote &amp;amp; GPG Work&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Progressed &lt;code&gt;gitvote&lt;&#x2F;code&gt; CLI and backend significantly:
&lt;ul&gt;
&lt;li&gt;Implemented registration and GPG signature support.&lt;&#x2F;li&gt;
&lt;li&gt;Verified that voting model and simulation strategy still worked.&lt;&#x2F;li&gt;
&lt;li&gt;Explored commit signing, storing keys in-repo, and ensuring modular CLI
support for different user flows.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Began planning for how to handle edge cases like simultaneous votes and
eventually tallying.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;blogging-writing&quot;&gt;Blogging &amp;amp; Writing&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Continued work on NixOS daily driver series, planning to document how to
set up Dotter and Hyprland cleanly from scratch before layering more config.&lt;&#x2F;li&gt;
&lt;li&gt;Reflected on privacy-focused analytics post, considering how to improve
tracking and discussing stance on respecting blockers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;udisc-api-wrapper-library&quot;&gt;UDisc API &amp;amp; Wrapper Library&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Worked on orchestration pattern for the TypeScript &lt;code&gt;UDiscAPI&lt;&#x2F;code&gt; class,
ensuring everything flows through a clean and testable interface.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Removed unnecessary &lt;code&gt;loadFromFile&lt;&#x2F;code&gt; logic and moved toward using raw JSON
inputs with explicit route extraction.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Streamlined the construction flow:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;const udisc = new UDisc();
&lt;&#x2F;span&gt;&lt;span&gt;const schemaMap = udisc.extractSchemaMap(raw);
&lt;&#x2F;span&gt;&lt;span&gt;const eventListings = udisc.resolveKeyValuePairs(&amp;#39;eventListing&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;personal-progress&quot;&gt;Personal Progress&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Maintained streak of learning Swedish — now at 193 days in a row. Mostly
review. Need to listen to more podcasts&#x2F;books again.&lt;&#x2F;li&gt;
&lt;li&gt;Only played one round of disc golf this week&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>How I accidentally wrote my first Neovim plugin</title>
          <pubDate>Wed, 25 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/releasing-a-neovim-plugin/</link>
          <guid>https://jakegoldsborough.com/blog/2025/releasing-a-neovim-plugin/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/releasing-a-neovim-plugin/">&lt;h3 id=&quot;just-show-me-the-code&quot;&gt;Just Show Me The Code&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;nvim-vandelay&quot;&gt;repo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h3&gt;
&lt;p&gt;There is a simple motion I use in Neovim often and I finally decided to do
something about it.&lt;&#x2F;p&gt;
&lt;p&gt;That motion is breaking up single line imports into multiline imports.&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;p&gt;This:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;import { foo, bar, baz } from &#x27;.&#x2F;utils&#x27;;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Should become:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;import {
&lt;&#x2F;span&gt;&lt;span&gt;  foo,
&lt;&#x2F;span&gt;&lt;span&gt;  bar,
&lt;&#x2F;span&gt;&lt;span&gt;  baz,
&lt;&#x2F;span&gt;&lt;span&gt;} from &amp;#39;.&#x2F;utils&amp;#39;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s a tiny thing but something I do all the time in javascript, typescript, and
rust. Even if it&#x27;s less than 80 characters wide, I really like breaking multiple
modules imports down to separate lines.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-first-approach-regex-and-why-it-worked&quot;&gt;The First Approach: Regex (And Why It Worked)&lt;&#x2F;h3&gt;
&lt;p&gt;The very first version of Vandelay used simple Lua string matching:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;local pattern = [[import%s*{%s*(.-)%s*}%s*from%s*(.*);]]
&lt;&#x2F;span&gt;&lt;span&gt;local names, from = string.match(line, pattern)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This captured two groups:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;names&lt;&#x2F;code&gt; - the full list inside &lt;code&gt;{ ... }&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;from&lt;&#x2F;code&gt; - the source string&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After capturing, it simply:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Split &lt;code&gt;names&lt;&#x2F;code&gt; on commas into a table of individual imports&lt;&#x2F;li&gt;
&lt;li&gt;Trimmed whitespace&lt;&#x2F;li&gt;
&lt;li&gt;Reconstructed the formatted import line with newlines and indentation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;why-it-worked&quot;&gt;Why It Worked&lt;&#x2F;h4&gt;
&lt;p&gt;The format of imports I wanted to modify was extremely predictable. I only cared
about one specific form and I was only operating on one line at a time. Lua
strings were simple and fast for this very specific case. This worked extremely
well from the start and passed some simple tests that tests import structure.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;adding-treesitter-and-why-it-didn-t-work&quot;&gt;Adding Treesitter (And Why It Didn&#x27;t Work)&lt;&#x2F;h3&gt;
&lt;p&gt;I thought using Treesitter would make the plugin more robust. It sounded like a
perfect fit: parse the full AST, extract imports properly, and avoid relying on
fragile string patterns.&lt;&#x2F;p&gt;
&lt;p&gt;In practice, I quickly ran into problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Complex Treesitter queries for what seemed like simple tasks&lt;&#x2F;li&gt;
&lt;li&gt;Accidental full-line and full-file rewrites when I only wanted to touch one line&lt;&#x2F;li&gt;
&lt;li&gt;Query capture ordering issues that merged unrelated imports together&lt;&#x2F;li&gt;
&lt;li&gt;Inconsistent grammar across different Treesitter parser versions&lt;&#x2F;li&gt;
&lt;li&gt;Parser installation requirements that added more dependencies&lt;&#x2F;li&gt;
&lt;li&gt;Much more boilerplate code for very minimal benefit&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Treesitter excels for full-file refactors, linters, or analysis tools.
But for surgical, highly structured, one-line rewrites? It was overkill.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-i-learned&quot;&gt;What I Learned&lt;&#x2F;h3&gt;
&lt;p&gt;Treesitter is powerful. But &lt;strong&gt;power doesn’t always equal simplicity&lt;&#x2F;strong&gt; —
especially for narrowly scoped formatting tasks.&lt;&#x2F;p&gt;
&lt;p&gt;For this plugin, regex provided:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Faster iteration&lt;&#x2F;li&gt;
&lt;li&gt;Predictable behavior&lt;&#x2F;li&gt;
&lt;li&gt;No parser dependencies&lt;&#x2F;li&gt;
&lt;li&gt;Simple implementation&lt;&#x2F;li&gt;
&lt;li&gt;Easier testing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Sometimes simple string matching really is enough -- especially when your input
format is highly constrained.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nvim-vandelay-1-0&quot;&gt;nvim-vandelay 1.0&lt;&#x2F;h3&gt;
&lt;p&gt;The end result became &lt;code&gt;nvim-vandelay&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A micro-plugin for formatting imports&lt;&#x2F;li&gt;
&lt;li&gt;Fully manual keybind control&lt;&#x2F;li&gt;
&lt;li&gt;Regex-powered single-line rewriting&lt;&#x2F;li&gt;
&lt;li&gt;Rust and JavaScript support out of the box&lt;&#x2F;li&gt;
&lt;li&gt;Fully tested via Plenary + CI&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is another link to the repo:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;nvim-vandelay&quot;&gt;nvim-vandelay&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Introducing Shelltrax - Or how I vibe programmed my way to a TUI music player</title>
          <pubDate>Tue, 24 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/introducing-shelltrax/</link>
          <guid>https://jakegoldsborough.com/blog/2025/introducing-shelltrax/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/introducing-shelltrax/">&lt;h3 id=&quot;shelltrax&quot;&gt;Shelltrax&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;shelltrax&quot;&gt;github&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;shelltrax-1.png&quot; alt=&quot;A screenshot showing a libray view of a CLI music player&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I love the terminal and have dabbled in Rust since the very early days. I&#x27;ve
been to 5 RustConfs, but my actual knowledge of Rust never really went past the
basics. I come from a scripted language background, so while I &lt;em&gt;understood&lt;&#x2F;em&gt; the
ideas, I didn&#x27;t really understand them in practice -- mostly because I hadn&#x27;t
personally suffered the pain points Rust tries to solve.&lt;&#x2F;p&gt;
&lt;p&gt;The only way for me to truly understand was to build something real. Not
another tutorial. Not another toy example. Something I&#x27;d actually use.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cmus&quot;&gt;cmus&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cmus.github.io&#x2F;&quot;&gt;cmus&lt;&#x2F;a&gt; is a small, &lt;em&gt;fast&lt;&#x2F;em&gt;, and powerful console
music player for Unix-like operating systems and it&#x27;s easily one of the apps
I use most.&lt;&#x2F;p&gt;
&lt;p&gt;And like I mentioned above, I learn best by writing real tools so
why not try to recreate one of my daily drivers? It seemed like the perfect mix
of things to learn: input handling, TUI design, file scanning, metadata parsing,
and real-time playback.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stack-and-structure&quot;&gt;Stack and Structure&lt;&#x2F;h3&gt;
&lt;p&gt;I tried to keep the stack small, modern, and as &quot;Rust-native&quot; as possible:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ratatui&lt;&#x2F;code&gt; - TUI layout and rendering&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;crossterm&lt;&#x2F;code&gt; - keyboard input handling and terminal backend&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;walkdir&lt;&#x2F;code&gt; - recursive file scanning and directory walking&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;id3v2&lt;&#x2F;code&gt; and &lt;code&gt;symphonia&lt;&#x2F;code&gt; - parsing audio metadata (ID3, Vorbis, FLAC, etc)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rodio&lt;&#x2F;code&gt; - audio playback&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Together, these gave me a good spread of &quot;real&quot; Rust problems to tackle:
filesystems, decoding binary formats, audio streaming, real-time UI state, and
concurrency.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;interface-design&quot;&gt;Interface Design&lt;&#x2F;h3&gt;
&lt;p&gt;From the start, I wanted it to feel very simple.&lt;&#x2F;p&gt;
&lt;p&gt;The interface is split into a few key views:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;library view&lt;&#x2F;strong&gt;, where I can browse artists, albums, and tracks&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;strong&gt;file browser&lt;&#x2F;strong&gt;, which lets me scan new folders and import music to the
library&lt;&#x2F;li&gt;
&lt;li&gt;A persistent &lt;strong&gt;footer&lt;&#x2F;strong&gt;, showing the current track, album, artist and a
real-time progress bar while the song plays&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Even building that much required learning how to manage state in a long-running
TUI app, wire up input handling with &lt;code&gt;crossterm&lt;&#x2F;code&gt;, and keep the UI responsive
while streaming audio in the background.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-s-working&quot;&gt;What&#x27;s Working&lt;&#x2F;h3&gt;
&lt;p&gt;Despite starting this as mostly an experiment to learn Rust, I now have a music player that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Scans my local library for FLAC and MP3 files&lt;&#x2F;li&gt;
&lt;li&gt;Parses metadata (title, album, artist, album artist, etc) correctly using Symphonia&lt;&#x2F;li&gt;
&lt;li&gt;Sorts and groups tracks by album artist for proper browsing&lt;&#x2F;li&gt;
&lt;li&gt;Supports autoplay, automatically advancing to the next track&lt;&#x2F;li&gt;
&lt;li&gt;Displays a footer with current song info and a live progress bar&lt;&#x2F;li&gt;
&lt;li&gt;Supports pause and resume functionality with synchronized playback state&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It&#x27;s already become my daily music player, replacing cmus for my listening.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;shelltrax-2.png&quot; alt=&quot;A screenshot showing a libray view of a CLI music player&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reflections&quot;&gt;Reflections&lt;&#x2F;h3&gt;
&lt;p&gt;The most valuable part of this project was finally experiencing what Rust is
really trying to protect you from.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shared state&lt;&#x2F;strong&gt;: Coordinating real-time playback state across multiple
threads (UI thread, playback thread, decode thread) forced me to actually
deal with ownership, borrowing, and synchronization directly.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Lifetimes&lt;&#x2F;strong&gt;: I finally had to understand where lifetimes mattered when
dealing with borrowed references and streaming APIs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Real-world edge cases&lt;&#x2F;strong&gt;: Dealing with weird metadata formats, malformed
files, and partial decode failures showed me how fragile real-world data can
be.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;ve read about these things for years, but building Shelltrax forced me to
feel the problems directly. That&#x27;s what finally made the learning click.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vibe-programming&quot;&gt;Vibe programming&lt;&#x2F;h3&gt;
&lt;p&gt;There&#x27;s a lot of discourse around &quot;vibe programming&quot; -- the idea of just writing
code by intuition, following your gut, and iteratively figuring it out as you
go. It sometimes gets a bad rap: &quot;You&#x27;re just hacking around without fully
understanding the language or design.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;But for me, vibe programming doesn&#x27;t mean ignoring fundamentals. It means
building something real, fast enough to stay motivated, but being careful
enough to stop and actually understand why something works (or why it doesn&#x27;t).&lt;&#x2F;p&gt;
&lt;p&gt;I could have read Rust books or done more exercises, but none of that would
have taught me what happens when a real audio stream crosses threads and you
forget to reset a state flag at just the right time. And I&#x27;ll be honest, I
didn&#x27;t magically learn Rust completely and know how to handle every situation
but I certainly have a much better idea than a few weeks ago.&lt;&#x2F;p&gt;
&lt;p&gt;Vibe programming can force you into real problems. If you stay curious and
careful, those problems become extremely effective teachers.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building a Fully Decentralized Voting System Using Just Git and Pull Requests</title>
          <pubDate>Mon, 23 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-a-voting-system-with-git/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-a-voting-system-with-git/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-a-voting-system-with-git/">&lt;h3 id=&quot;the-premise&quot;&gt;The Premise&lt;&#x2F;h3&gt;
&lt;p&gt;What if we could build a fully transparent, auditable, and tamper-evident
voting system -- without any servers, centralized backend, or traditional
databases?&lt;&#x2F;p&gt;
&lt;p&gt;The result is &lt;strong&gt;GitVote&lt;&#x2F;strong&gt; - a simple but powerful decentralized voting system
that uses nothing but Git, pull requests, and a little bit of Rust.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-git&quot;&gt;Why Git?&lt;&#x2F;h3&gt;
&lt;p&gt;Git already gives us:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A fully distributed ledger&lt;&#x2F;li&gt;
&lt;li&gt;Immutable commit history&lt;&#x2F;li&gt;
&lt;li&gt;Branching and merging workflows&lt;&#x2F;li&gt;
&lt;li&gt;Forking for isolated participant actions&lt;&#x2F;li&gt;
&lt;li&gt;Cryptographic integrity through hashes and signatures&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With all that, we&#x27;re part of the way to a blockchain.&lt;&#x2F;p&gt;
&lt;p&gt;I wondered if I could build a voting system where Git itself is the storage
layer, the consensus layer, and the audit trail.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-design&quot;&gt;The Design&lt;&#x2F;h3&gt;
&lt;p&gt;At a high level, GitVote works like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Proposals&lt;&#x2F;strong&gt; are created as dedicated Git branches&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Votes&lt;&#x2F;strong&gt; are submitted as files inside pull requests.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Voter ID&lt;&#x2F;strong&gt; is tied to each voter&#x27;s Git configuration (name and email)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Duplicate Voting&lt;&#x2F;strong&gt; is automatically prevented via CI checks&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Immutable blocks&lt;&#x2F;strong&gt; are built from merged votes using deterministic hashing&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Tally results&lt;&#x2F;strong&gt; can be generated entirely offline from the final ledger&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There&#x27;s no central database, API server, or backend. Everything happens inside
of Git.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-voting-flow&quot;&gt;The Voting Flow&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;proposal-creation&quot;&gt;Proposal Creation&lt;&#x2F;h4&gt;
&lt;p&gt;Each new proposal is created as a new Git branch, for example:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;proposal&#x2F;001-color-vote&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A simple &lt;code&gt;schema.json&lt;&#x2F;code&gt; file defines the allowed choices for that proposal:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;allowed&amp;quot;: [&amp;quot;blue&amp;quot;, &amp;quot;purple&amp;quot;, &amp;quot;green&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;voter-submission&quot;&gt;Voter Submission&lt;&#x2F;h4&gt;
&lt;p&gt;Voters follow this flow:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Fork the governance repo&lt;&#x2F;li&gt;
&lt;li&gt;Clone their fork locally&lt;&#x2F;li&gt;
&lt;li&gt;Checkout the correct proposal branch&lt;&#x2F;li&gt;
&lt;li&gt;Run GitVote CLI tool to cast their vote:
&lt;code&gt;gitvote cast --choice purple&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This will:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Write a new vote file into &lt;code&gt;votes&#x2F;&lt;&#x2F;code&gt; (one file per voter)&lt;&#x2F;li&gt;
&lt;li&gt;Commits the vote using their Git identity&lt;&#x2F;li&gt;
&lt;li&gt;Signs the commit (GPG coming soon)&lt;&#x2F;li&gt;
&lt;li&gt;Prepares the branch for submission&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Push their branch back to their fork&lt;&#x2F;li&gt;
&lt;li&gt;Open a pull request into the upstream proposal branch&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;vote-validation&quot;&gt;Vote Validation&lt;&#x2F;h4&gt;
&lt;p&gt;Every pull request triggers CI which runs:
&lt;code&gt;gitvote validate&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This will validate:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The vote file format&lt;&#x2F;li&gt;
&lt;li&gt;Compliance with the allowed schema&lt;&#x2F;li&gt;
&lt;li&gt;No duplicate voters (one voter, one vote)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Invalid votes fail the CI and will not be merged&lt;&#x2F;p&gt;
&lt;h4 id=&quot;merging-chain-building&quot;&gt;Merging &amp;amp; Chain Building&lt;&#x2F;h4&gt;
&lt;p&gt;Once a valid PR is merged, CI will automatically run:
&lt;code&gt;gitvote build-chain&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This scans all merged vote files and creates an immutable hash-linked chain
of blocks stored as plain JSON:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;blocks&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  block-0000.json
&lt;&#x2F;span&gt;&lt;span&gt;  block-0001.json
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each block includes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The vote choice&lt;&#x2F;li&gt;
&lt;li&gt;The voter identity&lt;&#x2F;li&gt;
&lt;li&gt;The original timestamp of the vote&lt;&#x2F;li&gt;
&lt;li&gt;The Cryptographic hash linking it to the previous block&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;tallying-votes&quot;&gt;Tallying Votes&lt;&#x2F;h4&gt;
&lt;p&gt;At any time, anyone can run:
&lt;code&gt;gitvote tally&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This reads the &lt;code&gt;blocks&#x2F;&lt;&#x2F;code&gt; directory and generates a full tally of the current vote
state:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Vote Tally:
&lt;&#x2F;span&gt;&lt;span&gt;  purple votes: 3
&lt;&#x2F;span&gt;&lt;span&gt;  red votes: 2
&lt;&#x2F;span&gt;&lt;span&gt;Total unique voters: 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;No external system is needed to calculate the results — everything lives
entirely inside Git.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-tech-stack&quot;&gt;The Tech Stack&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Rust for the core CLI, &lt;code&gt;gitvote&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Github Actions for CI validation and chain building&lt;&#x2F;li&gt;
&lt;li&gt;Git itself as the distributed backend&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;security&quot;&gt;Security&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Voter ID is tied to each user&#x27;s Git config (&lt;code&gt;user.name&lt;&#x2F;code&gt; and &lt;code&gt;user.email&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;CI fully enforces schema validation and prevents voter duplication&lt;&#x2F;li&gt;
&lt;li&gt;All votes are auditable forever via immutable commit history&lt;&#x2F;li&gt;
&lt;li&gt;The chain is fully deterministic and reproducible offline&lt;&#x2F;li&gt;
&lt;li&gt;The ledger can be archived back into &lt;code&gt;main&lt;&#x2F;code&gt; for permanent recordkeeping&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-benefits&quot;&gt;The Benefits&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Simplicity:&lt;&#x2F;strong&gt; No central server or complex infrastructure&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Transparency:&lt;&#x2F;strong&gt; Every vote and rule is visible to all voters&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Auditability:&lt;&#x2F;strong&gt; Anyone can verify the ledger at any time&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Offline verifiability:&lt;&#x2F;strong&gt; The full vote chain is just a Git repo&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;future-plans&quot;&gt;Future Plans&lt;&#x2F;h3&gt;
&lt;p&gt;There are a number of interesting enhancements that could be made here I think:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GPG signature enforcement&lt;&#x2F;li&gt;
&lt;li&gt;Anonymous but verifiable voting via zero-knowledge proofs&lt;&#x2F;li&gt;
&lt;li&gt;Weighted or ranked ballots&lt;&#x2F;li&gt;
&lt;li&gt;Multi-proposal governance workflow&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For now, GitVote is a minimal, functioning, fully decentralized voting system.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-code-demo&quot;&gt;The Code&#x2F;Demo&lt;&#x2F;h3&gt;
&lt;p&gt;You can find the CLI here:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;gitvote&quot;&gt;GitVote CLI&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can find a test governance repo here:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;gitvote-test&quot;&gt;gitvote-test&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;By going to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;gitvote-test&#x2F;actions&quot;&gt;actions&lt;&#x2F;a&gt;, you can
see the various CI workflows that run during the voting process.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;First, I submit a valid vote for &lt;strong&gt;purple&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Then, I attempt to vote again for &lt;strong&gt;green&lt;&#x2F;strong&gt;, which correctly fails
due to duplicate voter prevention&lt;&#x2F;li&gt;
&lt;li&gt;Finally, I simulate a new voter by spoofing a different Git identity (via
&lt;code&gt;git config&lt;&#x2F;code&gt;), submit a vote for &lt;strong&gt;blue&lt;&#x2F;strong&gt;, and the vote passes validation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;&#x2F;h3&gt;
&lt;p&gt;What originally started as an idea for &quot;Gitcoin&quot; and wanting to learn more
about blockchains turned into a fully functional, fully auditable governance
platform -- all built entirely on top of Git (and Rust).&lt;&#x2F;p&gt;
&lt;p&gt;It was pretty satisfying to turn pull requests, branch
protections, and hash-linked commits into a simple, verifiable voting process.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>The Accidental Complexity of Doing The Right Thing or The Pain of Setting Up Privacy-Focused Analytics (2025 Edition)</title>
          <pubDate>Sun, 22 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/the-pain-of-privacy-focused-analytics/</link>
          <guid>https://jakegoldsborough.com/blog/2025/the-pain-of-privacy-focused-analytics/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/the-pain-of-privacy-focused-analytics/">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h3&gt;
&lt;p&gt;As I&#x27;ve mentioned in the past, I’ve been writing and blogging more, and I
became curious if anyone was actually reading my posts.&lt;&#x2F;p&gt;
&lt;p&gt;Before I go any further, I need to make it clear that I am very
privacy-focused. I hate logging, tracking, fingerprinting, or any kind of
unnecessary data collection. A user’s data is theirs -- I have no interest in
storing anything about them. I just want a basic count of which pages are being
visited.&lt;&#x2F;p&gt;
&lt;p&gt;Naturally, I asked ChatGPT for recommendations based on my current setup.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m already using Caddy as my web server and TLS manager, so the first
suggestion was straightforward: just enable HTTP access logs and analyze them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;attempt-1-server-side-access-logs-caddy&quot;&gt;Attempt 1: Server-side access logs (Caddy)&lt;&#x2F;h3&gt;
&lt;p&gt;The basic flow here would be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;enable http logs in Caddy&lt;&#x2F;li&gt;
&lt;li&gt;scrape log file&lt;&#x2F;li&gt;
&lt;li&gt;count requests as rough pageviews&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In theory, this sounded perfect. I wasn’t looking for fancy dashboards or
detailed metrics -- just simple counts of which pages were being hit. Plain log
files should be more than enough.&lt;&#x2F;p&gt;
&lt;p&gt;Caddy, by default, doesn&#x27;t actually log HTTP requests unless you configure it
to. More surprisingly, in many builds of Caddy (especially those provided by
package managers), the &lt;code&gt;http.handlers.log&lt;&#x2F;code&gt; module isn’t even included.&lt;&#x2F;p&gt;
&lt;p&gt;At first I thought I was on the wrong version, but after some digging, I
realized that full HTTP access logging in Caddy requires building your own
custom binary with &lt;a href=&quot;https:&#x2F;&#x2F;caddyserver.com&#x2F;docs&#x2F;build#xcaddy&quot;&gt;&lt;code&gt;xcaddy&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to
enable the logging module. This felt like massive overkill for something as
basic as HTTP request logging.&lt;&#x2F;p&gt;
&lt;p&gt;After trying multiple versions, failing to get access logs working, and
realizing that Caddy’s modular architecture was actively getting in my way, I
gave up on this approach.&lt;&#x2F;p&gt;
&lt;p&gt;I asked ChatGPT for other options.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;attempt-2-goatcounter-via-docker&quot;&gt;Attempt 2: Goatcounter via Docker&lt;&#x2F;h3&gt;
&lt;p&gt;The next recommendation was to use a dedicated privacy-first analytics tool.
Several good open-source options exist:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arp242&#x2F;goatcounter&quot;&gt;GoatCounter&lt;&#x2F;a&gt;, Plausible, and Umami.&lt;&#x2F;p&gt;
&lt;p&gt;After doing a bit of research, GoatCounter stood out. It’s fully open-source,
extremely privacy-focused, lightweight, and seems purpose-built for people like
me who just want simple pageview counts without any tracking nonsense.&lt;&#x2F;p&gt;
&lt;p&gt;Even better, GoatCounter has Docker images available.&lt;&#x2F;p&gt;
&lt;p&gt;But of course — the Docker image that used to be hosted on Docker Hub was no
longer available. The project had moved its images to GitHub Container Registry
(GHCR), and GHCR was returning permission errors when I tried to pull the image
anonymously. Apparently GHCR increasingly requires authentication even for
public images, depending on Docker version, client configuration, and random
GitHub API mood swings.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;attempt-3-building-my-own-goatcounter-docker-image&quot;&gt;Attempt 3: Building my own Goatcounter Docker image&lt;&#x2F;h3&gt;
&lt;p&gt;After that, I decided to just build the image myself.&lt;&#x2F;p&gt;
&lt;p&gt;GoatCounter publishes a Dockerfile in the repo, so this should be
straightforward:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;arp242&#x2F;goatcounter.git
&lt;&#x2F;span&gt;&lt;span&gt;docker build -t goatcounter:local .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Dockerfile requires Docker BuildKit support, and uses newer Dockerfile
features like &lt;code&gt;--exclude&lt;&#x2F;code&gt;, which aren&#x27;t supported by Docker’s legacy builder. I
had to enable BuildKit, but enabling BuildKit required &lt;code&gt;docker-buildx&lt;&#x2F;code&gt;, which
wasn’t installed by default on my Arch system.&lt;&#x2F;p&gt;
&lt;p&gt;Once I installed &lt;code&gt;docker-buildx&lt;&#x2F;code&gt;, I ran the build again. This time, it started
pulling Go modules but failed with timeouts halfway through the build.&lt;&#x2F;p&gt;
&lt;p&gt;I retried. And retried. BuildKit timeouts, network flakiness, CDN rate limiting
-- you name it. What should have been a 30-second build turned into multiple
rounds of fighting with Docker’s build system and Go’s module proxy ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;At this point, Docker was no longer simplifying anything — it was actively
making everything worse.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;attempt-4-running-goatcounter-directly&quot;&gt;Attempt 4: Running GoatCounter directly&lt;&#x2F;h3&gt;
&lt;p&gt;By this point I was fully in &quot;I don’t even care anymore&quot; mode.&lt;&#x2F;p&gt;
&lt;p&gt;GoatCounter is a Go program that ships prebuilt binaries. I could just download
the standalone Linux binary and run it behind Caddy directly, without Docker at
all.&lt;&#x2F;p&gt;
&lt;p&gt;Except even that wasn&#x27;t as straightforward as it should have been.&lt;&#x2F;p&gt;
&lt;p&gt;The download URL on GitHub releases points to a gzip-compressed file. I
accidentally downloaded it and tried running it directly without decompressing
it first, leading to confusing shell errors (&quot;command not found&quot; as it tried to
parse the binary as text). Once I properly decompressed it, I finally had a
functioning ELF binary.&lt;&#x2F;p&gt;
&lt;p&gt;I ran &lt;code&gt;goatcounter serve&lt;&#x2F;code&gt;, initialized the SQLite database, and got it fully
running behind Caddy with one reverse proxy entry. TLS worked automatically,
and finally, my simple analytics system was live.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;observations&quot;&gt;Observations&lt;&#x2F;h3&gt;
&lt;p&gt;Docker was supposed to make self-hosting trivial. But broken registries,
permission issues, changing build standards, and fragmented tooling made things
much harder. Self-hosted projects often don&#x27;t have the resources to maintain
registry hosting, Docker images, and packaging across multiple platforms.
The friction involved in doing things ethically discourages people from even
trying privacy-respecting solutions.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s no surprise so many people just give up and paste Google Analytics into
their site -- it&#x27;s not better technology, it&#x27;s easier deployment.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;&#x2F;h3&gt;
&lt;p&gt;Privacy-first analytics tools absolutely exist — GoatCounter is an excellent
project, and I’m very happy with it now that it’s running.&lt;&#x2F;p&gt;
&lt;p&gt;But the tooling friction creates artificial barriers that discourage adoption.
Ironically, it&#x27;s often easier to deploy privacy-invasive analytics than
privacy-respecting ones.&lt;&#x2F;p&gt;
&lt;p&gt;There’s a huge opportunity here to improve the ecosystem:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Smarter build tooling&lt;&#x2F;li&gt;
&lt;li&gt;Better Docker automation&lt;&#x2F;li&gt;
&lt;li&gt;Easier packaging of self-hostable apps&lt;&#x2F;li&gt;
&lt;li&gt;(Maybe even a tool that turns install instructions into Dockerfiles
automatically — but that’s a post for another day...)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If we want ethical software to be the default, we need to make it easier, not
harder.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;edit-20250526&quot;&gt;Edit (20250526)&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;there-is-a-docker-image&quot;&gt;There &lt;strong&gt;IS&lt;&#x2F;strong&gt; a Docker Image&lt;&#x2F;h4&gt;
&lt;p&gt;Welp, naturally, after all of this — the registry issues, the broken builds, the
manual binary install — I found out &lt;em&gt;there is&lt;&#x2F;em&gt; a Docker image for GoatCounter:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;arp242&#x2F;goatcounter&quot;&gt;arp242&#x2F;goatcounter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;(Yes, maintained by the actual author.)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Apparently I was just one &lt;code&gt;docker pull&lt;&#x2F;code&gt; away the whole time.&lt;&#x2F;p&gt;
&lt;p&gt;:facepalm:&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>node-postgres-exporter — A Lightweight, Configurable PostgreSQL Prometheus Exporter</title>
          <pubDate>Fri, 20 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-node-postgres-exporter/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-node-postgres-exporter/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-node-postgres-exporter/">&lt;p&gt;I’m releasing a small project I’ve been building:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;node-postgres-exporter&lt;&#x2F;code&gt;, is a lightweight Prometheus exporter for PostgreSQL,
written in Node.js.&lt;&#x2F;p&gt;
&lt;p&gt;The goal: build a fully configurable exporter that supports multiple databases,
dynamic custom metrics, and solid production fault tolerance — while keeping
the design modular and simple to operate.&lt;&#x2F;p&gt;
&lt;p&gt;There are excellent existing exporters in the ecosystem — but many of them
require full privilege access, tightly coupled SQL views, or lack flexible
multi-database support.&lt;&#x2F;p&gt;
&lt;p&gt;This exporter aims to solve a more targeted problem:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Support multiple independent PostgreSQL instances&lt;&#x2F;li&gt;
&lt;li&gt;Expose core database metrics (connections, size, etc.)&lt;&#x2F;li&gt;
&lt;li&gt;Allow fully configurable, per-database custom metrics via JSON&lt;&#x2F;li&gt;
&lt;li&gt;Provide basic fault isolation so partial database failures don&#x27;t block full scrapes&lt;&#x2F;li&gt;
&lt;li&gt;Expose Prometheus-friendly endpoints with modern HTTP APIs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;key-features&quot;&gt;Key Features&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Node.js + Express based architecture&lt;&#x2F;li&gt;
&lt;li&gt;Uses &lt;a href=&quot;https:&#x2F;&#x2F;node-postgres.com&#x2F;&quot;&gt;&lt;code&gt;pg&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for database access via dedicated connection pools per database&lt;&#x2F;li&gt;
&lt;li&gt;Uses &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;siimon&#x2F;prom-client&quot;&gt;&lt;code&gt;prom-client&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for full Prometheus metric management&lt;&#x2F;li&gt;
&lt;li&gt;Simple configuration via JSON files (&lt;code&gt;databases.json&lt;&#x2F;code&gt; and &lt;code&gt;queries.json&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;API key authentication (Bearer token) for securing metrics endpoint&lt;&#x2F;li&gt;
&lt;li&gt;Graceful shutdown handling for safe database pool cleanup&lt;&#x2F;li&gt;
&lt;li&gt;Fully Dockerized with ready-to-run &lt;code&gt;docker-compose&lt;&#x2F;code&gt; setup for local testing&lt;&#x2F;li&gt;
&lt;li&gt;Includes health endpoints: &lt;code&gt;&#x2F;healthz&lt;&#x2F;code&gt;, &lt;code&gt;&#x2F;readyz&lt;&#x2F;code&gt;, &lt;code&gt;&#x2F;livez&lt;&#x2F;code&gt;, &lt;code&gt;&#x2F;configz&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;metric-types-supported&quot;&gt;Metric Types Supported&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;PostgreSQL connection counts&lt;&#x2F;li&gt;
&lt;li&gt;Per-database size metrics&lt;&#x2F;li&gt;
&lt;li&gt;Custom query metrics with support for &lt;code&gt;Gauge&lt;&#x2F;code&gt; and &lt;code&gt;Counter&lt;&#x2F;code&gt; types&lt;&#x2F;li&gt;
&lt;li&gt;Exporter self-metrics: scrape duration, error tracking, scrape lockouts, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dynamic-query-configuration&quot;&gt;Dynamic Query Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;One of the core design goals for &lt;code&gt;node-postgres-exporter&lt;&#x2F;code&gt; was flexibility
without requiring code changes. To achieve this, all custom metric definitions
are fully externalized via configuration files.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;queries.json&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Custom metrics are defined in a simple &lt;code&gt;queries.json&lt;&#x2F;code&gt; file, allowing operators
to add new metrics by writing plain SQL queries without modifying or
redeploying the exporter. Each query entry includes:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;name&lt;&#x2F;code&gt; – the Prometheus metric name&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;help&lt;&#x2F;code&gt; – description for the metric&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;type&lt;&#x2F;code&gt; – gauge or counter&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;labels&lt;&#x2F;code&gt; – array of columns to extract as metric labels&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;query&lt;&#x2F;code&gt; – the raw SQL statement to run against the target database&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;name&amp;quot;: &amp;quot;active_users&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;help&amp;quot;: &amp;quot;Number of active users&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;type&amp;quot;: &amp;quot;gauge&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;labels&amp;quot;: [&amp;quot;status&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;query&amp;quot;: &amp;quot;SELECT status, COUNT(*)::int FROM users GROUP BY status&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On each scrape, the exporter executes the configured queries, extracts label
values from the row fields, and populates the Prometheus metric accordingly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fault-tolerance-and-isolation&quot;&gt;Fault Tolerance and Isolation&lt;&#x2F;h3&gt;
&lt;p&gt;Another design goal was to handle database failures gracefully. If one database
becomes unavailable (network issue, restart, maintenance), the exporter:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Continues scraping all healthy databases&lt;&#x2F;li&gt;
&lt;li&gt;Exposes scrape success&#x2F;failure per database as dedicated metrics
(&lt;code&gt;pg_scrape_success&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Never fails the entire scrape due to single database issues&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Internally, this is implemented using:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Promise.allSettled()&lt;&#x2F;code&gt; to concurrently scrape databases while isolating
failures&lt;&#x2F;li&gt;
&lt;li&gt;Explicit error metric tracking&lt;&#x2F;li&gt;
&lt;li&gt;Per-database scrape duration timing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;example-use-case&quot;&gt;Example Use Case&lt;&#x2F;h3&gt;
&lt;p&gt;This design fits environments where:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You manage multiple distinct PostgreSQL instances&lt;&#x2F;li&gt;
&lt;li&gt;You have limited privilege access on some databases&lt;&#x2F;li&gt;
&lt;li&gt;You want metrics to be purely driven by SQL queries without deeper system
integration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;what-it-s-not-trying-to-be&quot;&gt;What it’s not trying to be&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;A full replacement for highly privileged exporters like the canonical
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prometheus-community&#x2F;postgres_exporter&quot;&gt;&lt;code&gt;postgres_exporter&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A deep SQL monitoring agent requiring superuser roles or heavy introspection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This exporter is intentionally &lt;strong&gt;simple, safe, and scoped&lt;&#x2F;strong&gt; — easy to audit and
deploy.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;roadmap-future-ideas&quot;&gt;Roadmap &#x2F; Future Ideas&lt;&#x2F;h3&gt;
&lt;p&gt;There’s plenty of room for future enhancement:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Hot-reload support for queries and DB configs&lt;&#x2F;li&gt;
&lt;li&gt;JSON schema validation on configuration files&lt;&#x2F;li&gt;
&lt;li&gt;Cardinality protection on dynamic label sets&lt;&#x2F;li&gt;
&lt;li&gt;Additional metric types (&lt;code&gt;Histogram&lt;&#x2F;code&gt;, &lt;code&gt;Summary&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Publish Docker images to container registries&lt;&#x2F;li&gt;
&lt;li&gt;Integration with secret management for DB credentials&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;source-code&quot;&gt;Source Code&lt;&#x2F;h3&gt;
&lt;p&gt;Repo available here:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;node-postgres-exporter&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;node-postgres-exporter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-side-benefit&quot;&gt;A Side Benefit&lt;&#x2F;h3&gt;
&lt;p&gt;Although this started as part of an audition project, I ended up building
something I’d absolutely consider productionizing for real-world use cases —
and more importantly, something I can showcase as a clean systems-level
engineering project.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>ChatGPT Changelog (fka Weekly Summary) - 25&#x2F;52</title>
          <pubDate>Fri, 20 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-25/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-25/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-25/">&lt;h2 id=&quot;weekly-summary-2025-06-13-to-2025-06-20&quot;&gt;Weekly Summary — 2025-06-13 to 2025-06-20&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;accomplishments&quot;&gt;Accomplishments&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;shelltrax-tui&quot;&gt;Shelltrax TUI&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Continued refinement of Shelltrax (TUI music player).&lt;&#x2F;li&gt;
&lt;li&gt;Autoplay behavior adjustments: added logic to handle album track advancement.&lt;&#x2F;li&gt;
&lt;li&gt;Made progress on Symphonia integration for FLAC and seeking support.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;open-udisc-api&quot;&gt;open-udisc-api&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Further decoding work on Remix-style &lt;code&gt;.data&lt;&#x2F;code&gt; format.&lt;&#x2F;li&gt;
&lt;li&gt;Continued schema-indexed record handling.&lt;&#x2F;li&gt;
&lt;li&gt;Published part 4 of your UDisc reverse engineering blog series.&lt;&#x2F;li&gt;
&lt;li&gt;Meta post idea evolving for later publication.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;node-postgres-exporter&quot;&gt;node-postgres-exporter&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Built a lightweight &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;node-postgres-exporter&quot;&gt;&lt;code&gt;node-postgres-exporter&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for Prometheus.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;nixos&quot;&gt;NixOS&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Ongoing modular NixOS configuration improvements.&lt;&#x2F;li&gt;
&lt;li&gt;TTY-first daily driver series is slowly building up. New post soon.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;swedish-studies&quot;&gt;Swedish studies&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Hit 186 days in a row on Babbel.&lt;&#x2F;li&gt;
&lt;li&gt;Published “Typing Swedish with US Keyboard” blog post.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;todos&quot;&gt;TODOs&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;shelltrax-tui-1&quot;&gt;ShellTrax TUI&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Fix footer (currently doesn&#x27;t update with next song, and progress is not perfect)&lt;&#x2F;li&gt;
&lt;li&gt;Fix broken metadata parsing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;open-udisc-api-1&quot;&gt;open-udisc-api&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Figure out what post 5 should be about&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;nixos-1&quot;&gt;NixOS&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Write next post about hyprland and other config updates&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;swedish-studies-1&quot;&gt;Swedish studies&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Listen to more audiobooks this week&lt;&#x2F;li&gt;
&lt;li&gt;Do more than bare minimum reviews&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>ChatGPT Changelog (fka Weekly Summary) - 24&#x2F;52</title>
          <pubDate>Fri, 13 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-24/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-24/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-24/">&lt;h3 id=&quot;happy-friday-the-13th&quot;&gt;Happy Friday the 13th!&lt;&#x2F;h3&gt;
&lt;p&gt;I have decided to slightly change up my personal weekly summary posts.&lt;&#x2F;p&gt;
&lt;p&gt;I have been using ChatGPT more and more and really find it to be an important
tool. It saves me so much time with debugging error messages and digging
through docs. It can also keep very good track of what I&#x27;ve been working on
and thinking about. Because of this, I have decided to update the way I do
the weekly summary. I am going to let ChatGPT generate a personal changelog
of everything I have been working on. It&#x27;s not perfect so I do have to edit
it some but it still does a better job than I could ever do.&lt;&#x2F;p&gt;
&lt;p&gt;So with that, here is my weekly ChatGPT changelog:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;accomplishments-since-june-7&quot;&gt;Accomplishments (Since June 7)&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;udisc-api-blog-series&quot;&gt;UDisc API &#x2F; Blog Series&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Published Part 4 of the blog series: deep dive into &lt;code&gt;smartLayouts&lt;&#x2F;code&gt; and &lt;code&gt;holes&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Improved &lt;code&gt;deepHydrate&lt;&#x2F;code&gt;, began resolving issues with arrays of unresolved IDs.&lt;&#x2F;li&gt;
&lt;li&gt;Continued resolving schema-indexed keys (e.g. &lt;code&gt;_254: 270&lt;&#x2F;code&gt;) for clarity.&lt;&#x2F;li&gt;
&lt;li&gt;Added blog link to &lt;code&gt;open-udisc-api&lt;&#x2F;code&gt; README.&lt;&#x2F;li&gt;
&lt;li&gt;Cleaned up TypeScript types and debugged schema hydration logic.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;infra-devops&quot;&gt;Infra &amp;amp; DevOps&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Set up Gitea using a Linux service.&lt;&#x2F;li&gt;
&lt;li&gt;Implemented a Git pre-push hook to filter Zola drafts before publishing.&lt;&#x2F;li&gt;
&lt;li&gt;Decided to drop OpenAPI support for the current API project.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;postgresql-exporter&quot;&gt;PostgreSQL Exporter&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Deployed a general-purpose PostgreSQL -&amp;gt; Prometheus exporter.&lt;&#x2F;li&gt;
&lt;li&gt;Added &lt;code&gt;&#x2F;metrics&lt;&#x2F;code&gt;, &lt;code&gt;&#x2F;livez&lt;&#x2F;code&gt;, &lt;code&gt;&#x2F;readyz&lt;&#x2F;code&gt;, and &lt;code&gt;&#x2F;configz&lt;&#x2F;code&gt; endpoints.&lt;&#x2F;li&gt;
&lt;li&gt;Configured basic token authentication.&lt;&#x2F;li&gt;
&lt;li&gt;Documented endpoints and auth in the README.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;nixos-hyprland&quot;&gt;NixOS &#x2F; Hyprland&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Diagnosed Hyprland reload issues involving &lt;code&gt;exec-once&lt;&#x2F;code&gt; behavior.&lt;&#x2F;li&gt;
&lt;li&gt;Installed and confirmed use of:
&lt;ul&gt;
&lt;li&gt;wezterm&lt;&#x2F;li&gt;
&lt;li&gt;dunst&lt;&#x2F;li&gt;
&lt;li&gt;hypridle&lt;&#x2F;li&gt;
&lt;li&gt;bibata-cursor-theme&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Explored xcursor previews and how to apply cursor themes via Nix.&lt;&#x2F;li&gt;
&lt;li&gt;Set up Waybar with Gruvbox-inspired CSS.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Continued Swedish learning streak (currently 179+ days).&lt;&#x2F;li&gt;
&lt;li&gt;Expanded concept for a first-person disc golf course viewer.&lt;&#x2F;li&gt;
&lt;li&gt;Researched 360-degree and panoramic photo capture on Android&#x2F;GrapheneOS.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;to-do-improvements&quot;&gt;To-Do &#x2F; Improvements&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;udisc-api-blog&quot;&gt;UDisc API + Blog&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Fix unresolved arrays in &lt;code&gt;deepHydrate&lt;&#x2F;code&gt;, such as &lt;code&gt;targetPositionLabels&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Begin drafting a &quot;meta&quot; post summarizing the UDisc reverse-engineering series.&lt;&#x2F;li&gt;
&lt;li&gt;Write additional parts exploring fields like &lt;code&gt;dogleg&lt;&#x2F;code&gt; or &lt;code&gt;obLines&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Explore creating a visualizer for hydrated course data.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;infra-self-hosting&quot;&gt;Infra &#x2F; Self-Hosting&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Document the Gitea systemd service setup.&lt;&#x2F;li&gt;
&lt;li&gt;Write a blog post about using Git hooks to manage Zola drafts.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;nixos-hyprland-1&quot;&gt;NixOS &#x2F; Hyprland&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Investigate why &lt;code&gt;exec-once&lt;&#x2F;code&gt; commands don&#x27;t rerun on &lt;code&gt;hyprctl reload&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Continue refining modular &lt;code&gt;environment.systemPackages&lt;&#x2F;code&gt; layout.&lt;&#x2F;li&gt;
&lt;li&gt;Extend daily-driver blog series for NixOS on MacBook hardware.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;portfolio-sharing&quot;&gt;Portfolio + Sharing&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Add README links or badges to published blog posts.&lt;&#x2F;li&gt;
&lt;li&gt;Write a post about decoding custom schema formats in APIs.&lt;&#x2F;li&gt;
&lt;li&gt;Share blog content on Hacker News, Lobsters, or relevant communities.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>Typing åäö in Hyprland: A US, Mac-style Keyboard Guide</title>
          <pubDate>Thu, 12 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/typing-swedish-us-keyboard/</link>
          <guid>https://jakegoldsborough.com/blog/2025/typing-swedish-us-keyboard/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/typing-swedish-us-keyboard/">&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h3&gt;
&lt;p&gt;As I&#x27;ve mentioned in the previous GPT Changelog nee Weekly Summary, I have been
learning Swedish for over 6 months now. I&#x27;m getting pretty good at listening and
reading, but I have been doing very little speaking and typing practice. I would
like to change that by building muscle memory through proper Swedish typing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;enabling-in-hyprland&quot;&gt;Enabling in Hyprland&lt;&#x2F;h3&gt;
&lt;p&gt;Like many things in the Linux world, there is more than one way to do this. The
easiest way would just be to use the GUI menu and add the keyboard. I would
prefer to keep this declarative and inside some config files so it&#x27;s more easily
reproducible.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, I will add some config to Hyprland to enable this. This config will:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;enable the Swedish &lt;code&gt;kb_layout&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;add the US variant for the Swedish layout&lt;&#x2F;li&gt;
&lt;li&gt;sets &lt;code&gt;rctrl&lt;&#x2F;code&gt; as the key that toggles between layouts&lt;&#x2F;li&gt;
&lt;li&gt;sets &lt;code&gt;ralt&lt;&#x2F;code&gt; as the modifier key for Swedish keys&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;input {
&lt;&#x2F;span&gt;&lt;span&gt;  kb_layout = us,se
&lt;&#x2F;span&gt;&lt;span&gt;  kb_variant = ,us
&lt;&#x2F;span&gt;&lt;span&gt;  kb_options = grp:rctrl_toggle,lv3:ralt_switch
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Save the config and reload the hypr config:
&lt;code&gt;hyprctl reload&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-the-us-variant&quot;&gt;What is the US variant?&lt;&#x2F;h3&gt;
&lt;p&gt;Before testing it out, I should explain what the US variant is.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;Swedish (US)&lt;&#x2F;strong&gt; layout — sometimes referred to as &quot;Swedish for US keyboards&quot; —
is a variant of the traditional Swedish keyboard layout that’s specifically
designed for people using &lt;strong&gt;US physical keyboards&lt;&#x2F;strong&gt;. It allows you to type
Swedish characters like &lt;code&gt;å&lt;&#x2F;code&gt;, &lt;code&gt;ä&lt;&#x2F;code&gt;, and &lt;code&gt;ö&lt;&#x2F;code&gt; without rearranging the rest of your
familiar QWERTY key positions.&lt;&#x2F;p&gt;
&lt;p&gt;This layout keeps the standard &lt;strong&gt;US punctuation and symbol positions intact&lt;&#x2F;strong&gt; —
like &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;, &lt;code&gt;@&lt;&#x2F;code&gt;, &lt;code&gt;;&lt;&#x2F;code&gt;, and &lt;code&gt;&quot;&lt;&#x2F;code&gt; — while introducing the necessary Swedish characters
via the &lt;strong&gt;Right Alt key&lt;&#x2F;strong&gt; (also called &lt;code&gt;AltGr&lt;&#x2F;code&gt; in XKB terminology).&lt;&#x2F;p&gt;
&lt;p&gt;Unlike the default &lt;strong&gt;Swedish layout&lt;&#x2F;strong&gt;, which assumes a physical keyboard with
keys labeled for Swedish (and repositions many punctuation marks), the
&lt;strong&gt;Swedish (US)&lt;&#x2F;strong&gt; layout overlays the Swedish characters on a standard US
keyboard. This makes it ideal for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Swedish learners or expats using American keyboards&lt;&#x2F;li&gt;
&lt;li&gt;Developers or typists who need occasional access to &lt;code&gt;å&lt;&#x2F;code&gt;, &lt;code&gt;ä&lt;&#x2F;code&gt;, and &lt;code&gt;ö&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Anyone who doesn’t want to remap common keys like &lt;code&gt;@&lt;&#x2F;code&gt;, &lt;code&gt;|&lt;&#x2F;code&gt;, or &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In practice, this means you keep your normal US key behavior, and just use
&lt;strong&gt;Right Alt as a modifier&lt;&#x2F;strong&gt; to access Swedish characters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Right Alt + w&lt;&#x2F;code&gt; = å&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Right Alt + &#x27;&lt;&#x2F;code&gt; = ä&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Right Alt + ;&lt;&#x2F;code&gt; = ö&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And uppercase versions with Shift.&lt;&#x2F;p&gt;
&lt;p&gt;If you’re used to US QWERTY and want to type Swedish without sacrificing
developer-friendly symbols, &lt;strong&gt;Swedish (US)&lt;&#x2F;strong&gt; is the best option available — and
it integrates smoothly into Linux environments like Hyprland when configured
correctly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;se-swedish-us-layout-character-cheat-sheet&quot;&gt;🇸🇪 Swedish (US) Layout – Character Cheat Sheet&lt;&#x2F;h3&gt;
&lt;table class=&quot;swedish-keyboard-cheatsheet&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Character&lt;&#x2F;th&gt;
      &lt;th&gt;Key Combo&lt;&#x2F;th&gt;
      &lt;th&gt;Notes&lt;&#x2F;th&gt;
    &lt;&#x2F;tr&gt;
  &lt;&#x2F;thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;å&lt;&#x2F;td&gt;
      &lt;td&gt;Right Alt + &lt;kbd&gt;w&lt;&#x2F;kbd&gt;&lt;&#x2F;td&gt;
      &lt;td&gt;Lowercase å&lt;&#x2F;td&gt;
    &lt;&#x2F;tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Å&lt;&#x2F;td&gt;
      &lt;td&gt;Right Alt + &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; + &lt;kbd&gt;w&lt;&#x2F;kbd&gt;&lt;&#x2F;td&gt;
      &lt;td&gt;Uppercase Å&lt;&#x2F;td&gt;
    &lt;&#x2F;tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ä&lt;&#x2F;td&gt;
      &lt;td&gt;Right Alt + &lt;kbd&gt;&#x27;&lt;&#x2F;kbd&gt;&lt;&#x2F;td&gt;
      &lt;td&gt;Apostrophe key&lt;&#x2F;td&gt;
    &lt;&#x2F;tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ä&lt;&#x2F;td&gt;
      &lt;td&gt;Right Alt + &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; + &lt;kbd&gt;&#x27;&lt;&#x2F;kbd&gt;&lt;&#x2F;td&gt;
      &lt;td&gt;Shift + Apostrophe&lt;&#x2F;td&gt;
    &lt;&#x2F;tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ö&lt;&#x2F;td&gt;
      &lt;td&gt;Right Alt + &lt;kbd&gt;;&lt;&#x2F;kbd&gt;&lt;&#x2F;td&gt;
      &lt;td&gt;Semicolon key&lt;&#x2F;td&gt;
    &lt;&#x2F;tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ö&lt;&#x2F;td&gt;
      &lt;td&gt;Right Alt + &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; + &lt;kbd&gt;;&lt;&#x2F;kbd&gt;&lt;&#x2F;td&gt;
      &lt;td&gt;Shift + Semicolon&lt;&#x2F;td&gt;
    &lt;&#x2F;tr&gt;
  &lt;&#x2F;tbody&gt;
&lt;&#x2F;table&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;You should now have a working Hyprland config that will allow you to type
Swedish on a Mac-style, US variant keyboard.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Weekly Summary - 23&#x2F;52</title>
          <pubDate>Sat, 07 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-23/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-23/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-23/">&lt;h3 id=&quot;accomplishments&quot;&gt;Accomplishments&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;reverse-engineering-udisc-api&quot;&gt;Reverse Engineering UDisc API&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Published Part 3 of blog series on &lt;code&gt;Course&lt;&#x2F;code&gt; and &lt;code&gt;CourseDetails&lt;&#x2F;code&gt; structure.&lt;&#x2F;li&gt;
&lt;li&gt;Drafted outline for Part 4, focused on &lt;code&gt;smartLayouts&lt;&#x2F;code&gt; and &lt;code&gt;hole&lt;&#x2F;code&gt; info.&lt;&#x2F;li&gt;
&lt;li&gt;Renamed &lt;code&gt;resolveSchemaMap&lt;&#x2F;code&gt; to a clearer, more specific function name.&lt;&#x2F;li&gt;
&lt;li&gt;Improved nested hydration using &lt;code&gt;deepHydrate&lt;&#x2F;code&gt; for decoding nested data.&lt;&#x2F;li&gt;
&lt;li&gt;Considered naming conventions like &lt;code&gt;courseWithDetails&lt;&#x2F;code&gt; for client API.&lt;&#x2F;li&gt;
&lt;li&gt;Decided to provide a client library first, rather than a full backend.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;typescript-module-and-publishing&quot;&gt;TypeScript Module and Publishing&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Adopted &lt;code&gt;YYYYMMDD&lt;&#x2F;code&gt; format for versioning with semantic meaning.&lt;&#x2F;li&gt;
&lt;li&gt;Resolved JSON parsing and bundling issues in the TypeScript setup.&lt;&#x2F;li&gt;
&lt;li&gt;Held off on publishing to npm, but prepared module for later release.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;static-site-and-blogging&quot;&gt;Static Site and Blogging&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Fixed insecure site warning by enabling HTTPS on GitHub Pages.&lt;&#x2F;li&gt;
&lt;li&gt;Designed favicons and tried different accent colors and sizes.&lt;&#x2F;li&gt;
&lt;li&gt;Planned a meta-post to tie the blog series together conceptually.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;nixos-daily-driver-series&quot;&gt;NixOS Daily Driver Series&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Published Part 3 of your NixOS daily driver blog series.&lt;&#x2F;li&gt;
&lt;li&gt;Started exploring ideas for better display managers like Lemurs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;gitea-self-hosting&quot;&gt;Gitea Self-Hosting&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Setup Gitea as Linux service.&lt;&#x2F;li&gt;
&lt;li&gt;Resolved SSH cloning issues by switching to internal SSH service.&lt;&#x2F;li&gt;
&lt;li&gt;Researched CI&#x2F;CD via Woodpecker&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;swedish-language-learning&quot;&gt;Swedish Language Learning&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Reached 179-day streak learning Swedish using Babbel.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;to-do-next-steps&quot;&gt;To-Do &#x2F; Next Steps&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;udisc-blog-series&quot;&gt;UDisc Blog Series&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Write and publish Part 4 about &lt;code&gt;smartLayouts&lt;&#x2F;code&gt;, &lt;code&gt;holes&lt;&#x2F;code&gt;, and &lt;code&gt;tees&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Create a meta-post summarizing the series with internal references.&lt;&#x2F;li&gt;
&lt;li&gt;Explore building a schema or data visualizer for reader clarity.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;open-udisc-api-module&quot;&gt;open-udisc-api Module&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Prepare for npm publishing (README, &lt;code&gt;exports&lt;&#x2F;code&gt;, format cleanup).&lt;&#x2F;li&gt;
&lt;li&gt;Write more Vitest-based tests using mock data to avoid real API calls.&lt;&#x2F;li&gt;
&lt;li&gt;Add inline documentation and usage examples to client methods.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;nixos-configuration&quot;&gt;NixOS Configuration&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Start Lemurs setup for display management.&lt;&#x2F;li&gt;
&lt;li&gt;Write Part 4 of the daily driver series covering service setup.&lt;&#x2F;li&gt;
&lt;li&gt;Explore modularizing &lt;code&gt;environment.systemPackages&lt;&#x2F;code&gt; further.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;gitea-enhancements&quot;&gt;Gitea Enhancements&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Consider automating deployment with Git hooks or CI.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;additional-ideas&quot;&gt;Additional Ideas&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Write a short post explaining UDisc &lt;code&gt;.data&lt;&#x2F;code&gt; format independently.&lt;&#x2F;li&gt;
&lt;li&gt;Research legality of wrapper libraries for non-public data APIs.&lt;&#x2F;li&gt;
&lt;li&gt;Consider writing a proxy or wrapper API as a hosted endpoint.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>NixOS as a daily driver on a late 2011 Macbook Pro, part 3&#x2F;? - user, WM, tools</title>
          <pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-3/</link>
          <guid>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-3/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/nixos-daily-driver-3/">&lt;h4 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h4&gt;
&lt;p&gt;See &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;nixos-daily-driver-2&quot;&gt;Part 2&lt;&#x2F;a&gt; where I cover installation and
basic configuration.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;outline&quot;&gt;Outline&lt;&#x2F;h4&gt;
&lt;p&gt;Things we will be covering in this post:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;adding a non-root user with sudo access&lt;&#x2F;li&gt;
&lt;li&gt;installing a window manager - Hyprland&lt;&#x2F;li&gt;
&lt;li&gt;installing some tools - neovim, git, waybar, wezterm&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;install-a-text-editor&quot;&gt;Install a Text Editor&lt;&#x2F;h4&gt;
&lt;p&gt;First things first, let&#x27;s install a better text editor to make our configuration
updating easier.&lt;&#x2F;p&gt;
&lt;p&gt;You will have to use &lt;code&gt;nano&lt;&#x2F;code&gt; for this. Open &lt;code&gt;&#x2F;etc&#x2F;nixos&#x2F;configuration.nix&lt;&#x2F;code&gt;
and add the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;programs.neovim = {
&lt;&#x2F;span&gt;&lt;span&gt;  enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;  defaultEditor = true;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Use &lt;code&gt;ctrl+o&lt;&#x2F;code&gt; then &lt;code&gt;ctrl+x&lt;&#x2F;code&gt; to write and exit nano.&lt;&#x2F;p&gt;
&lt;p&gt;Then run &lt;code&gt;nixos-rebuild switch&lt;&#x2F;code&gt;. NixOS will rebuild your config and return you
to a terminal. You should now be able to start neovim by running &lt;code&gt;nvim&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;adding-a-user&quot;&gt;Adding a User&lt;&#x2F;h4&gt;
&lt;p&gt;Now that we can edit files easier, let&#x27;s add a non-root user.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;users.users.disco = {
&lt;&#x2F;span&gt;&lt;span&gt; isNormalUser = true;
&lt;&#x2F;span&gt;&lt;span&gt; extraGroups = [
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;quot;wheel&amp;quot;             # Allows sudo access
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;quot;networkmanager&amp;quot;    # Allows controlling network
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;quot;audio&amp;quot;             # Audio device access
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;quot;video&amp;quot;             # Video devices (e.g. backlight, GPU)
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;quot;input&amp;quot;             # For input devices like keyboard&#x2F;mouse config
&lt;&#x2F;span&gt;&lt;span&gt; ];
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, save and exit and then rebuild:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;nixos-rebuild switch&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After successfully rebuilding, you will need to set a password for the new user.
For me that&#x27;s:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;passwd disco&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then you can &lt;code&gt;exit&lt;&#x2F;code&gt; and login as your new sudo accessible user.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;enable-network-tools&quot;&gt;Enable Network Tools&lt;&#x2F;h4&gt;
&lt;p&gt;This will enable tools like &lt;code&gt;nmtui&lt;&#x2F;code&gt; to allow for easier network setup.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;networking.networkmanager.enable = true;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;install-a-window-manager-and-daily-driver-tools&quot;&gt;Install a Window Manager and Daily Driver Tools&lt;&#x2F;h4&gt;
&lt;p&gt;I am using &lt;a href=&quot;https:&#x2F;&#x2F;hyprland.org&#x2F;&quot;&gt;Hyprland&lt;&#x2F;a&gt;. Hyprland is a dynamic Wayland
compositor that supports tiling, floating, and hybrid layouts.&lt;&#x2F;p&gt;
&lt;p&gt;Add the following to your &lt;code&gt;&#x2F;etc&#x2F;nixos&#x2F;configuration.nix&lt;&#x2F;code&gt;. This enables Hyprland
along with XDG portals, which are required for features like file pickers,
screen sharing, and communication between sandboxed apps (especially Flatpaks
and browsers).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;programs.hyprland.enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;xdg.portal = {
&lt;&#x2F;span&gt;&lt;span&gt;  enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;  wlr.enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;  extraPortals = [ pkgs.xdg-desktop-portal-hyprland ];
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before rebuilding this time though, we will also install some daily driver tools.&lt;&#x2F;p&gt;
&lt;p&gt;One reason for this is that &lt;code&gt;Hyprland&lt;&#x2F;code&gt; uses the &lt;code&gt;kitty&lt;&#x2F;code&gt; terminal by default.&lt;&#x2F;p&gt;
&lt;p&gt;Look for this line in your &lt;code&gt;&#x2F;etc&#x2F;nixos&#x2F;configuration.nix&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;environment.systemPackages = with pkgs; [
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You will likely find this commented out with &lt;code&gt;wget&lt;&#x2F;code&gt; listed as a package.&lt;&#x2F;p&gt;
&lt;p&gt;Expand on that section so it becomes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;environment.systemPackages = with pkgs; [
&lt;&#x2F;span&gt;&lt;span&gt;  kitty # needed by Hyprland by default
&lt;&#x2F;span&gt;&lt;span&gt;  wget
&lt;&#x2F;span&gt;&lt;span&gt;  hyprpaper # background utility for Hyprland
&lt;&#x2F;span&gt;&lt;span&gt;  hyprlock # screen lock utility for Hyprland
&lt;&#x2F;span&gt;&lt;span&gt;  librewolf # privacy focused browser based on firefox
&lt;&#x2F;span&gt;&lt;span&gt;  wofi # needed by Hyprland by default
&lt;&#x2F;span&gt;&lt;span&gt;  git
&lt;&#x2F;span&gt;&lt;span&gt;  waybar # status bar for Hyprland
&lt;&#x2F;span&gt;&lt;span&gt;  wezterm
&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some tools like &lt;code&gt;neovim&lt;&#x2F;code&gt; and &lt;code&gt;hyprland&lt;&#x2F;code&gt; have official NixOS modules, which let you
enable them declaratively using &lt;code&gt;enable = true;&lt;&#x2F;code&gt;. Other tools (like &lt;code&gt;git&lt;&#x2F;code&gt; or
&lt;code&gt;librewolf&lt;&#x2F;code&gt;) don’t have modules and should be added directly to
&lt;code&gt;environment.systemPackages&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now it&#x27;s time to rebuild. Again, this is done by:
&lt;code&gt;sudo nixos-rebuild switch&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can now manually start &lt;code&gt;Hyprland&lt;&#x2F;code&gt; by running:
&lt;code&gt;exec Hyprland&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You will be greeted with nothing but a random wallpaper supplied by Hyprland.&lt;&#x2F;p&gt;
&lt;p&gt;A couple important default keybinds are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;SUPER + q - opens terminal&lt;&#x2F;li&gt;
&lt;li&gt;SUPER + r - opens wofi app runner&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;starting-hyprland-on-login&quot;&gt;Starting Hyprland on Login&lt;&#x2F;h4&gt;
&lt;p&gt;Let&#x27;s make &lt;code&gt;Hyprland&lt;&#x2F;code&gt; start on login. Create a &lt;code&gt;~&#x2F;.bash_profile&lt;&#x2F;code&gt; file if it
doesn&#x27;t exist and add this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;if [ -z &amp;quot;$DISPLAY&amp;quot; ] &amp;amp;&amp;amp; [ &amp;quot;$(tty)&amp;quot; = &amp;quot;&#x2F;dev&#x2F;tty1&amp;quot; ]; then
&lt;&#x2F;span&gt;&lt;span&gt;  exec Hyprland
&lt;&#x2F;span&gt;&lt;span&gt;fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h4&gt;
&lt;p&gt;In this post, we have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;added a non-root user and set their password&lt;&#x2F;li&gt;
&lt;li&gt;installed a window manager, &lt;code&gt;Hyprland&lt;&#x2F;code&gt;, and set it to start on login&lt;&#x2F;li&gt;
&lt;li&gt;installed multiple important daily driver tools like git and librewolf&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;next-time&quot;&gt;Next Time&lt;&#x2F;h4&gt;
&lt;p&gt;In Part 4, we&#x27;ll continue to configure &lt;code&gt;Hyprland&lt;&#x2F;code&gt;: adding keybindings,
wallpapers, waybar, and maybe even a lockscreen.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>NixOS as a daily driver on a late 2011 Macbook Pro, part 2&#x2F;? - Installation, Basic Configuration</title>
          <pubDate>Wed, 04 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-2/</link>
          <guid>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-2/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/nixos-daily-driver-2/">&lt;p&gt;See &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;nixos-daily-driver-1&quot;&gt;Part 1&lt;&#x2F;a&gt; where I cover why you would want
to run NixOS as a daily driver.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, we will cover installation on a personal machine and setting up
a basic configuration file.&lt;&#x2F;p&gt;
&lt;p&gt;Just as a note, for this specific post I am using:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;efi&lt;&#x2F;li&gt;
&lt;li&gt;minimal ISO&lt;&#x2F;li&gt;
&lt;li&gt;dd (tool to write ISO)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixos&#x2F;stable&#x2F;#ch-installation&quot;&gt;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixos&#x2F;stable&#x2F;#ch-installation&lt;&#x2F;a&gt;
for a full installation guide.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h4&gt;
&lt;p&gt;Because Nix and Nixpkgs can be installed on almost any Linux distro, it&#x27;s possible
to install NixOS from inside an existing Linux install. You can even install
it in place on the same partition.
&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixos&#x2F;stable&#x2F;#sec-installing-from-other-distro&quot;&gt;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixos&#x2F;stable&#x2F;#sec-installing-from-other-distro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We will keep it simple and focus on using an ISO on a USB drive.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;iso&quot;&gt;ISO&lt;&#x2F;h4&gt;
&lt;p&gt;Go to &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;download&#x2F;#nixos-iso&quot;&gt;https:&#x2F;&#x2F;nixos.org&#x2F;download&#x2F;#nixos-iso&lt;&#x2F;a&gt;
to download the ISO of your choice. If you are a newer user, you should probably
pick graphical as it will help guide you along. I have Linux experience so I
will be using the minimal version.&lt;&#x2F;p&gt;
&lt;p&gt;Next, insert your USB drive and look for it using &lt;code&gt;lsblk&lt;&#x2F;code&gt;.
Make sure it&#x27;s not mounted: &lt;code&gt;sudo umount &#x2F;dev&#x2F;sdX*&lt;&#x2F;code&gt;.
Then use &lt;code&gt;dd&lt;&#x2F;code&gt; to write the ISO to your drive:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;sudo dd bs=4M conv=fsync oflag=direct status=progress if=&amp;lt;path-to-image&amp;gt; of=&#x2F;dev&#x2F;sdX&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now it&#x27;s time to boot.&lt;&#x2F;p&gt;
&lt;p&gt;You will be greeted with nothing but a terminal. You will be automatically
logged in as the &lt;code&gt;nixos&lt;&#x2F;code&gt; user and have sudo access without a password.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;networking&quot;&gt;Networking&lt;&#x2F;h4&gt;
&lt;p&gt;You will need a connection to the internet to download various things needed
for the install. The easiest way is to just use a wired connection if possible.
If you need wireless, it takes a little setup. The minimal installer does not
ship with the correct firmware for my wireless card so I&#x27;m forced to use a wired
connection. The wireless setup doesn&#x27;t look difficult and instructions can be
found here:
&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixos&#x2F;stable&#x2F;#sec-installation-manual-networking&quot;&gt;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixos&#x2F;stable&#x2F;#sec-installation-manual-networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;partitioning-and-formatting&quot;&gt;Partitioning and formatting&lt;&#x2F;h4&gt;
&lt;p&gt;The minimal NixOS install doesn&#x27;t do any partitioning or formatting so that
needs to be done manually.&lt;&#x2F;p&gt;
&lt;p&gt;First, you will need to partition:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create a GPT partition table&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;parted &#x2F;dev&#x2F;sda -- mklabel gpt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Add the root partition. This will fill the disk except for the end part,
where the swap will live, and the space left in front (512MiB) which will be
used by the boot partition.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;parted &#x2F;dev&#x2F;sda -- mkpart root ext4 512MB -8GB&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Next, add a swap partition. The size required will vary according to needs, here a 8GB one is created.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;parted &#x2F;dev&#x2F;sda -- mkpart swap linux-swap -8GB 100%&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Finally, the boot partition. NixOS by default uses the ESP (EFI system
partition) as its &lt;code&gt;&#x2F;boot&lt;&#x2F;code&gt; partition. It uses the initially reserved 512MiB at
the start of the disk.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;parted &#x2F;dev&#x2F;sda -- mkpart ESP fat32 1MB 512MB
&lt;&#x2F;span&gt;&lt;span&gt;parted &#x2F;dev&#x2F;sda -- set 3 esp on
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, you need to format those partitions:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;For initialising &lt;code&gt;Ext4&lt;&#x2F;code&gt; partitions: &lt;code&gt;mkfs.ext4&lt;&#x2F;code&gt;. It is recommended that you
assign a unique symbolic label to the file system using the option &lt;code&gt;-L label&lt;&#x2F;code&gt;,
since this makes the file system configuration independent from device changes.
For example:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;mkfs.ext4 -L nixos &#x2F;dev&#x2F;sda1&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;For creating swap partitions: mkswap. Again it’s recommended to assign a
label to the swap partition: &lt;code&gt;-L label&lt;&#x2F;code&gt;. For example:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;mkswap -L swap &#x2F;dev&#x2F;sda2&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;For creating boot partitions: &lt;code&gt;mkfs.fat&lt;&#x2F;code&gt;. Again it’s recommended to assign a
label to the boot partition: &lt;code&gt;-n label&lt;&#x2F;code&gt;. For example:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;mkfs.fat -F 32 -n boot &#x2F;dev&#x2F;sda3&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;installation-1&quot;&gt;Installation&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Mount the target file system on which NixOS should be installed on &lt;code&gt;&#x2F;mnt&lt;&#x2F;code&gt;,
e.g.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;mount &#x2F;dev&#x2F;disk&#x2F;by-label&#x2F;nixos &#x2F;mnt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Mount the boot file system on &#x2F;mnt&#x2F;boot, e.g.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;mkdir -p &#x2F;mnt&#x2F;boot
&lt;&#x2F;span&gt;&lt;span&gt;mount -o umask=077 &#x2F;dev&#x2F;disk&#x2F;by-label&#x2F;boot &#x2F;mnt&#x2F;boot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;(optional) If your machine has a limited amount of memory, you may want to
activate swap devices now (swapon device). The installer (or rather, the
build actions that it may spawn) may need quite a bit of RAM, depending on
your configuration.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;swapon &#x2F;dev&#x2F;sda2&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;You now need to create a file &lt;code&gt;&#x2F;mnt&#x2F;etc&#x2F;nixos&#x2F;configuration.nix&lt;&#x2F;code&gt; that
specifies the intended configuration of the system. This is because NixOS
has a declarative configuration model: you create or edit a description of
the desired configuration of your system, and then NixOS takes care of
making it happen.&lt;&#x2F;p&gt;
&lt;p&gt;The command &lt;code&gt;nixos-generate-config&lt;&#x2F;code&gt; can generate an initial configuration
file for you:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;nixos-generate-config --root &#x2F;mnt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This command will also create a file at &lt;code&gt;&#x2F;mnt&#x2F;etc&#x2F;nixos&#x2F;hardware-configuration.nix&lt;&#x2F;code&gt;.
This includes important config for your filesystems among other things. While
NixOS should handle this, it can&#x27;t hurt to double check just to make sure
things are defined correctly.&lt;&#x2F;p&gt;
&lt;p&gt;Most of the default config will be commented out, but a basic
&lt;code&gt;configuration.nix&lt;&#x2F;code&gt; file will look something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{ config, pkgs, ... }:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  imports = [ .&#x2F;hardware-configuration.nix ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  boot.loader.systemd-boot.enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;  boot.loader.efi.canTouchEfiVariables = true;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  # Macbook Pro wireless firmware
&lt;&#x2F;span&gt;&lt;span&gt;  nixpkgs.config = {
&lt;&#x2F;span&gt;&lt;span&gt;    allowUnfree = true;
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  services.openssh.enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  system.stateVersion = &amp;quot;25.05&amp;quot;; # Adjust to match your NixOS version
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note for UEFI users: You must select a boot-loader, either systemd-boot or
GRUB. The recommended option is systemd-boot: set the option
&lt;code&gt;boot.loader.systemd-boot.enable&lt;&#x2F;code&gt; to true. &lt;code&gt;nixos-generate-config&lt;&#x2F;code&gt; should do
this automatically for new configurations when booted in UEFI mode.&lt;&#x2F;p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Install! This step can take some time depending on your machine.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;nixos-install&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;As the last step, nixos-install will ask you to set the password for the
root user, e.g.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;setting root password...
&lt;&#x2F;span&gt;&lt;span&gt;New password: ***
&lt;&#x2F;span&gt;&lt;span&gt;Retype new password: ***
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;If everything went well, it&#x27;s time to &lt;code&gt;reboot&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h4&gt;
&lt;p&gt;That&#x27;s it for this post and the installation and basic configuration of NixOS.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;next-time&quot;&gt;Next Time&lt;&#x2F;h4&gt;
&lt;p&gt;In the next installment, we&#x27;ll create a non-root user, configure the Hyprland
window manager, and install some key daily-driver tools including Neovim, Git,
and LibreWolf.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>How Vulfmon Inspired Me to Learn to Weave</title>
          <pubDate>Sat, 31 May 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/vulfmon-inspired-me-to-learn-to-weave/</link>
          <guid>https://jakegoldsborough.com/blog/2025/vulfmon-inspired-me-to-learn-to-weave/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/vulfmon-inspired-me-to-learn-to-weave/">&lt;h4 id=&quot;who-is-vulfmon&quot;&gt;Who is Vulfmon&lt;&#x2F;h4&gt;
&lt;p&gt;Vulfmon is the alter ego&#x2F;moniker of Vulfpeck leader Jack Stratton. He sometimes
shoots videos in a room with various art on the walls. In the video for
&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;dTnHAITmuYQ&quot;&gt;Alone Again, Naturally&lt;&#x2F;a&gt;, I noticed a weaving
that I loved:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;vulfmon-weave.png&quot; alt=&quot;Weaving hanging on wall of Vulfmon video&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Lucky for me, I just happened to have access to a loom and yarn. Like any new
skill, it was a bit awkward to start and honestly, my first one was rough. I
stuck with it though and have made many better ones including six inspired by
Vulfmon:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Vulfmon - gold 1&lt;&#x2F;strong&gt;
&lt;img
  alt=&quot;Vulfmon inspired gold weaving&quot;
  src=&quot;&#x2F;images&#x2F;vulfmon-gold-1.jpeg&quot;
  width=&quot;600&quot; &gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Vulfmon - gold, orange, brown 1&lt;&#x2F;strong&gt;
&lt;img
  alt=&quot;Vulfmon inspired gold, orange, brown weaving&quot;
  src=&quot;&#x2F;images&#x2F;vulfmon-gold-orange-brown-1.jpeg&quot;
  width=&quot;600&quot; &gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Vulfmon - green 1&lt;&#x2F;strong&gt;
&lt;img
  alt=&quot;Vulfmon inspired green weaving&quot;
  src=&quot;&#x2F;images&#x2F;vulfmon-green-1.jpeg&quot;
  width=&quot;600&quot; &gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Vulfmon - gold 2&lt;&#x2F;strong&gt;
&lt;img
  alt=&quot;Vulfmon inspired gold weaving&quot;
  src=&quot;&#x2F;images&#x2F;vulfmon-gold-2.jpeg&quot;
  width=&quot;600&quot; &gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Mini Vulfmon - purple 1&lt;&#x2F;strong&gt;
&lt;img
  alt=&quot;Vulfmon inspired mini purple weaving&quot;
  src=&quot;&#x2F;images&#x2F;vulfmon-mini-purple-1.jpeg&quot;
  width=&quot;600&quot; &gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Mini Vulfmon - orange 1&lt;&#x2F;strong&gt;
&lt;img
  alt=&quot;Vulfmon inspired mini orange weaving&quot;
  src=&quot;&#x2F;images&#x2F;vulfmon-mini-orange-1.jpeg&quot;
  width=&quot;600&quot; &gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Weekly Summary - 22&#x2F;52</title>
          <pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-22/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-22/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-22/">&lt;p&gt;Another pretty decent week. Mostly concentrated on job hunt and API inspection.&lt;&#x2F;p&gt;
&lt;p&gt;Things I did:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;worked more on some API inspection. published two posts on it. working on lib.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;reverse-engineering-udisc-api-part-1&#x2F;&quot;&gt;Part 1 - Courses&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;reverse-engineering-udisc-api-part-2&#x2F;&quot;&gt;Part 2 - Search&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;continued Swedish language studies - 172 days in a row&lt;&#x2F;li&gt;
&lt;li&gt;sent out 13 applications&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Things that I didn&#x27;t get to work on much:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;rust&lt;&#x2F;li&gt;
&lt;li&gt;gitea server&lt;&#x2F;li&gt;
&lt;li&gt;nixos setup&lt;&#x2F;li&gt;
&lt;li&gt;rockpro64 setup&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>Deploying a Zola static site to a custom domain with Github Actions</title>
          <pubDate>Sat, 24 May 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/deploying-static-site-zola-github-actions/</link>
          <guid>https://jakegoldsborough.com/blog/2025/deploying-static-site-zola-github-actions/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/deploying-static-site-zola-github-actions/">&lt;p&gt;As I&#x27;ve been searching for a new gig, I&#x27;ve gotten the urge to write a bit more
about some of the stuff I&#x27;m up to to help make myself stand out. I really like
using the fewest tools as needed so I knew a static site generator was what I
wanted. I also like to use Rust based tools when possible.&lt;&#x2F;p&gt;
&lt;p&gt;Searching for Rust static site generators lead me to
&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Some of the top advertised features are no dependencies, blazingly fast,
and easy to use. Those sound great to me.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;set-up-zola-site&quot;&gt;Set up Zola site&lt;&#x2F;h3&gt;
&lt;p&gt;While this isn&#x27;t a few blown Zola tutorial, I did want to include a few things.&lt;&#x2F;p&gt;
&lt;p&gt;After installing Zola, you can simply run &lt;code&gt;zola init myblog&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll be asked a few questions and a base site will be setup for you.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;├── config.toml
&lt;&#x2F;span&gt;&lt;span&gt;├── content
&lt;&#x2F;span&gt;&lt;span&gt;├── sass
&lt;&#x2F;span&gt;&lt;span&gt;├── static
&lt;&#x2F;span&gt;&lt;span&gt;├── templates
&lt;&#x2F;span&gt;&lt;span&gt;└── themes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Without going too deep, your CommonMark pages will go in &lt;code&gt;content&lt;&#x2F;code&gt;, Tera&#x2F;HTML
templates in &lt;code&gt;templates&lt;&#x2F;code&gt;, and any css&#x2F;js&#x2F;images or other static content will go
in &lt;code&gt;static&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;SASS is enabled by default but can be disabled. I am not currently using SASS
personally.&lt;&#x2F;p&gt;
&lt;p&gt;Running &lt;code&gt;zola build&lt;&#x2F;code&gt; will build the site and output it a directory called &lt;code&gt;public&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a link to a complete overview:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;overview&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;overview&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;push-to-github-create-github-actions-workflow&quot;&gt;Push to Github &amp;amp; Create Github Actions workflow&lt;&#x2F;h3&gt;
&lt;p&gt;After getting your content written, site styled, and ready for deployment, it&#x27;s time to
push to Github. Create a repo and push it to a &lt;code&gt;main&lt;&#x2F;code&gt; branch (exclude the &lt;code&gt;public&lt;&#x2F;code&gt;
directory).&lt;&#x2F;p&gt;
&lt;p&gt;Next, we will setup the actual workflow to take our input files, setup zola,
build the site, and commit it to the correct branch.&lt;&#x2F;p&gt;
&lt;p&gt;Create a file at &lt;code&gt;.github&#x2F;workflows&#x2F;deploy.yml&lt;&#x2F;code&gt; and insert this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;name: Deploy Zola to GitHub Pages
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;on:
&lt;&#x2F;span&gt;&lt;span&gt;  push:
&lt;&#x2F;span&gt;&lt;span&gt;    branches: [main]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;jobs:
&lt;&#x2F;span&gt;&lt;span&gt;  build-deploy:
&lt;&#x2F;span&gt;&lt;span&gt;    runs-on: ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    steps:
&lt;&#x2F;span&gt;&lt;span&gt;    - name: Check out source
&lt;&#x2F;span&gt;&lt;span&gt;      uses: actions&#x2F;checkout@v4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - name: Install Zola
&lt;&#x2F;span&gt;&lt;span&gt;      run: |
&lt;&#x2F;span&gt;&lt;span&gt;        curl -L https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;releases&#x2F;download&#x2F;v0.20.0&#x2F;zola-v0.20.0-x86_64-unknown-linux-gnu.tar.gz -o zola.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;        tar -xzf zola.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;        sudo mv zola &#x2F;usr&#x2F;local&#x2F;bin&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - name: Build site
&lt;&#x2F;span&gt;&lt;span&gt;      run: zola build
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - name: Deploy to GitHub Pages
&lt;&#x2F;span&gt;&lt;span&gt;      uses: peaceiris&#x2F;actions-gh-pages@v3
&lt;&#x2F;span&gt;&lt;span&gt;      with:
&lt;&#x2F;span&gt;&lt;span&gt;        github_token: ${{ secrets.GITHUB_TOKEN }}
&lt;&#x2F;span&gt;&lt;span&gt;        publish_dir: .&#x2F;public
&lt;&#x2F;span&gt;&lt;span&gt;        publish_branch: gh-pages
&lt;&#x2F;span&gt;&lt;span&gt;        force_orphan: true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This setups up a workflow that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;watches for pushes to main branch&lt;&#x2F;li&gt;
&lt;li&gt;checks out the zola source and installs it&lt;&#x2F;li&gt;
&lt;li&gt;builds your site using zola build&lt;&#x2F;li&gt;
&lt;li&gt;uses github pages plugin to push &lt;code&gt;public&lt;&#x2F;code&gt; output dir to a &lt;code&gt;gh-pages&lt;&#x2F;code&gt; branch&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You will also need to go to your repos settings and look for the actions section
to enable write permissions.&lt;&#x2F;p&gt;
&lt;p&gt;Push this up and watch the build by going to your repo and clicking the &quot;Actions&quot;
tab. You will see a workflow that you can click into and see build and deploy
jobs.&lt;&#x2F;p&gt;
&lt;p&gt;If everything goes well, you can now  visit your site by filling in your values:&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;${username}.github.io&#x2F;${repo}&lt;&#x2F;p&gt;
&lt;h3 id=&quot;add-custom-domain-optional&quot;&gt;Add Custom Domain (optional)&lt;&#x2F;h3&gt;
&lt;p&gt;After you have the initial workflow working, you will need to configure some
Github settings for a custom domain.&lt;&#x2F;p&gt;
&lt;p&gt;First, run &lt;code&gt;echo &quot;yourdomain.com&quot; &amp;gt; static&#x2F;CNAME&lt;&#x2F;code&gt; and commit this file.
Next, go to your Github repo&#x27;s &quot;Pages&quot; setting and add the domain name.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;configure-dns-optional&quot;&gt;Configure DNS (optional)&lt;&#x2F;h3&gt;
&lt;p&gt;If using a custom domain, you will also need to setup DNS. Go to your domain
settings and add 4 A records for Github pages:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;A	@	185.199.108.153
&lt;&#x2F;span&gt;&lt;span&gt;A	@	185.199.109.153
&lt;&#x2F;span&gt;&lt;span&gt;A	@	185.199.110.153
&lt;&#x2F;span&gt;&lt;span&gt;A	@	185.199.111.153
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Setup any subdirectories you might want.&lt;&#x2F;p&gt;
&lt;p&gt;You may need to give this step some extra time to update before you can
see your new site at your custom URL. Other times it&#x27;s nearly instant so your
results may vary.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;profit&quot;&gt;Profit&lt;&#x2F;h3&gt;
&lt;p&gt;That&#x27;s basically it for a basic setup. You should now have a static site
setup at a custom domain that gets automatically built by just pushing a branch.&lt;&#x2F;p&gt;
&lt;p&gt;While simple, this is a complete setup that let&#x27;s you create and deploy content
to your own URL with ease.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Weekly Summary - 21&#x2F;52</title>
          <pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-21/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-21/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-21/">&lt;p&gt;This has been a pretty productive week.&lt;&#x2F;p&gt;
&lt;p&gt;Things that were good:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;RockPro64 boots again! Blog post coming...&lt;&#x2F;li&gt;
&lt;li&gt;continued Swedish language studies - 165 days&lt;&#x2F;li&gt;
&lt;li&gt;started work on some API inspection. Another blog post coming...&lt;&#x2F;li&gt;
&lt;li&gt;figured out nixos&#x2F;hyprland boot issue&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Things that could be better:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;didn&#x27;t work on much rust&lt;&#x2F;li&gt;
&lt;li&gt;can&#x27;t get gitea ssh setup on VPS&lt;&#x2F;li&gt;
&lt;li&gt;broke wood router part so had to buy new one to work on utensil rest&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>NixOS as a daily driver on a late 2011 Macbook Pro, part 1&#x2F;? - What and why?</title>
          <pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-1/</link>
          <guid>https://jakegoldsborough.com/blog/2025/nixos-daily-driver-1/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/nixos-daily-driver-1/">&lt;p&gt;First, it&#x27;s worth explaining what NixOS is and why I or anyone would want to
run it as a daily driver.&lt;&#x2F;p&gt;
&lt;p&gt;But even before diving into NixOS, we have to talk about Nix.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nix&quot;&gt;Nix&lt;&#x2F;h3&gt;
&lt;p&gt;Nix is a package manager that is purely functional and creates reproducible
builds specified in the Nix Expression Language. Nix expressions are functions
that take dependencies as arguments which creates a &lt;em&gt;derivation&lt;&#x2F;em&gt; that specifies
a reproducible build environment. Nix then stores the results of the build at
unique address specified by a hash of the complete dependency tree. This
is known as the Nix store and it&#x27;s immutable which allows atomic upgrades,
rollbacks, and simultaneous installations of packages with different versions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nixos&quot;&gt;NixOS&lt;&#x2F;h3&gt;
&lt;p&gt;NixOS is an operating system that is built on top of Nix and the idea of purely
functional package management. Packages are never overwritten once built. If
you change the Nix expression for a package, it will be rebuilt, and stored
under a new address with a new hash, preventing interference with an old version.&lt;&#x2F;p&gt;
&lt;p&gt;NixOS takes this a step further and applies this to configuration. By building
your entire system from a Nix expression, NixOS ensures that your old
configuration is never overwritten which allows for easy rollbacks. One big
caveat of this is the elimination of &quot;global&quot; directores such as &lt;code&gt;&#x2F;bin&lt;&#x2F;code&gt;,
&lt;code&gt;&#x2F;lib&lt;&#x2F;code&gt;, &lt;code&gt;&#x2F;usr&lt;&#x2F;code&gt;, etc. All packages are kept in &lt;code&gt;&#x2F;nix&#x2F;store&lt;&#x2F;code&gt; under a hashed
address. (One exception is a symlink &lt;code&gt;&#x2F;bin&#x2F;sh&lt;&#x2F;code&gt; to Bash in the Nix store). There
is a &lt;code&gt;&#x2F;etc&lt;&#x2F;code&gt; for system-wide config but many of those files are symlinks to files
in the Nix store.&lt;&#x2F;p&gt;
&lt;p&gt;Everything in NixOS is built by the Nix package manager. This includes the
kernel, applications, system packages, and configuration.&lt;&#x2F;p&gt;
&lt;p&gt;To configure NixOS, you have a file at &lt;code&gt;&#x2F;etc&#x2F;nixos&#x2F;configuration.nix&lt;&#x2F;code&gt;.
You will setup everything from your boot devices to what services you want
to run.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a minimal config that enables sshd:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  boot.loader.grub.device = &amp;quot;&#x2F;dev&#x2F;sda&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  fileSystems.&amp;quot;&#x2F;&amp;quot;.device = &amp;quot;&#x2F;dev&#x2F;sda1&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  services.sshd.enable = true;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;More on this later though.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why&quot;&gt;Why?&lt;&#x2F;h3&gt;
&lt;p&gt;Now the whys. I think many of them speak for themselves but here are mine:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Rollbacks&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This one is very big especially when learning about a new, drastically different
OS like Nix. Because old config is never overwritten, you can easily cause a
breaking change without being worried about how to fix it (unless maybe it&#x27;s
bootloader related). In fact, old configs are listed in the boot menu.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Reproducible Build Configurations&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Kind of like a rollback but starting from scratch. You can take the
&lt;code&gt;configuration.nix&lt;&#x2F;code&gt; file, copy to another machine, rebuild, and you will have
the same applications, services, and configuration as before.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Ad-hoc shell environments&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In a &quot;Nix shell&quot;, you can use any program that is packaged with Nix without
needing to install permanently.&lt;&#x2F;p&gt;
&lt;p&gt;For example, you can run &lt;code&gt;nix-shell -p git neovim node&lt;&#x2F;code&gt; and you will be dropped
into a shell with those applications installed. This may take some time
depending on the applications installed.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;It&#x27;s a new way to think&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Honestly, I just like trying new stuff, especially when it&#x27;s done in a new way.
Linux has mostly been the same for a long time now, so it&#x27;s refreshing to see
a new way of doing it that also improves on an already solid OS. I also
have really fallen in love with DevOps&#x2F;IaC type of work, and NixOS definitely
scratches that itch.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;next-time&quot;&gt;Next time&lt;&#x2F;h3&gt;
&lt;p&gt;In the next post, I will go over how to install NixOS and maybe a bit of the
configuration.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Weekly Summary - 20&#x2F;52</title>
          <pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/weekly-summary-20/</link>
          <guid>https://jakegoldsborough.com/blog/2025/weekly-summary-20/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/weekly-summary-20/">&lt;p&gt;I am starting a weekly summary&#x2F;reflection series that will be a high level
view of things I have worked on or fixed or just things I want to track or note.&lt;&#x2F;p&gt;
&lt;p&gt;Things I enjoyed:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;deployed this site&lt;&#x2F;li&gt;
&lt;li&gt;got an old raspberry pi running again&lt;&#x2F;li&gt;
&lt;li&gt;started back into some rust learnings with blockchain, TUI, and MQTT hacking
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;started working on a walnut utensil rest&lt;&#x2F;li&gt;
&lt;li&gt;applied to 10 jobs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Things I did not enjoy:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;seemingly bricked my RockPro64 as it won&#x27;t boot past a black screen. ordered
an adapater to help debug at a lower level.&lt;&#x2F;li&gt;
&lt;li&gt;rejected from multiple jobs&lt;&#x2F;li&gt;
&lt;li&gt;felt very confused by some of the rust learnings. makes sense in pieces but
hard to see as the whole picture just yet&lt;&#x2F;li&gt;
&lt;li&gt;confirmed old fitbit can&#x27;t be flashed with any open source&#x2F;non-fitbit software&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ratatui.rs&#x2F;concepts&#x2F;application-patterns&#x2F;the-elm-architecture&#x2F;&quot;&gt;https:&#x2F;&#x2F;ratatui.rs&#x2F;concepts&#x2F;application-patterns&#x2F;the-elm-architecture&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;veeso&#x2F;tui-realm&#x2F;tree&#x2F;main&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;veeso&#x2F;tui-realm&#x2F;tree&#x2F;main&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytebeamio&#x2F;rumqtt&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;bytebeamio&#x2F;rumqtt&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</description>
      </item>
    </channel>
</rss>
