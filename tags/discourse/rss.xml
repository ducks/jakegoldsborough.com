<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Jake Goldsborough - discourse</title>
      <link>https://jakegoldsborough.com</link>
      <description></description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://jakegoldsborough.com/tags/discourse/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Sun, 26 Oct 2025 00:00:00 +0000</lastBuildDate>
      <item>
          <title>Building The Guest Spot: Part 2 - Two Refactors</title>
          <pubDate>Sun, 26 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-the-guest-spot-part-2/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-the-guest-spot-part-2/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-the-guest-spot-part-2/">&lt;p&gt;In &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-the-guest-spot-part-1&#x2F;&quot;&gt;Part 1&lt;&#x2F;a&gt;, I built an Instagram-style showcase using a custom &lt;code&gt;GuestSpotPost&lt;&#x2F;code&gt; model. It worked. But it also meant maintaining a parallel data structure instead of leveraging what Discourse already provides.&lt;&#x2F;p&gt;
&lt;p&gt;This post covers two major refactors: first from custom models to Discourse Topics, then from custom feed infrastructure to plugin outlets. Each time, less code gave me more features.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-refactor&quot;&gt;Why Refactor?&lt;&#x2F;h2&gt;
&lt;p&gt;The custom model approach had problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Duplicate logic: Comments, moderation, spam protection already exist for Topics&lt;&#x2F;li&gt;
&lt;li&gt;Extra maintenance: Every time Discourse updates, potential breakage&lt;&#x2F;li&gt;
&lt;li&gt;Missing features: No native file upload, no revision history, no trust levels&lt;&#x2F;li&gt;
&lt;li&gt;More code: Separate serializers, separate permissions, separate everything&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Discourse Topics already have everything we need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;First post holds the caption and images&lt;&#x2F;li&gt;
&lt;li&gt;Title can be auto-generated&lt;&#x2F;li&gt;
&lt;li&gt;Categories handle public vs private&lt;&#x2F;li&gt;
&lt;li&gt;Pinning is built-in&lt;&#x2F;li&gt;
&lt;li&gt;Commenting works out of the box&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The showcase is just a custom view of Topics in the &quot;Public Feed&quot; category.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-refactor&quot;&gt;The Refactor&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;backend-changes&quot;&gt;Backend Changes&lt;&#x2F;h3&gt;
&lt;p&gt;Deleted the entire &lt;code&gt;GuestSpotPost&lt;&#x2F;code&gt; model and migrations. Instead, the controller now works with Topics:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# app&#x2F;controllers&#x2F;guest_spot&#x2F;posts_controller.rb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;index
&lt;&#x2F;span&gt;&lt;span&gt;  category_id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CategoryHelper&lt;&#x2F;span&gt;&lt;span&gt;.public_feed_category_id
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  topics = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Topic
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category_id:&lt;&#x2F;span&gt;&lt;span&gt; category_id)
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deleted_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .includes(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;posts: :uploads&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .order(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;created_at: :desc&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .limit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  pinned_topics = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Topic
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category_id:&lt;&#x2F;span&gt;&lt;span&gt; category_id)
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deleted_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .where.not(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pinned_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .includes(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;posts: :uploads&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .order(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;created_at: :desc&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  render &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;json: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;posts:&lt;&#x2F;span&gt;&lt;span&gt; serialize_data(topics, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GuestSpotPostSerializer&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pinned:&lt;&#x2F;span&gt;&lt;span&gt; serialize_data(pinned_topics, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GuestSpotPostSerializer&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The serializer extracts what we need from Topics:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# app&#x2F;serializers&#x2F;guest_spot_post_serializer.rb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GuestSpotPostSerializer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ApplicationSerializer
&lt;&#x2F;span&gt;&lt;span&gt;  attributes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:username&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:caption&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:image_urls&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:created_at&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:pinned
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;caption
&lt;&#x2F;span&gt;&lt;span&gt;    object.first_post&amp;amp;.raw || &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;image_urls
&lt;&#x2F;span&gt;&lt;span&gt;    object.first_post.uploads.map { |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;upload&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;UrlHelper&lt;&#x2F;span&gt;&lt;span&gt;.absolute(upload.url) }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pinned
&lt;&#x2F;span&gt;&lt;span&gt;    object.pinned_at.present?
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Caption is the post content. Images come from uploads. Pinned status is the native &lt;code&gt;pinned_at&lt;&#x2F;code&gt; field.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;creating-posts&quot;&gt;Creating Posts&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of &lt;code&gt;GuestSpotPost.create&lt;&#x2F;code&gt;, we use &lt;code&gt;TopicCreator&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create
&lt;&#x2F;span&gt;&lt;span&gt;  category_id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CategoryHelper&lt;&#x2F;span&gt;&lt;span&gt;.public_feed_category_id
&lt;&#x2F;span&gt;&lt;span&gt;  title = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;#{current_user.username}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span&gt;#{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_i&lt;&#x2F;span&gt;&lt;span&gt;}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  topic_creator = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TopicCreator&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    current_user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Guardian&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(current_user),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category:&lt;&#x2F;span&gt;&lt;span&gt; category_id,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title:&lt;&#x2F;span&gt;&lt;span&gt; title,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;raw:&lt;&#x2F;span&gt;&lt;span&gt; params[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:caption&lt;&#x2F;span&gt;&lt;span&gt;] || &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  topic = topic_creator.create
&lt;&#x2F;span&gt;&lt;span&gt;  render_serialized(topic, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GuestSpotPostSerializer&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Auto-generated titles keep them unique. The caption goes in the first post&#x27;s raw content. Image uploads attach automatically through Discourse&#x27;s existing upload system.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;frontend-changes&quot;&gt;Frontend Changes&lt;&#x2F;h3&gt;
&lt;p&gt;Frontend barely changed. The serializer provides the same JSON structure, so components worked as-is. The only update was changing &lt;code&gt;@post.id&lt;&#x2F;code&gt; to reference topic IDs instead of custom model IDs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-this-got-us&quot;&gt;What This Got Us&lt;&#x2F;h3&gt;
&lt;p&gt;The refactor from custom models to Topics gave us:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Comments work natively (no custom implementation)&lt;&#x2F;li&gt;
&lt;li&gt;Moderation tools work (flags, hiding, deleting)&lt;&#x2F;li&gt;
&lt;li&gt;File uploads work (native uploader)&lt;&#x2F;li&gt;
&lt;li&gt;Revision history works (edit tracking)&lt;&#x2F;li&gt;
&lt;li&gt;Trust levels work (spam protection)&lt;&#x2F;li&gt;
&lt;li&gt;All for free, by using what Discourse already provides&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But I still had a custom feed with its own routes, controllers, and serializers. That was the next problem to solve.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;going-native-deleting-the-custom-feed&quot;&gt;Going Native: Deleting the Custom Feed&lt;&#x2F;h2&gt;
&lt;p&gt;In Part 1, I built a custom &lt;code&gt;GuestSpotPost&lt;&#x2F;code&gt; model. Then I realized that was
overkill and refactored to use Discourse Topics. But I kept the custom feed
with its own routes, controllers, and serializers.&lt;&#x2F;p&gt;
&lt;p&gt;After implementing that custom feed, I realized there was an uncomfortable
disconnect. Users would browse an Instagram-style feed, click a post, and
suddenly land in Discourse&#x27;s standard topic view. The context switch was jarring.&lt;&#x2F;p&gt;
&lt;p&gt;The question became: why maintain a custom feed at all? If the custom model
was unnecessary, maybe the custom feed was too.&lt;&#x2F;p&gt;
&lt;p&gt;Discourse already has everything we need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Category pages show topic lists&lt;&#x2F;li&gt;
&lt;li&gt;Category permissions control who can post and who can view&lt;&#x2F;li&gt;
&lt;li&gt;Native pinning highlights featured content&lt;&#x2F;li&gt;
&lt;li&gt;Theme system allows extensive visual customization&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Instead of maintaining a parallel feed system, we could just make the Public
Feed category look great using plugin outlets.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-deletion&quot;&gt;The Deletion&lt;&#x2F;h3&gt;
&lt;p&gt;I deleted the entire custom feed infrastructure:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Removed (1,078 lines)&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Custom feed routes and controllers (&lt;code&gt;guest_spot&#x2F;feed_controller.rb&lt;&#x2F;code&gt;,
&lt;code&gt;guest_spot&#x2F;posts_controller.rb&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Custom post serializer (&lt;code&gt;guest_spot_post_serializer.rb&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;All custom Ember components (&lt;code&gt;guest-spot-feed.gjs&lt;&#x2F;code&gt;,
&lt;code&gt;guest-spot-post-card.gjs&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Custom route definitions and templates&lt;&#x2F;li&gt;
&lt;li&gt;Multiple initializers for hiding UI elements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Added (264 lines)&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Single plugin outlet connector:
&lt;code&gt;assets&#x2F;javascripts&#x2F;discourse&#x2F;connectors&#x2F;topic-list-item&#x2F;guest-spot-item.gjs&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;CSS Grid layout for responsive cards&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Net result: 814 fewer lines of code.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;plugin-outlets-the-right-pattern&quot;&gt;Plugin Outlets: The Right Pattern&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse provides plugin outlets - extension points where plugins can inject
custom HTML. There are two types:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Regular outlets&lt;&#x2F;strong&gt; inject content but Discourse still renders the default
elements. &lt;strong&gt;Wrapper outlets&lt;&#x2F;strong&gt; completely replace the template.&lt;&#x2F;p&gt;
&lt;p&gt;I used the &lt;code&gt;topic-list-item&lt;&#x2F;code&gt; wrapper outlet to completely replace how topics
display in the Public Feed category:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@glimmer&#x2F;component&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;avatar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;discourse&#x2F;helpers&#x2F;avatar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replaceEmoji &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;discourse&#x2F;helpers&#x2F;replace-emoji&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;formatDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;discourse&#x2F;helpers&#x2F;format-date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GuestSpotItem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;isPublicFeed&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;slug &lt;&#x2F;span&gt;&lt;span&gt;=== &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;public-feed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;truncatedExcerpt&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excerpt &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excerpt &lt;&#x2F;span&gt;&lt;span&gt;|| &amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excerpt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.length &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excerpt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excerpt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;substring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &amp;lt;template&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    {{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isPublicFeed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;td class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic-list-data guest-spot-card&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-author&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;u&#x2F;{{this.args.outletArgs.topic.creator.username}}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;avatar this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;creator imageSize&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;medium&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;              {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;creator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-image&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{{this.args.outletArgs.topic.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img src&lt;&#x2F;span&gt;&lt;span&gt;={{this.args.outletArgs.topic.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image_url&lt;&#x2F;span&gt;&lt;span&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alt&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-excerpt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replaceEmoji this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;truncatedExcerpt&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-metadata&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;meta-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Views: {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;views&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;meta-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Replies: {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;posts_count&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;meta-item&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Posted: {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;formatDate this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outletArgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;createdAt
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;leaveAgo&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      {{@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;    {{&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The component checks if we&#x27;re in the public-feed category. If yes, render the
custom card layout. If no, render the default (&lt;code&gt;{{@default}}&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;css-grid-for-responsive-layout&quot;&gt;CSS Grid for Responsive Layout&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of JavaScript handling the layout, CSS Grid does all the work:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;category-public-feed &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;topic-list &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    display: grid;
&lt;&#x2F;span&gt;&lt;span&gt;    grid-template-columns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span&gt;(auto-fill, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;minmax&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;280px&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1fr&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    gap: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.5rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@media &lt;&#x2F;span&gt;&lt;span&gt;(max-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;480px&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      grid-template-columns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1fr&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;topic-list-item &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      display: flex;
&lt;&#x2F;span&gt;&lt;span&gt;      flex-direction: column;
&lt;&#x2F;span&gt;&lt;span&gt;      border-radius: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      overflow: hidden;
&lt;&#x2F;span&gt;&lt;span&gt;      background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(--primary-very-low);
&lt;&#x2F;span&gt;&lt;span&gt;      transition: transform &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.2s&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;hover &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        transform: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;translateY&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;-2px&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On mobile, it collapses to a single column. On tablet and desktop, it flows
naturally based on available space.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;guest-spot-mobile-3.png&quot; alt=&quot;Mobile view of The Guest Spot showing a nature image from Tattoo Mike&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;guest-spot-feed-1.png&quot; alt=&quot;Desktop view of The Guest Spot showing a grid of tattoo pictures&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;discovery-process&quot;&gt;Discovery Process&lt;&#x2F;h3&gt;
&lt;p&gt;Finding the right plugin outlet took some research. I used &lt;code&gt;rg&lt;&#x2F;code&gt; to search
Discourse core for available outlets:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rg &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PluginOutlet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; app&#x2F;assets&#x2F;javascripts&#x2F;discourse&#x2F;app&#x2F;components&#x2F; \
&lt;&#x2F;span&gt;&lt;span&gt;  | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; topic-list
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Found several candidates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;topic-list-before-link&lt;&#x2F;code&gt; - Injects before the title link (still renders
default content)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;topic-list-after-title&lt;&#x2F;code&gt; - Injects after the title (still renders default
content)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;topic-list-item&lt;&#x2F;code&gt; - Wrapper outlet (replaces entire template)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The wrapper outlet was key. Regular outlets would have shown both my custom
card and the default topic row, creating duplicate content.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-works-now&quot;&gt;What Works Now&lt;&#x2F;h3&gt;
&lt;p&gt;The native approach gives us:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Comments work out of the box (no custom implementation needed)&lt;&#x2F;li&gt;
&lt;li&gt;All Discourse features work (moderation, flags, bookmarks, etc.)&lt;&#x2F;li&gt;
&lt;li&gt;814 fewer lines of code to maintain&lt;&#x2F;li&gt;
&lt;li&gt;Better mobile support (Grid automatically adapts)&lt;&#x2F;li&gt;
&lt;li&gt;No custom API (no serializers, controllers, or routes)&lt;&#x2F;li&gt;
&lt;li&gt;Pin&#x2F;unpin still works (using Discourse&#x27;s native pinning)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The showcase is now just &quot;a really nicely styled Discourse category&quot; instead
of &quot;a custom app built on top of Discourse.&quot;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vibe-coding-pros-and-cons&quot;&gt;Vibe Coding: Pros and Cons&lt;&#x2F;h2&gt;
&lt;p&gt;This project is a perfect example of &quot;vibe coding&quot; - building something by
feel, iterating quickly, and learning what works through trial and error.&lt;&#x2F;p&gt;
&lt;p&gt;I started with a custom model because that felt right. Then I realized Topics
already did everything I needed. I built a custom feed because I wanted full
control. Then I realized plugin outlets gave me that control without the
maintenance burden.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The downside&lt;&#x2F;strong&gt;: I went too fast and tried too much. Each iteration meant
throwing away code. The custom model, the custom feed infrastructure - all
that work ended up deleted. If I&#x27;d researched Discourse patterns first, I
could have gone straight to the plugin outlet approach.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The upside&lt;&#x2F;strong&gt;: I learned way more by doing it wrong first. I understand why
wrapper outlets exist, because I felt the pain of duplicate content with
regular outlets. I understand why Discourse&#x27;s native features are powerful,
because I tried to rebuild them and saw how much work that is.&lt;&#x2F;p&gt;
&lt;p&gt;Fast iteration meant I could course-correct. I wasn&#x27;t six months into building
a custom ORM before realizing Topics existed. I was a few days in, so
refactoring didn&#x27;t hurt. The velocity of vibe coding let me try ideas, see
them fail, and pivot quickly.&lt;&#x2F;p&gt;
&lt;p&gt;The final result is simple and maintainable. It took three iterations to get
there, but each iteration taught me something. Now I know how to not do things,
which is just as valuable as knowing how to do them.&lt;&#x2F;p&gt;
&lt;p&gt;The code is on GitHub: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-guest-spot&quot;&gt;discourse-guest-spot&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building The Guest Spot: Part 1 - My First Community</title>
          <pubDate>Sat, 25 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-the-guest-spot-part-1/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-the-guest-spot-part-1/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-the-guest-spot-part-1/">&lt;p&gt;I&#x27;m not exactly a social butterfly. I can enjoy small groups of like minded people
talking about our interests but small talk really drains me. I&#x27;m much happier
with a computer, book, or just sitting out in the woods.&lt;&#x2F;p&gt;
&lt;p&gt;Since joining Discourse a few months ago, I&#x27;ve been learning the platform by
building weird experiments. A transit departure board. A virtual currency
system. Tools that push Discourse in directions it wasn&#x27;t designed for. But
they&#x27;ve all been technical exercises. Solo projects. Learning by doing, but
doing alone.&lt;&#x2F;p&gt;
&lt;p&gt;The Guest Spot is different. This is my first time helping build something for
an actual community of people. Real artists who will (hopefully) use this
thing. Not just me poking at APIs and seeing what breaks.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s exciting. And a little terrifying.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-the-idea-evolved&quot;&gt;How The Idea Evolved&lt;&#x2F;h2&gt;
&lt;p&gt;The original concept was simple: a private forum for tattoo artists. A place
where people in the industry could talk shop, share techniques, discuss
challenges. No clients. No tourists. Just professionals.&lt;&#x2F;p&gt;
&lt;p&gt;But then I started thinking about how artists actually share their work.
Instagram. Almost every tattoo artist is on Instagram. It&#x27;s where they build
their portfolio, attract clients, establish their style. But they don&#x27;t own any
of it. The algorithm decides who sees their posts. Instagram decides what gets
buried or promoted. If Instagram changes the rules or shuts down tomorrow, years
of work disappears.&lt;&#x2F;p&gt;
&lt;p&gt;What if artists could have both? A professional forum for discussion and a
public showcase for their work. Same platform, same data, but they own it all.
No algorithm deciding what gets seen. No corporate platform that could pull the
rug out.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s when the concept clicked: build the Instagram-style feed as the front
door, with the private forum as the main room. Artists get a beautiful public
portfolio plus a real community space. All on infrastructure they control.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-the-guest-spot&quot;&gt;What Is The Guest Spot?&lt;&#x2F;h2&gt;
&lt;p&gt;The result: an Instagram-style public showcase for tattoo artists, powered by
Discourse.&lt;&#x2F;p&gt;
&lt;p&gt;Artists can post photos of their work in a clean, visual feed. Pinned posts
appear in a horizontal carousel at the top. Recent work flows down below in a
responsive grid. Click any image and you get a full detail page with all the
context.&lt;&#x2F;p&gt;
&lt;p&gt;And if you&#x27;ve been vetted, behind the public feed is a private, invite-only
Discourse forum. The showcase is the front door. The forum is where the real
community happens. Artists can discuss techniques, share experiences, ask
questions. It&#x27;s gated access because tattoo culture values quality and trust.&lt;&#x2F;p&gt;
&lt;p&gt;Think of it as Instagram&#x27;s visual presentation meets forum depth, with Discourse
handling both sides.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-discourse-makes-sense-here&quot;&gt;Why Discourse Makes Sense Here&lt;&#x2F;h2&gt;
&lt;p&gt;Discourse isn&#x27;t Instagram. It&#x27;s not designed to be a photo showcase. But it has
everything we need to build one:&lt;&#x2F;p&gt;
&lt;p&gt;Custom fields store image URLs and captions. Categories and tags organize
content. The permission system handles public showcase vs private forum.&lt;&#x2F;p&gt;
&lt;p&gt;Most importantly, Discourse is built for communities. The forum infrastructure
is already there. We&#x27;re just adding a pretty front door.&lt;&#x2F;p&gt;
&lt;p&gt;And unlike Instagram, artists own everything. The database, the images, the
content. They can export it all. No algorithm. No corporate overlord. Just their
work, on their terms.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-ve-built-so-far&quot;&gt;What I&#x27;ve Built So Far&lt;&#x2F;h2&gt;
&lt;p&gt;Backend is straightforward Rails stuff:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GuestSpotPost&lt;&#x2F;code&gt; model with image URLs (stored as arrays), captions, and
pinned status&lt;&#x2F;li&gt;
&lt;li&gt;Migrations for the database schema&lt;&#x2F;li&gt;
&lt;li&gt;Controllers that handle CRUD operations and serve JSON to the frontend&lt;&#x2F;li&gt;
&lt;li&gt;Serializers that package post data with user info&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Frontend is where it gets interesting. Modern Discourse uses Glimmer components,
which are Ember&#x27;s latest component format. Template and logic live in the same
&lt;code&gt;.gjs&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GuestSpotPostCard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;firstImage&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image_urls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;?.[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &amp;lt;template&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LinkTo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-post&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{{@post.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-post-card&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;      {{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firstImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img src&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{{this.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;firstImage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alt&lt;&#x2F;span&gt;&lt;span&gt;={{@post.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;caption&lt;&#x2F;span&gt;&lt;span&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post-image&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      {{&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post-meta&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post-author&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;avatar &lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user imageSize&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;small&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;{{@post.user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;.caption}}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post-caption&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;{{@post.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;caption&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {{&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pinned&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pinned-badge&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Featured&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        {{&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LinkTo&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The card is a link. Click it, you go to the full post page. The whole thing is
wrapped in a &lt;code&gt;LinkTo&lt;&#x2F;code&gt; component so the entire card is interactive.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-feed-page&quot;&gt;The Feed Page&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;guest-spot-mobile-1.png&quot; alt=&quot;A mobile friendly layout of feed with tattoo posts from artists&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Two sections: pinned posts in a horizontal carousel, recent posts in a
responsive grid.&lt;&#x2F;p&gt;
&lt;p&gt;The carousel uses CSS flexbox with &lt;code&gt;scroll-snap-type: x mandatory&lt;&#x2F;code&gt; so it feels
smooth on mobile. On phones, each card takes up 80% of the viewport width. On
tablets, 250px. On desktop, 300px. Pure CSS, no JavaScript.&lt;&#x2F;p&gt;
&lt;p&gt;The grid uses CSS Grid with &lt;code&gt;auto-fill&lt;&#x2F;code&gt; and &lt;code&gt;minmax()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;posts-grid &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  display: grid;
&lt;&#x2F;span&gt;&lt;span&gt;  grid-template-columns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span&gt;(auto-fill, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;minmax&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;250px&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1fr&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  gap: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.5rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@media &lt;&#x2F;span&gt;&lt;span&gt;(max-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;768px&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    grid-template-columns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span&gt;(auto-fill, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;minmax&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;150px&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1fr&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    gap: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@media &lt;&#x2F;span&gt;&lt;span&gt;(max-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;480px&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    grid-template-columns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1fr&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    gap: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.75rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On phones, we force a single column so cards stay large enough to see the artwork clearly. On tablets and desktops, it flows naturally based on available space.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-post-page&quot;&gt;The Post Page&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;guest-spot-mobile-2.png&quot; alt=&quot;A single page post of a tattoo showing cool birds&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Click any card and you get the full post view. It&#x27;s designed to let the artwork breathe while keeping all the important context visible.&lt;&#x2F;p&gt;
&lt;p&gt;The layout is simple:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Back link at the top (returns to feed)&lt;&#x2F;li&gt;
&lt;li&gt;Full-size image(s) with &lt;code&gt;object-fit: contain&lt;&#x2F;code&gt; so nothing gets cropped&lt;&#x2F;li&gt;
&lt;li&gt;Artist info (avatar + username)&lt;&#x2F;li&gt;
&lt;li&gt;Full caption with preserved line breaks&lt;&#x2F;li&gt;
&lt;li&gt;Pinned badge if applicable&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Images are wrapped in a card design with rounded corners and subtle shadow. On mobile, padding reduces and max image height adjusts so everything fits nicely on smaller screens. The whole page uses the same responsive breakpoints as the feed (768px for tablets, 480px for phones).&lt;&#x2F;p&gt;
&lt;p&gt;All contained in a centered column with max-width of 900px. Clean, focused, lets the work be the star.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hiding-the-sidebar&quot;&gt;Hiding the Sidebar&lt;&#x2F;h2&gt;
&lt;p&gt;Guest Spot has its own route at &lt;code&gt;&#x2F;guest-spot&lt;&#x2F;code&gt;. But Discourse has a persistent
sidebar. For a public showcase, that doesn&#x27;t make sense. Artists posting work
shouldn&#x27;t see forum navigation.&lt;&#x2F;p&gt;
&lt;p&gt;First attempt: route lifecycle hooks.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GuestSpotFeedRoute &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DiscourseRoute &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;activate&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;activate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appController &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;controllerFor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;showSidebar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    document.body.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-page&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deactivate&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appController &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;controllerFor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;showSidebar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    document.body.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;guest-spot-page&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deactivate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This hides the sidebar. But the hamburger button (&lt;code&gt;.header-sidebar-toggle&lt;&#x2F;code&gt;)
stays visible. Users can toggle it back. Not ideal.&lt;&#x2F;p&gt;
&lt;p&gt;CSS didn&#x27;t work. Setting controller properties didn&#x27;t work. So I got pragmatic:
DOM manipulation via an initializer.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hide-sidebar-toggle-on-guest-spot&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;initialize&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;withPluginApi&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;onPageChange&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toggle &lt;&#x2F;span&gt;&lt;span&gt;= document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;querySelector&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.header-sidebar-toggle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toggle&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;startsWith&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;guest-spot&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toggle&lt;&#x2F;span&gt;&lt;span&gt;.style.display = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;          } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toggle&lt;&#x2F;span&gt;&lt;span&gt;.style.display = &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Is it hacky? Yes. Does it work? Also yes. Sometimes pragmatic beats perfect.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mobile-responsive&quot;&gt;Mobile Responsive&lt;&#x2F;h2&gt;
&lt;p&gt;Mobile-first isn&#x27;t just a buzzword here. It&#x27;s critical. Tattoo artists live on their phones. They&#x27;re checking Instagram between clients, browsing artist portfolios while waiting for appointments, posting fresh work right after finishing a piece. If this doesn&#x27;t work perfectly on a phone, it doesn&#x27;t work at all.&lt;&#x2F;p&gt;
&lt;p&gt;The entire layout is mobile-first. Every component has media queries for tablet and phone breakpoints.&lt;&#x2F;p&gt;
&lt;p&gt;Carousel cards shrink to 80% viewport width on phones so you can see part of the next card (scroll hint). Grid forces a single column on small screens so cards don&#x27;t get comically tiny. Post detail pages reduce padding and image heights so everything fits nicely without excessive scrolling.&lt;&#x2F;p&gt;
&lt;p&gt;All CSS. No JavaScript calculating widths or handling resize events. The browser does the work, which means it&#x27;s fast and doesn&#x27;t drain battery with constant calculations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s Next&lt;&#x2F;h2&gt;
&lt;p&gt;This is Part 1. We&#x27;ve got the public showcase working. But there&#x27;s more to
build:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Post creation UI (artists need to upload images and write captions)&lt;&#x2F;li&gt;
&lt;li&gt;Admin controls (pin&#x2F;unpin posts from the feed)&lt;&#x2F;li&gt;
&lt;li&gt;User profile pages (view all posts by a specific artist)&lt;&#x2F;li&gt;
&lt;li&gt;Comments system integration (if we want interaction on posts)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But most importantly: actually launching this for a real community. Getting
feedback from artists. Seeing if this makes sense to people who aren&#x27;t me.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s the scary part. Building code is easy. Building for people? That&#x27;s where
it gets real.&lt;&#x2F;p&gt;
&lt;p&gt;Part 2 will cover the creation flow and admin tools. Stay tuned.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to see the code, it&#x27;s on GitHub:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-guest-spot&quot;&gt;discourse-guest-spot&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building Yaks: A Virtual Currency System for Discourse (Part 4: Custom Titles and Earning System)</title>
          <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-4/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-4/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-4/">&lt;p&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-yaks-virtual-currency-part-1&#x2F;&quot;&gt;Part 1&lt;&#x2F;a&gt; covered the
backend architecture, &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-yaks-virtual-currency-part-2&#x2F;&quot;&gt;Part 2&lt;&#x2F;a&gt;
covered topic pinning and expiration, and &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-yaks-virtual-currency-part-3&#x2F;&quot;&gt;Part 3&lt;&#x2F;a&gt;
covered topic boosting and custom avatar flair. This post covers two more
major features: custom user titles and the automatic earning system.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;custom-user-titles&quot;&gt;Custom User Titles&lt;&#x2F;h2&gt;
&lt;p&gt;Custom titles let users spend Yaks to set a custom title displayed next to
their username throughout the forum. Unlike Discourse&#x27;s built-in title system
(which is tied to badges and trust levels), Yak titles are purely
cosmetic and time-limited.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-custom-title.png&quot; alt=&quot;A reply showing a user with the custom user title &amp;quot;The Yaks Man&amp;quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-challenge-serializer-discovery&quot;&gt;The Challenge: Serializer Discovery&lt;&#x2F;h3&gt;
&lt;p&gt;The first attempt seemed straightforward: override the &lt;code&gt;title&lt;&#x2F;code&gt; field in the
user serializers. But after implementing it, the title showed in user cards
and profiles but not next to posts. Why?&lt;&#x2F;p&gt;
&lt;p&gt;Discourse uses different serializer methods for different contexts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title&lt;&#x2F;code&gt;: Used in user cards, profiles, group member lists&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;user_title&lt;&#x2F;code&gt;: Used specifically in &lt;code&gt;PostSerializer&lt;&#x2F;code&gt; for post display&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This makes sense from an architecture perspective. Posts need their own
serializer method because they serialize the user as a nested object, not as
the main object.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-solution-override-both&quot;&gt;The Solution: Override Both&lt;&#x2F;h3&gt;
&lt;p&gt;The fix required overriding both serializer methods across multiple
serializers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# For user cards, profiles, groups
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_card&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post_action_user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_name&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:group_post_user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:group_user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:hidden_profile&lt;&#x2F;span&gt;&lt;span&gt;].each &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serializer_name&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  add_to_serializer(serializer_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:title&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    title_data = object.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]&amp;amp;.dig(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; title_data &amp;amp;&amp;amp; title_data[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;      title_data[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      object.title
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# For post display (critical!)
&lt;&#x2F;span&gt;&lt;span&gt;add_to_serializer(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_title&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  user = object&amp;amp;.user
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unless&lt;&#x2F;span&gt;&lt;span&gt; user
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  title_data = user.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]&amp;amp;.dig(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; title_data &amp;amp;&amp;amp; title_data[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    title_data[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    user.title
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;PostSerializer&lt;&#x2F;code&gt;, &lt;code&gt;object&lt;&#x2F;code&gt; is a Post, so we access the user via
&lt;code&gt;object.user&lt;&#x2F;code&gt;. In user-focused serializers, &lt;code&gt;object&lt;&#x2F;code&gt; is the User directly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-frontend-modal&quot;&gt;The Frontend Modal&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-custom-title-modal.png&quot; alt=&quot;A modal showing user&amp;#39;s options for creating a custom user title&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The custom title modal is straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tracked customTitle &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;characterCount&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;customTitle&lt;&#x2F;span&gt;&lt;span&gt;.length;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;isOverLimit&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;characterCount &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;canApply&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;customTitle&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;().length &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;         !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isOverLimit &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentUser&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yak_balance &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cost&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Live preview, character counter, balance check. The modal shows exactly what
the title will look like before spending Yaks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-earning-system&quot;&gt;The Earning System&lt;&#x2F;h2&gt;
&lt;p&gt;This was the most complex feature to implement. Users needed a way to earn
Yaks by contributing to the community, with anti-gaming measures built in.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;&#x2F;h3&gt;
&lt;p&gt;From the start, the requirements were clear:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Be modular (database-driven, not hardcoded)&lt;&#x2F;li&gt;
&lt;li&gt;Rate limiting (can&#x27;t spam posts to farm Yaks)&lt;&#x2F;li&gt;
&lt;li&gt;Trust level requirements (new accounts can&#x27;t abuse it)&lt;&#x2F;li&gt;
&lt;li&gt;Content length minimums (beyond Discourse&#x27;s defaults, prevent low-effort farming)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;database-schema&quot;&gt;Database Schema&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of hardcoding earning rules in the service, we made them
database-driven:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;create_table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_earning_rules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  t.string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:action_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;  t.string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:action_name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;  t.text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:description
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:amount&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:daily_cap&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:min_trust_level&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:enabled&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  t.jsonb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:settings&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;  t.timestamps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Seeded with four default rules:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Post Created&lt;&#x2F;strong&gt;: 2 Yaks, 20&#x2F;day cap, TL1+, 20 character minimum&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Topic Created&lt;&#x2F;strong&gt;: 5 Yaks, 10&#x2F;day cap, TL1+, 50 character minimum&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Post Liked&lt;&#x2F;strong&gt;: 3 Yaks, 30&#x2F;day cap, TL1+&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Solution Accepted&lt;&#x2F;strong&gt;: 25 Yaks, no cap, TL1+&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The &lt;code&gt;settings&lt;&#x2F;code&gt; jsonb column allows flexible per-rule configuration like
content length minimums without schema changes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;service-layer&quot;&gt;Service Layer&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;YakEarningService&lt;&#x2F;code&gt; handles all validation and awarding logic:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;award&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;:, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action_key&lt;&#x2F;span&gt;&lt;span&gt;:, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_post&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_topic&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  rule = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningRule&lt;&#x2F;span&gt;&lt;span&gt;.get_rule(action_key)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!rule
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Check trust level requirement
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; user.trust_level &amp;lt; rule.min_trust_level
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Check minimum content length if applicable
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; rule.min_length &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    content = related_post&amp;amp;.raw || related_topic&amp;amp;.first_post&amp;amp;.raw || &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; content.length &amp;lt; rule.min_length
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Check daily cap
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; rule.has_daily_cap?
&lt;&#x2F;span&gt;&lt;span&gt;    earned_today = get_daily_earning_count(user, action_key)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; earned_today &amp;gt;= rule.daily_cap
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Award the Yaks
&lt;&#x2F;span&gt;&lt;span&gt;  wallet = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakWallet&lt;&#x2F;span&gt;&lt;span&gt;.find_or_create_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakTransaction&lt;&#x2F;span&gt;&lt;span&gt;.create!(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_wallet:&lt;&#x2F;span&gt;&lt;span&gt; wallet,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount:&lt;&#x2F;span&gt;&lt;span&gt; rule.amount,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;transaction_type: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;earn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Earned from: &lt;&#x2F;span&gt;&lt;span&gt;#{rule.action_name}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; related_post,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_topic:&lt;&#x2F;span&gt;&lt;span&gt; related_topic,
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  wallet.update!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;balance:&lt;&#x2F;span&gt;&lt;span&gt; wallet.balance + rule.amount)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Publish balance update to frontend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MessageBus&lt;&#x2F;span&gt;&lt;span&gt;.publish(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;yak-balance&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;#{user.id}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                     { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;balance:&lt;&#x2F;span&gt;&lt;span&gt; wallet.balance },
&lt;&#x2F;span&gt;&lt;span&gt;                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user_ids: &lt;&#x2F;span&gt;&lt;span&gt;[user.id])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The service returns a boolean so we can track success&#x2F;failure in logs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rate-limiting-implementation&quot;&gt;Rate Limiting Implementation&lt;&#x2F;h3&gt;
&lt;p&gt;Daily caps are enforced by counting today&#x27;s transactions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_daily_earning_count&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action_key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  wallet = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakWallet&lt;&#x2F;span&gt;&lt;span&gt;.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!wallet
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  rule = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningRule&lt;&#x2F;span&gt;&lt;span&gt;.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action_key:&lt;&#x2F;span&gt;&lt;span&gt; action_key)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!rule
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  start_of_day = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now.beginning_of_day
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;YakTransaction
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_wallet:&lt;&#x2F;span&gt;&lt;span&gt; wallet)
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;transaction_type: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;earn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;description LIKE ?&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Earned from: &lt;&#x2F;span&gt;&lt;span&gt;#{rule.action_name}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .where(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;created_at &amp;gt;= ?&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, start_of_day)
&lt;&#x2F;span&gt;&lt;span&gt;    .count
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Single query per award attempt. Could be cached if it becomes a bottleneck,
but the query is fast.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;event-hooks&quot;&gt;Event Hooks&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse provides events for all the actions we care about:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DiscourseEvent&lt;&#x2F;span&gt;&lt;span&gt;.on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post_created&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; post.post_type != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;.types[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:regular&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; post.deleted_at.present?
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; post.hidden
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if &lt;&#x2F;span&gt;&lt;span&gt;!post.user
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; post.user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action_key: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_created&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; post,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_topic:&lt;&#x2F;span&gt;&lt;span&gt; post.topic,
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DiscourseEvent&lt;&#x2F;span&gt;&lt;span&gt;.on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:like_created&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post_action&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  post = post_action.post
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if &lt;&#x2F;span&gt;&lt;span&gt;!post
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; post.deleted_at.present?
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; post.hidden
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; post.user_id == post_action.user_id  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# No self-likes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; post.user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action_key: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_liked&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; post,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_topic:&lt;&#x2F;span&gt;&lt;span&gt; post.topic,
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also hook &lt;code&gt;topic_created&lt;&#x2F;code&gt; and &lt;code&gt;accepted_solution&lt;&#x2F;code&gt; (from the
discourse-solved plugin, if installed).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;real-time-balance-updates&quot;&gt;Real-Time Balance Updates&lt;&#x2F;h3&gt;
&lt;p&gt;The original implementation had a problem: after earning Yaks, the user menu
still showed the old balance. Page refresh required.&lt;&#x2F;p&gt;
&lt;p&gt;The fix uses MessageBus, Discourse&#x27;s real-time messaging system:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Backend&lt;&#x2F;strong&gt;: Publish when balance changes&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MessageBus&lt;&#x2F;span&gt;&lt;span&gt;.publish(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;yak-balance&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;#{user.id}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                   { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;balance:&lt;&#x2F;span&gt;&lt;span&gt; wallet.balance },
&lt;&#x2F;span&gt;&lt;span&gt;                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user_ids: &lt;&#x2F;span&gt;&lt;span&gt;[user.id])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Frontend&lt;&#x2F;strong&gt;: Subscribe and update&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;messageBus &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;container&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lookup&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;service:message-bus&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;messageBus&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;yak-balance&#x2F;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.id}&lt;&#x2F;span&gt;&lt;span&gt;`, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentUser&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_balance&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;balance&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now when you create a post, the balance in your user menu updates instantly.
No polling, no page refresh.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bugs-fixed&quot;&gt;Bugs Fixed&lt;&#x2F;h2&gt;
&lt;p&gt;Some bugs were discovered during manual testing. All three would have been
caught immediately by integration tests.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bug-1-event-hook-user-parameter&quot;&gt;Bug 1: Event Hook User Parameter&lt;&#x2F;h3&gt;
&lt;p&gt;The Discourse event signature includes a &lt;code&gt;user&lt;&#x2F;code&gt; parameter:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;DiscourseEvent&lt;&#x2F;span&gt;&lt;span&gt;.on(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post_created&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;opts&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first implementation used that parameter directly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user, ...)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But that &lt;code&gt;user&lt;&#x2F;code&gt; parameter is nil. The actual user must be accessed via
&lt;code&gt;post.user&lt;&#x2F;code&gt;. The test would have failed immediately with &quot;User can&#x27;t be
blank&quot;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bug-2-topic-raw-doesn-t-exist&quot;&gt;Bug 2: Topic.raw Doesn&#x27;t Exist&lt;&#x2F;h3&gt;
&lt;p&gt;Content length validation tried to access &lt;code&gt;topic.raw&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;content = related_post&amp;amp;.raw || related_topic&amp;amp;.raw || &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But topics don&#x27;t have a &lt;code&gt;raw&lt;&#x2F;code&gt; field. Only posts do. The fix:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;content = related_post&amp;amp;.raw || related_topic&amp;amp;.first_post&amp;amp;.raw || &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A test creating a topic would have crashed with &quot;undefined method `raw&#x27; for
Topic&quot;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bug-3-missing-user-in-transaction&quot;&gt;Bug 3: Missing User in Transaction&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;YakTransaction&lt;&#x2F;code&gt; has a &lt;code&gt;belongs_to :user&lt;&#x2F;code&gt; association, which validates
presence by default in Rails. But we weren&#x27;t passing it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakTransaction&lt;&#x2F;span&gt;&lt;span&gt;.create!(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_wallet:&lt;&#x2F;span&gt;&lt;span&gt; wallet,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount:&lt;&#x2F;span&gt;&lt;span&gt; rule.amount,
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Should be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakTransaction&lt;&#x2F;span&gt;&lt;span&gt;.create!(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_wallet:&lt;&#x2F;span&gt;&lt;span&gt; wallet,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;amount:&lt;&#x2F;span&gt;&lt;span&gt; rule.amount,
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Any test attempting to create a transaction would have failed validation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-new-basic-test-suite-structure&quot;&gt;A New Basic Test Suite Structure&lt;&#x2F;h2&gt;
&lt;p&gt;The test suite covers all validation paths:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RSpec&lt;&#x2F;span&gt;&lt;span&gt;.describe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;YakEarningService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  describe &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.award&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    it &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;awards Yaks for valid post by TL1 user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      post = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fabricate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;raw: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;This is a test post...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; post.user,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action_key: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_created&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; post,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_topic:&lt;&#x2F;span&gt;&lt;span&gt; post.topic,
&lt;&#x2F;span&gt;&lt;span&gt;      )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      expect(result).to eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      expect(user.reload.yak_balance).to eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    it &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;does not award Yaks to TL0 user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      post = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fabricate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; tl0_user, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;raw: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; post.user,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action_key: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_created&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; post,
&lt;&#x2F;span&gt;&lt;span&gt;      )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      expect(result).to eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      expect(tl0_user.reload.yak_balance).to eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    it &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;respects daily cap&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;      rule = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningRule&lt;&#x2F;span&gt;&lt;span&gt;.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;action_key: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_created&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Create posts up to daily cap
&lt;&#x2F;span&gt;&lt;span&gt;      rule.daily_cap.times &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;        post = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fabricate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;raw: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; post.user, ...)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Next post should fail due to cap
&lt;&#x2F;span&gt;&lt;span&gt;      post = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Fabricate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;raw: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakEarningService&lt;&#x2F;span&gt;&lt;span&gt;.award(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; post.user, ...)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      expect(result).to eq(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Tests force you to think about edge cases: trust levels, content length, daily
caps, disabled rules.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;admin-ui&quot;&gt;Admin UI&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-earning-rules-admin.png&quot; alt=&quot;A table showing Yaks earning rules and caps&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The admin UI shows all earning rules in a table:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Action name and description&lt;&#x2F;li&gt;
&lt;li&gt;Amount of Yaks awarded&lt;&#x2F;li&gt;
&lt;li&gt;Daily cap (or &quot;No limit&quot;)&lt;&#x2F;li&gt;
&lt;li&gt;Minimum trust level&lt;&#x2F;li&gt;
&lt;li&gt;Enabled status&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;architecture-wins&quot;&gt;Architecture Wins&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Database-Driven Configuration&lt;&#x2F;strong&gt;: No code changes needed to adjust earning
amounts or daily caps. Just update the database.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Event-Driven&lt;&#x2F;strong&gt;: Loosely coupled. The earning system doesn&#x27;t need to know
about post creation internals, just subscribes to events.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Real-Time Updates&lt;&#x2F;strong&gt;: MessageBus makes instant balance updates trivial. Six
lines of code for publish and subscribe.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Proper Service Layer&lt;&#x2F;strong&gt;: Business logic lives in &lt;code&gt;YakEarningService&lt;&#x2F;code&gt;, not
scattered across controllers and models.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Full Audit Trail&lt;&#x2F;strong&gt;: Every earning action creates a transaction record with
type, amount, description, and related post&#x2F;topic. Complete history.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance-considerations&quot;&gt;Performance Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Single Query for Rate Limiting&lt;&#x2F;strong&gt;: The daily count query is simple and fast.
Could be cached if it becomes a bottleneck.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;No N+1 Queries&lt;&#x2F;strong&gt;: Balance updates happen during the transaction creation, no
separate queries.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;MessageBus Efficiency&lt;&#x2F;strong&gt;: Only publishes to the specific user who earned
Yaks. Not broadcasting to everyone.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Indexed Properly&lt;&#x2F;strong&gt;: Transactions table has indexes on &lt;code&gt;yak_wallet_id&lt;&#x2F;code&gt;,
&lt;code&gt;transaction_type&lt;&#x2F;code&gt;, and &lt;code&gt;created_at&lt;&#x2F;code&gt; for the daily count query.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-left&quot;&gt;What&#x27;s Left&lt;&#x2F;h2&gt;
&lt;p&gt;The plugin is now feature-complete for the MVP:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Wallet system with transaction logging&lt;&#x2F;li&gt;
&lt;li&gt;Multiple purchasable features (post highlighting, topic boosting, custom
flair, custom titles)&lt;&#x2F;li&gt;
&lt;li&gt;Expiration system (features automatically expire)&lt;&#x2F;li&gt;
&lt;li&gt;Earning system (users earn Yaks by contributing)&lt;&#x2F;li&gt;
&lt;li&gt;Admin UI (view stats, packages, features, earning rules)&lt;&#x2F;li&gt;
&lt;li&gt;Real-time updates (no page refresh needed)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Remaining work:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Payment integration (Stripe or similar) for purchasing Yak packages&lt;&#x2F;li&gt;
&lt;li&gt;Guardian authorization checks (ensure users can only spend their own Yaks)&lt;&#x2F;li&gt;
&lt;li&gt;More earning actions (first reply, helpful flags, etc.)&lt;&#x2F;li&gt;
&lt;li&gt;Admin edit functionality for earning rules&lt;&#x2F;li&gt;
&lt;li&gt;Production monitoring and adjustment based on real usage&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Serializers Are Powerful&lt;&#x2F;strong&gt;: Understanding Discourse&#x27;s serializer
architecture unlocks a lot of customization possibilities.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;MessageBus Is Handy&lt;&#x2F;strong&gt;: Real-time updates are easy with MessageBus, yet some
plugins don&#x27;t use it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Database-Driven Config Is Worth It&lt;&#x2F;strong&gt;: The upfront effort to make earning
rules configurable pays off in flexibility.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Event Hooks Are Reliable&lt;&#x2F;strong&gt;: Discourse&#x27;s event system is solid. Events fire
consistently and provide the data you need.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Building a virtual currency system is teaching me a lot about Discourse&#x27;s
architecture. Serializers, custom fields, MessageBus, service objects, event
hooks - all pieces that work together to create a cohesive plugin.&lt;&#x2F;p&gt;
&lt;p&gt;The earning system was the most complex feature, but also the most rewarding.
Watching a user create a post and seeing their balance update instantly,
knowing that every piece of the system is working together (event hooks,
service validation, database transactions, MessageBus publishing, frontend
subscription) - that&#x27;s satisfying.&lt;&#x2F;p&gt;
&lt;p&gt;The full source code is available at
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-yaks&quot;&gt;github.com&#x2F;ducks&#x2F;discourse-yaks&lt;&#x2F;a&gt;.
If you&#x27;re building a Discourse plugin and want to see how all these pieces fit
together, the repo should be a useful reference.&lt;&#x2F;p&gt;
&lt;p&gt;Next up: Payment integration and production deployment. Stay tuned for Part 5.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building Yaks: A Virtual Currency System for Discourse (Part 3: Advanced Features)</title>
          <pubDate>Sat, 18 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-3/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-3/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-3/">&lt;p&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-yaks-virtual-currency-part-1&#x2F;&quot;&gt;Part 1&lt;&#x2F;a&gt; covered the
backend architecture and &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-yaks-virtual-currency-part-2&#x2F;&quot;&gt;Part 2&lt;&#x2F;a&gt;
covered topic pinning and the expiration system. This post covers two more
complex features: topic boosting (pinning topics globally with visual
highlighting) and custom avatar flair (letting users customize their forum
identity).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;topic-pin-vs-topic-boost&quot;&gt;Topic Pin vs Topic Boost&lt;&#x2F;h2&gt;
&lt;p&gt;The plugin has two topic pinning features with different scopes:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Topic Pin&lt;&#x2F;strong&gt;: Pins a topic to the top of its category only. The topic stays
at the top of the category page but doesn&#x27;t appear across other categories.
No visual highlighting.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Topic Boost&lt;&#x2F;strong&gt;: Pins a topic globally across all categories AND adds a
colored border to make it stand out in topic lists. Much more visibility,
costs more Yaks.&lt;&#x2F;p&gt;
&lt;p&gt;This post focuses on topic boost, the more powerful and visually striking
feature.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;topic-boost-making-threads-stand-out&quot;&gt;Topic Boost: Making Threads Stand Out&lt;&#x2F;h2&gt;
&lt;p&gt;Topic boost is a premium feature that pins a topic globally (across all
categories) and adds a colored border to make it stand out in topic lists.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-topic-boosting-1.png&quot; alt=&quot;Topic boosting in action - a green-bordered topic stands out at the top of the topic list&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;backend-leveraging-discourse-apis&quot;&gt;Backend: Leveraging Discourse APIs&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse has native topic pinning built in. The API is straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;topic.update_pinned(status, global, pinned_until)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Parameters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;status&lt;&#x2F;code&gt;: true to pin, false to unpin&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;global&lt;&#x2F;code&gt;: true for global pin (all categories), false for category only&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pinned_until&lt;&#x2F;code&gt;: timestamp as string (not Time object)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The service implementation for topic boost:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic_boost&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  duration = feature.settings[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;duration_hours&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]&amp;amp;.hours || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;72&lt;&#x2F;span&gt;&lt;span&gt;.hours
&lt;&#x2F;span&gt;&lt;span&gt;  related_topic.update_pinned(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, duration.from_now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_s&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  current_features = related_topic.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] || {}
&lt;&#x2F;span&gt;&lt;span&gt;  current_features[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;boosted&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;color:&lt;&#x2F;span&gt;&lt;span&gt; feature_data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:color&lt;&#x2F;span&gt;&lt;span&gt;] || &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gold&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;applied_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_i&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  related_topic.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = current_features
&lt;&#x2F;span&gt;&lt;span&gt;  related_topic.save_custom_fields
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This does two things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Pins the topic globally for 72 hours using Discourse&#x27;s native pinning&lt;&#x2F;li&gt;
&lt;li&gt;Stores visual customization data (color choice) in topic custom fields&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;frontend-value-transformers&quot;&gt;Frontend: Value Transformers&lt;&#x2F;h3&gt;
&lt;p&gt;To apply CSS classes to boosted topics in topic lists, we use Discourse&#x27;s
value transformer API. This is the modern replacement for the deprecated
widget decorators.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;registerValueTransformer&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic-list-item-class&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, ({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context &lt;&#x2F;span&gt;&lt;span&gt;}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;boosted&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-boosted-topic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;boosted&lt;&#x2F;span&gt;&lt;span&gt;.color || &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gold&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-color-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The transformer receives a &lt;code&gt;value&lt;&#x2F;code&gt; array and adds CSS classes based on the
topic&#x27;s custom fields. Optional chaining (&lt;code&gt;?.&lt;&#x2F;code&gt;) prevents errors if the data
is missing.&lt;&#x2F;p&gt;
&lt;p&gt;We also apply styling to the first post in boosted topics:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;helper&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getModel&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topicYakFeatures &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isFirstPostInBoostedTopic &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post_number &lt;&#x2F;span&gt;&lt;span&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topicYakFeatures&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;boosted&lt;&#x2F;span&gt;&lt;span&gt;?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isFirstPostInBoostedTopic&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;article&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classList&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-boosted-topic-post&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topicYakFeatures&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;boosted&lt;&#x2F;span&gt;&lt;span&gt;.color || &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gold&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;article&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classList&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-color-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This gives visual consistency. The colored border appears both in topic lists
and on the opening post.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;avoiding-n-1-queries&quot;&gt;Avoiding N+1 Queries&lt;&#x2F;h3&gt;
&lt;p&gt;When adding custom field serialization, you must tell Discourse to preload
the data to avoid N+1 query warnings:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TopicList&lt;&#x2F;span&gt;&lt;span&gt;.preloaded_custom_fields &amp;lt;&amp;lt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TopicList&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;respond_to?&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:preloaded_custom_fields&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Without this, accessing &lt;code&gt;topic.custom_fields[&quot;yak_features&quot;]&lt;&#x2F;code&gt; in serializers
triggers a database query for every topic in the list. With preloading, all
custom fields load in a single query.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pin-auto-dismiss-behavior&quot;&gt;Pin Auto-Dismiss Behavior&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse has built-in pin dismissal behavior. When a user visits a pinned
topic, Discourse creates a &lt;code&gt;TopicUser&lt;&#x2F;code&gt; record with &lt;code&gt;cleared_pinned_at&lt;&#x2F;code&gt;
timestamp. For that user, the topic shows as unpinned.&lt;&#x2F;p&gt;
&lt;p&gt;This is intentional design to prevent banner blindness. The topic stays
pinned for everyone else, but individual users can dismiss it after viewing.
The colored border remains visible to all users regardless of pin state.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;css-variables-for-theme-customization&quot;&gt;CSS Variables for Theme Customization&lt;&#x2F;h3&gt;
&lt;p&gt;Originally, colors were hardcoded:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;yak-boosted-topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;yak-color-gold &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  border-color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#ffd700&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rgba&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;215&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This made it difficult for theme authors to customize colors. The fix was CSS
variables:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  --yak-color-gold: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#ffd700&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  --yak-color-gold-bg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rgba&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;215&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  --yak-color-blue: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#4169e1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  --yak-color-blue-bg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rgba&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;65&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;105&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;225&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;yak-boosted-topic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;yak-color-gold &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  border-color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(--yak-color-gold);
&lt;&#x2F;span&gt;&lt;span&gt;  background: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(--yak-color-gold-bg);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now theme authors can override colors without modifying plugin code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  --yak-color-gold: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#ff9900&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  --yak-color-gold-bg: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;rgba&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;153&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.15&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;custom-avatar-flair-user-identity&quot;&gt;Custom Avatar Flair: User Identity&lt;&#x2F;h2&gt;
&lt;p&gt;Avatar flair is the small badge that appears next to a user&#x27;s avatar.
Normally it&#x27;s set at the group level (moderators get one badge, admins get
another). The custom flair feature lets individual users choose their own
icon and color scheme for 30 days.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-avatar-flair.png&quot; alt=&quot;Custom avatar flair with a purple crown icon next to the user&amp;#39;s avatar&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-challenge-integrating-with-existing-components&quot;&gt;The Challenge: Integrating with Existing Components&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse has an existing &lt;code&gt;UserAvatarFlair&lt;&#x2F;code&gt; component that reads flair data
from serializers. The component expects certain fields (&lt;code&gt;flair_group_id&lt;&#x2F;code&gt;,
&lt;code&gt;flair_url&lt;&#x2F;code&gt;, &lt;code&gt;flair_bg_color&lt;&#x2F;code&gt;, etc.) and renders accordingly.&lt;&#x2F;p&gt;
&lt;p&gt;Initially, I tried using widget decorators to inject custom data. This hit
deprecation warnings. The modern pattern is overriding serializer fields
directly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;serializer-override-pattern&quot;&gt;Serializer Override Pattern&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of decorating components, we override the serializer methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_card&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post_action_user&lt;&#x2F;span&gt;&lt;span&gt;].each &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serializer_name&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  add_to_serializer(serializer_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:flair_url&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    user = serializer_name == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post &lt;&#x2F;span&gt;&lt;span&gt;? object.user : object
&lt;&#x2F;span&gt;&lt;span&gt;    flair = user.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]&amp;amp;.dig(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flair&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; flair &amp;amp;&amp;amp; flair[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;      flair[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;icon&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Return icon name like &amp;quot;rocket&amp;quot; or &amp;quot;crown&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      user.flair_group&amp;amp;.flair_icon || user.flair_group&amp;amp;.flair_upload&amp;amp;.url
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This checks user custom fields first. If yak custom flair is present, return
that data. Otherwise, fall back to group flair.&lt;&#x2F;p&gt;
&lt;p&gt;Similar overrides for &lt;code&gt;flair_bg_color&lt;&#x2F;code&gt;, &lt;code&gt;flair_color&lt;&#x2F;code&gt;, and &lt;code&gt;flair_name&lt;&#x2F;code&gt;.
This pattern works across all serializers (post, user card, action user)
without touching the component.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-flair-group-id-problem&quot;&gt;The flair_group_id Problem&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;UserAvatarFlair&lt;&#x2F;code&gt; component has an early return:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span&gt;|| !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flair_group_id&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; No flair rendered
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Users with custom flair but no group flair would fail this check. The
component would exit early and never render anything.&lt;&#x2F;p&gt;
&lt;p&gt;The fix was setting a dummy marker value:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;add_to_serializer(serializer_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:flair_group_id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  user = serializer_name == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post &lt;&#x2F;span&gt;&lt;span&gt;? object.user : object
&lt;&#x2F;span&gt;&lt;span&gt;  flair = user.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]&amp;amp;.dig(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flair&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; flair &amp;amp;&amp;amp; flair[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Dummy value to pass existence check
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    user.flair_group_id
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With &lt;code&gt;flair_group_id&lt;&#x2F;code&gt; set to &lt;code&gt;-1&lt;&#x2F;code&gt;, the component passes the existence check.
It then finds &lt;code&gt;flair_url&lt;&#x2F;code&gt; is set (to the icon name) and renders the custom
flair.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;frontend-icon-and-color-picker&quot;&gt;Frontend: Icon and Color Picker&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-flair-picker.png&quot; alt=&quot;Custom avatar flair picker modal showing red fire being selected&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The flair modal presents three selection grids:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ICONS &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;star&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;heart&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fire&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bolt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gem&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;crown&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rocket&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;trophy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BG_COLORS &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#ffd700&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#4169e1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#dc143c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#32cd32&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#9370db&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#ff8c00&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TEXT_COLORS &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#ffffff&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#000000&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#ffd700&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Users click icons to select one, then choose background and text colors. A
live preview shows the combination:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flair-preview&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user-flair&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;={{this.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;previewStyle&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;icon this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;selectedIcon&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The preview updates reactively as selections change. Once the user confirms,
the modal sends the choices to the backend, which stores them in user custom
fields.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;making-feature-cards-clickable&quot;&gt;Making Feature Cards Clickable&lt;&#x2F;h3&gt;
&lt;p&gt;On the wallet page, custom flair is the only feature that needs a modal
(icon&#x2F;color picker). Other features just need a color picker, which is
handled inline.&lt;&#x2F;p&gt;
&lt;p&gt;To make the custom flair card clickable, we split the template:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;{{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eq feature&lt;&#x2F;span&gt;&lt;span&gt;.id &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;custom_flair&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)}}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature-card clickable&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;click&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;openFlairModal&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;card content &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature-card&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;card content &lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{{&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Only the custom flair card gets the click handler. Other cards remain static.
This avoids passing &lt;code&gt;undefined&lt;&#x2F;code&gt; callbacks to the &lt;code&gt;{{on}}&lt;&#x2F;code&gt; helper.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s Next&lt;&#x2F;h2&gt;
&lt;p&gt;The plugin now has:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Post highlighting (colored borders)&lt;&#x2F;li&gt;
&lt;li&gt;Topic pinning (category-only)&lt;&#x2F;li&gt;
&lt;li&gt;Topic boosting (global pin + highlight)&lt;&#x2F;li&gt;
&lt;li&gt;Custom avatar flair (user identity)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Still to implement:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Post pinning (pin individual post to top of topic)&lt;&#x2F;li&gt;
&lt;li&gt;Post boosting (increase visibility in feeds)&lt;&#x2F;li&gt;
&lt;li&gt;Earning system (auto-reward quality posts)&lt;&#x2F;li&gt;
&lt;li&gt;Guardian authorization (permission checks)&lt;&#x2F;li&gt;
&lt;li&gt;Admin dashboard improvements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The earning system is the next major piece. Right now, users can only spend
Yaks. They need ways to earn them through quality contributions, not just
purchases.&lt;&#x2F;p&gt;
&lt;p&gt;Code is on GitHub: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-yaks&quot;&gt;ducks&#x2F;discourse-yaks&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building Yaks: A Virtual Currency System for Discourse (Part 2: Features and Expiration)</title>
          <pubDate>Fri, 17 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-2/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-2/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-2/">&lt;p&gt;In &lt;a href=&quot;&#x2F;blog&#x2F;2025&#x2F;building-yaks-virtual-currency-part-1&quot;&gt;Part 1&lt;&#x2F;a&gt;, I covered
the backend architecture for Yaks: wallets, transactions, and the service
layer. The database models were in place, but the system could only apply
one feature (post highlighting) and had no way to clean up expired features.&lt;&#x2F;p&gt;
&lt;p&gt;Part 2 covers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Implementing topic pinning (our second feature)&lt;&#x2F;li&gt;
&lt;li&gt;Refactoring the service layer to be truly modular&lt;&#x2F;li&gt;
&lt;li&gt;Building an expiration system with background jobs&lt;&#x2F;li&gt;
&lt;li&gt;Starting the admin configuration UI&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;spend-yaks.png&quot; alt=&quot;Spend Yaks button on topic footer&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;spend-yaks-2.png&quot; alt=&quot;Spend Yaks modal showing available features&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;topic-pinning&quot;&gt;Topic Pinning&lt;&#x2F;h2&gt;
&lt;p&gt;Topic pinning lets users spend Yaks to pin their topic to the top of its
category for a configurable duration. This uses Discourse&#x27;s native pinning
mechanism, but requires currency to access.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-this-feature-matters&quot;&gt;Why This Feature Matters&lt;&#x2F;h3&gt;
&lt;p&gt;Forums prioritize content by recency. Older discussions get buried. Topic
pinning gives users a way to temporarily boost visibility for important
discussions without needing moderator intervention.&lt;&#x2F;p&gt;
&lt;p&gt;The constraint is time. After the configured duration expires, the pin is
removed and the topic returns to normal sorting.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-service-architecture-problem&quot;&gt;The Service Architecture Problem&lt;&#x2F;h3&gt;
&lt;p&gt;When implementing topic pinning, I hit an architectural issue. The existing
&lt;code&gt;YakFeatureService.apply_feature&lt;&#x2F;code&gt; method was post-centric:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply_feature&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_data&lt;&#x2F;span&gt;&lt;span&gt;: {})
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ... validation logic ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  feature_use = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse&lt;&#x2F;span&gt;&lt;span&gt;.create!(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_feature:&lt;&#x2F;span&gt;&lt;span&gt; feature,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; related_post,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Always requires a post
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_data:&lt;&#x2F;span&gt;&lt;span&gt; feature_data
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This design assumed every feature applies to a post. But topic pinning
applies to a topic, not a post. I could hack around it by passing
&lt;code&gt;related_post.topic&lt;&#x2F;code&gt;, but that&#x27;s wrong. The service should support both
contexts.&lt;&#x2F;p&gt;
&lt;p&gt;Looking at the implementation, the issue was clear. The service wasn&#x27;t
modular at all. It was built for posts and only posts. Adding topic
support meant refactoring the core design.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;refactoring-the-service&quot;&gt;Refactoring the Service&lt;&#x2F;h3&gt;
&lt;p&gt;The fix was adding support for both posts and topics:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Old (post-centric)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply_feature&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_data&lt;&#x2F;span&gt;&lt;span&gt;: {})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# New (modular, all keyword)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply_feature&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;:,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;:,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_post&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_topic&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_data&lt;&#x2F;span&gt;&lt;span&gt;: {}
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the service accepts either a post or a topic (or neither, for
user-level features like custom flair). Making all parameters keyword
arguments forces explicit call sites, which prevents mistakes when you have
multiple optional params.&lt;&#x2F;p&gt;
&lt;p&gt;Validation got context-specific methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;can_apply_to_post?&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; post.trashed? || post.deleted_at.present?
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; post.user_id != user.id
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Check for existing active feature
&lt;&#x2F;span&gt;&lt;span&gt;  !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse&lt;&#x2F;span&gt;&lt;span&gt;.exists?(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_feature: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeature&lt;&#x2F;span&gt;&lt;span&gt;.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_key:&lt;&#x2F;span&gt;&lt;span&gt; feature_key),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; post,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expires_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span&gt;::INFINITY
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;can_apply_to_topic?&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; topic.closed || topic.archived
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; topic.user_id != user.id
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Check for existing active feature
&lt;&#x2F;span&gt;&lt;span&gt;  !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse&lt;&#x2F;span&gt;&lt;span&gt;.exists?(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_feature: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeature&lt;&#x2F;span&gt;&lt;span&gt;.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_key:&lt;&#x2F;span&gt;&lt;span&gt; feature_key),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_topic:&lt;&#x2F;span&gt;&lt;span&gt; topic,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expires_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span&gt;::INFINITY
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This pattern will scale. When we add user-level features (custom flair),
we&#x27;ll add &lt;code&gt;can_apply_to_user?&lt;&#x2F;code&gt; without touching the core service logic.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;integrating-with-discourse-s-topic-pinning&quot;&gt;Integrating with Discourse&#x27;s Topic Pinning&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse has built-in topic pinning. The &lt;code&gt;Topic&lt;&#x2F;code&gt; model has an
&lt;code&gt;update_pinned&lt;&#x2F;code&gt; method:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;duration = feature.duration_hours.hours
&lt;&#x2F;span&gt;&lt;span&gt;topic.update_pinned(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, duration.from_now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_s&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Three parameters:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pinned&lt;&#x2F;code&gt; - Enable or disable the pin&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;global&lt;&#x2F;code&gt; - Pin globally (across all categories) or just in this topic&#x27;s
category&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pinned_until&lt;&#x2F;code&gt; - When to automatically unpin (must be a string timestamp)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The third parameter is critical. It must be a string, not a Time object.
This caught me during implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Wrong (creates YakFeatureUse but topic doesn&amp;#39;t actually pin)
&lt;&#x2F;span&gt;&lt;span&gt;topic.update_pinned(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, feature.duration_hours.hours.from_now)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Correct
&lt;&#x2F;span&gt;&lt;span&gt;topic.update_pinned(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, feature.duration_hours.hours.from_now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_s&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The feature use was being created, the Yaks were being deducted, but the
topic wasn&#x27;t pinning. The issue was the timestamp format. &lt;code&gt;update_pinned&lt;&#x2F;code&gt;
silently fails if you pass a Time object instead of a string.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;expiration-system&quot;&gt;Expiration System&lt;&#x2F;h2&gt;
&lt;p&gt;Features need to expire. Each feature has a configurable duration stored in
the database. We need a way to clean up expired features and undo their
effects.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-architecture&quot;&gt;The Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;The system has three parts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Regular Job&lt;&#x2F;strong&gt;: &lt;code&gt;ExpireYakFeature&lt;&#x2F;code&gt; - Handles a single expiration&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Scheduled Job&lt;&#x2F;strong&gt;: &lt;code&gt;CleanupExpiredYakFeatures&lt;&#x2F;code&gt; - Finds expired features
and queues regular jobs&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Service Method&lt;&#x2F;strong&gt;: &lt;code&gt;YakFeatureService.expire_feature&lt;&#x2F;code&gt; - Business logic
for expiration&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The primary expiration mechanism runs at creation time. When a feature use
is created, the expiration job is scheduled to run exactly when it expires:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply_feature&lt;&#x2F;span&gt;&lt;span&gt;(...)
&lt;&#x2F;span&gt;&lt;span&gt;  feature_use = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse&lt;&#x2F;span&gt;&lt;span&gt;.create!(...)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; feature_use.expires_at
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jobs&lt;&#x2F;span&gt;&lt;span&gt;.enqueue_at(feature_use.expires_at, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:expire_yak_feature&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_use_id:&lt;&#x2F;span&gt;&lt;span&gt; feature_use.id)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is efficient. No polling. The job runs exactly when needed.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-scheduled-job&quot;&gt;The Scheduled Job&lt;&#x2F;h3&gt;
&lt;p&gt;Runs hourly to find expired features:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span&gt;Jobs
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CleanupExpiredYakFeatures &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;::Jobs::Scheduled
&lt;&#x2F;span&gt;&lt;span&gt;    every &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.hour
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      expired_features = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;YakFeatureUse
&lt;&#x2F;span&gt;&lt;span&gt;        .where(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expires_at IS NOT NULL AND expires_at &amp;lt;= ?&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now)
&lt;&#x2F;span&gt;&lt;span&gt;        .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expired: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      expired_features.find_each &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_use&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Jobs&lt;&#x2F;span&gt;&lt;span&gt;.enqueue(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:expire_yak_feature&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_use_id:&lt;&#x2F;span&gt;&lt;span&gt; feature_use.id)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;processed:&lt;&#x2F;span&gt;&lt;span&gt; expired_features.count }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It queries for expired features (where &lt;code&gt;expires_at&lt;&#x2F;code&gt; is in the past) and
queues a job for each one.&lt;&#x2F;p&gt;
&lt;p&gt;This hourly cleanup job is a safety net. If the server restarts before a
scheduled job runs, or if something goes wrong with job scheduling, the
cleanup job catches it. It&#x27;s backup, not the primary mechanism.&lt;&#x2F;p&gt;
&lt;p&gt;Why &lt;code&gt;find_each&lt;&#x2F;code&gt; instead of &lt;code&gt;each&lt;&#x2F;code&gt;? Performance. &lt;code&gt;find_each&lt;&#x2F;code&gt; loads records
in batches (1000 by default) instead of loading everything into memory. If
you have 10,000 expired features, &lt;code&gt;each&lt;&#x2F;code&gt; would load all 10,000 at once.
&lt;code&gt;find_each&lt;&#x2F;code&gt; loads 1000, processes them, loads the next 1000.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-regular-job&quot;&gt;The Regular Job&lt;&#x2F;h3&gt;
&lt;p&gt;Processes one expiration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span&gt;Jobs
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExpireYakFeature &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;::Jobs::Base
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      feature_use = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse&lt;&#x2F;span&gt;&lt;span&gt;.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id:&lt;&#x2F;span&gt;&lt;span&gt; args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:feature_use_id&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return unless&lt;&#x2F;span&gt;&lt;span&gt; feature_use
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureService&lt;&#x2F;span&gt;&lt;span&gt;.expire_feature(feature_use)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Why a separate job? Fault tolerance. If one expiration fails (database
error, bug in the expiration logic), it doesn&#x27;t stop the others from
processing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-service-method&quot;&gt;The Service Method&lt;&#x2F;h3&gt;
&lt;p&gt;Handles the business logic:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;expire_feature&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_use&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  feature_key = feature_use.yak_feature.feature_key
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; feature_key
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_highlight&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    remove_post_highlight(feature_use.related_post)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic_pin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    unpin_topic(feature_use.related_topic)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  feature_use.update!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expired: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;private
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;remove_post_highlight&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return unless&lt;&#x2F;span&gt;&lt;span&gt; post
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  features = post.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] || {}
&lt;&#x2F;span&gt;&lt;span&gt;  features.delete(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;highlight&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; features.empty?
&lt;&#x2F;span&gt;&lt;span&gt;    post.custom_fields.delete(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    post.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = features
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  post.save_custom_fields
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;unpin_topic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return unless&lt;&#x2F;span&gt;&lt;span&gt; topic
&lt;&#x2F;span&gt;&lt;span&gt;  topic.update_pinned(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Expiration removes the visual effects and marks the feature use as expired.&lt;&#x2F;p&gt;
&lt;p&gt;Why mark as expired instead of deleting? Audit trail. Users can see their
feature history. Admins can debug issues. Refunds are easier because you
have the original feature use record.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;frontend-integration&quot;&gt;Frontend Integration&lt;&#x2F;h2&gt;
&lt;p&gt;The frontend needed two things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A &quot;Spend Yaks&quot; button on topics&lt;&#x2F;li&gt;
&lt;li&gt;Context-aware modal that shows appropriate features&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;topic-footer-button&quot;&gt;Topic Footer Button&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse has an API for adding buttons to topic footers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;withPluginApi &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;discourse&#x2F;lib&#x2F;plugin-api&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-topic-actions&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;initialize&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;withPluginApi&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;registerTopicFooterButton&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;        id: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-spend&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        icon: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;coins&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        label: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yaks.topic_action.spend&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modal &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getOwner&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lookup&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;service:modal&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modal&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SpendYaksModal&lt;&#x2F;span&gt;&lt;span&gt;, {
&lt;&#x2F;span&gt;&lt;span&gt;            model: {
&lt;&#x2F;span&gt;&lt;span&gt;              topic: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;          });
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dropdown&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;site&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mobileView&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        classNames: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak-spend&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;        dependentKeys: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic.closed&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic.archived&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;displayed&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentUser &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user_id &lt;&#x2F;span&gt;&lt;span&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentUser&lt;&#x2F;span&gt;&lt;span&gt;.id &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;            !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.closed &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;            !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;archived
&lt;&#x2F;span&gt;&lt;span&gt;          );
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;      });
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;displayed()&lt;&#x2F;code&gt; function controls visibility. The button only shows if:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;User is logged in&lt;&#x2F;li&gt;
&lt;li&gt;User owns the topic&lt;&#x2F;li&gt;
&lt;li&gt;Topic isn&#x27;t closed or archived&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;context-aware-modal&quot;&gt;Context-Aware Modal&lt;&#x2F;h3&gt;
&lt;p&gt;The modal needed to work for both posts and topics:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export default class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;SpendYaksModal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;isPostContext&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;!!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;isTopicContext&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;!!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topic &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;postFeatures&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allFeatures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;category &lt;&#x2F;span&gt;&lt;span&gt;=== &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;topicFeatures&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allFeatures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;category &lt;&#x2F;span&gt;&lt;span&gt;=== &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;availableFeatures&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isPostContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;postFeatures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isTopicContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;topicFeatures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One modal, two contexts. The UI adapts based on whether you clicked &quot;Spend
Yaks&quot; on a post or a topic.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;admin-ui-in-progress&quot;&gt;Admin UI (In Progress)&lt;&#x2F;h2&gt;
&lt;p&gt;The final piece is admin configuration. Currently, features and purchase
packages are hardcoded. They need to be editable in the UI.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;database-backed-packages&quot;&gt;Database-Backed Packages&lt;&#x2F;h3&gt;
&lt;p&gt;Created a &lt;code&gt;yak_packages&lt;&#x2F;code&gt; table:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;create_table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_packages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  t.string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;  t.text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:description
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:price_cents&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yaks&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:bonus_yaks&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:enabled&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  t.integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:position&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;null: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;  t.timestamps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Price is stored as cents (integers) instead of dollars (floats) to avoid
floating-point precision issues. A $5.00 package is 500 cents.&lt;&#x2F;p&gt;
&lt;p&gt;The model has helper methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakPackage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ActiveRecord::Base
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;total_yaks
&lt;&#x2F;span&gt;&lt;span&gt;    yaks + bonus_yaks
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;price_usd
&lt;&#x2F;span&gt;&lt;span&gt;    price_cents &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100.0
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;price_usd=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;usd&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.price_cents = (usd.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_f &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_i
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This lets you work in dollars in the UI but store as cents in the database.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;crud-endpoints&quot;&gt;CRUD Endpoints&lt;&#x2F;h3&gt;
&lt;p&gt;Added REST endpoints to the admin controller:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;packages
&lt;&#x2F;span&gt;&lt;span&gt;  packages = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakPackage&lt;&#x2F;span&gt;&lt;span&gt;.ordered
&lt;&#x2F;span&gt;&lt;span&gt;  render &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;json: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;packages:&lt;&#x2F;span&gt;&lt;span&gt; packages.map { |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;| serialize_package(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;) } }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create_package
&lt;&#x2F;span&gt;&lt;span&gt;  package = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakPackage&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(package_params)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; package.save
&lt;&#x2F;span&gt;&lt;span&gt;    render &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;json: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;package:&lt;&#x2F;span&gt;&lt;span&gt; serialize_package(package) }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    render_json_error(package.errors.full_messages.join(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;update_package
&lt;&#x2F;span&gt;&lt;span&gt;  package = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakPackage&lt;&#x2F;span&gt;&lt;span&gt;.find(params[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:id&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; package.update(package_params)
&lt;&#x2F;span&gt;&lt;span&gt;    render &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;json: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;package:&lt;&#x2F;span&gt;&lt;span&gt; serialize_package(package) }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    render_json_error(package.errors.full_messages.join(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;delete_package
&lt;&#x2F;span&gt;&lt;span&gt;  package = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakPackage&lt;&#x2F;span&gt;&lt;span&gt;.find(params[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:id&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  package.destroy!
&lt;&#x2F;span&gt;&lt;span&gt;  render &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;json:&lt;&#x2F;span&gt;&lt;span&gt; success_json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Standard Rails REST pattern. The admin can create, edit, and delete
packages without touching code.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;admin-ui-structure&quot;&gt;Admin UI Structure&lt;&#x2F;h3&gt;
&lt;p&gt;The UI follows Discourse&#x27;s admin plugin pattern (inspired by the Chat
plugin):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;admin&#x2F;assets&#x2F;javascripts&#x2F;discourse&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── routes&#x2F;admin-plugins&#x2F;show&#x2F;discourse-yaks-management&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── controllers&#x2F;admin-plugins&#x2F;show&#x2F;discourse-yaks-management&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── templates&#x2F;admin&#x2F;plugins&#x2F;show&#x2F;discourse-yaks-management&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;└── initializers&#x2F;yaks-admin-plugin-configuration-nav.js
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The structure creates tabs:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Settings&lt;&#x2F;strong&gt; - Site settings (automatic)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Management&lt;&#x2F;strong&gt; - Custom UI for packages, features, stats&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The templates use Discourse&#x27;s admin components:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;hbs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-hbs &quot;&gt;&lt;code class=&quot;language-hbs&quot; data-lang=&quot;hbs&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;admin-config-page&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;admin-plugin-config-page&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;d-page-header&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;d-page-header__title-row&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;d-page-header__title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Yak Management&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;d-page-header__description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Manage your virtual currency system. Configure purchase packages
&lt;&#x2F;span&gt;&lt;span&gt;        and premium features.
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;admin-plugin-config-page__content&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- Tables for stats, packages, features --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This matches Discourse&#x27;s standard admin page structure. Using the
framework&#x27;s components ensures consistency with the rest of the admin area.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;current-status&quot;&gt;Current Status&lt;&#x2F;h3&gt;
&lt;p&gt;The admin UI backend is complete (CRUD endpoints, modals, tables), but the
tab navigation isn&#x27;t working yet. The Settings tab appears, but the
Management tab doesn&#x27;t. This is a routing issue, not a data issue.&lt;&#x2F;p&gt;
&lt;p&gt;The tables work when accessed directly. The functionality is there. The
navigation just needs debugging.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s Next&lt;&#x2F;h2&gt;
&lt;p&gt;The immediate task is fixing the admin UI tab navigation. Once that&#x27;s
working, admins will have full control over the system configuration:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Add&#x2F;edit&#x2F;delete purchase packages (price, Yak amounts, bonus structure)&lt;&#x2F;li&gt;
&lt;li&gt;Configure feature costs and durations (how many Yaks, how long they last)&lt;&#x2F;li&gt;
&lt;li&gt;View system statistics (total wallets, Yaks in circulation, active
features)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Implement the earning system (reward quality posts based on configurable
criteria)&lt;&#x2F;li&gt;
&lt;li&gt;Build the remaining features (post pin, post boost, custom flair)&lt;&#x2F;li&gt;
&lt;li&gt;Add purchase flow integration (Stripe for buying Yaks with real money)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The plugin is functional. Two features work end-to-end. The expiration
system is running. The architecture is modular enough to add new features
without major refactoring.&lt;&#x2F;p&gt;
&lt;p&gt;Part 3 will cover the earning system and completing the admin UI.&lt;&#x2F;p&gt;
&lt;p&gt;The code is on GitHub: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-yaks&quot;&gt;ducks&#x2F;discourse-yaks&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building Yaks: A Virtual Currency System for Discourse (Part 1: Backend Architecture)</title>
          <pubDate>Sat, 11 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-1/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-1/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-yaks-virtual-currency-part-1/">&lt;p&gt;I&#x27;m building a virtual currency system for Discourse. Users earn and spend
&quot;Yaks&quot; on premium post features like colored highlighting, pinned posts, and
custom user flair.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-wallet.png&quot; alt=&quot;Image showing 1000 Yaks in wallet&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;yaks-highlighted-post-1.png&quot; alt=&quot;Post highlighting with purple border&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is Part 1 of a series documenting the development. This post focuses on
the backend architecture. Future posts will cover the frontend UI, earning
mechanisms, and feature implementations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-yaks&quot;&gt;Why Yaks?&lt;&#x2F;h2&gt;
&lt;p&gt;The name works on two levels. First, &quot;yak&quot; as a verb means to talk or chat
persistently. Forums are where people yak.&lt;&#x2F;p&gt;
&lt;p&gt;Second, &quot;yak shaving&quot; is programmer slang for doing a seemingly pointless
series of tasks. Unfortunately, sometimes, talking (arguing) with people online
can feel apparently useless. The name acknowledges that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-virtual-currency&quot;&gt;Why Virtual Currency?&lt;&#x2F;h2&gt;
&lt;p&gt;Forums have moderation tools and permission systems, but they&#x27;re binary: you
can do something or you can&#x27;t. Virtual currency adds a middle layer where users
can temporarily access premium features by spending earned currency.&lt;&#x2F;p&gt;
&lt;p&gt;The use cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Highlight important posts with colored borders&lt;&#x2F;li&gt;
&lt;li&gt;Pin your post to the top of a topic for 24 hours&lt;&#x2F;li&gt;
&lt;li&gt;Add custom flair next to your username&lt;&#x2F;li&gt;
&lt;li&gt;Boost your post in feeds and search results&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These aren&#x27;t permissions. They&#x27;re temporary, purchasable upgrades.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-data-model&quot;&gt;The Data Model&lt;&#x2F;h2&gt;
&lt;p&gt;The system has four core models:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yakwallet&quot;&gt;YakWallet&lt;&#x2F;h3&gt;
&lt;p&gt;Each user has a wallet that tracks their balance and lifetime totals:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakWallet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ActiveRecord::Base
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user
&lt;&#x2F;span&gt;&lt;span&gt;  has_many &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_transactions
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:balance&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numericality: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;greater_than_or_equal_to: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:lifetime_earned&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numericality: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;greater_than_or_equal_to: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:lifetime_spent&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numericality: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;greater_than_or_equal_to: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The wallet is the source of truth for a user&#x27;s currency. Every earn, spend, and
refund goes through it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yaktransaction&quot;&gt;YakTransaction&lt;&#x2F;h3&gt;
&lt;p&gt;Every balance change is logged. This creates an immutable audit trail:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakTransaction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ActiveRecord::Base
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_wallet
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;transaction_type: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;earn: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;spend: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;refund: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Transactions include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Amount (positive for earn&#x2F;refund, negative for spend)&lt;&#x2F;li&gt;
&lt;li&gt;Type (earn, spend, refund)&lt;&#x2F;li&gt;
&lt;li&gt;Source (where it came from: &lt;code&gt;stripe_purchase&lt;&#x2F;code&gt;, &lt;code&gt;quality_post&lt;&#x2F;code&gt;,
&lt;code&gt;feature_post_highlight&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Description (human-readable explanation)&lt;&#x2F;li&gt;
&lt;li&gt;Metadata (JSON field for additional context)&lt;&#x2F;li&gt;
&lt;li&gt;Related post&#x2F;topic (if applicable)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Why log everything? Transparency. Users can see exactly where their Yaks went.
Admins can debug balance issues. Refunds are straightforward because you have
the original transaction ID.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yakfeature&quot;&gt;YakFeature&lt;&#x2F;h3&gt;
&lt;p&gt;Features define what users can spend Yaks on:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeature &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ActiveRecord::Base
&lt;&#x2F;span&gt;&lt;span&gt;  has_many &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_feature_uses
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;presence: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;uniqueness: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:cost&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;numericality: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;greater_than: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:category&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;inclusion: &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;in: &lt;&#x2F;span&gt;&lt;span&gt;%w[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post user topic&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each feature has:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A unique key (&lt;code&gt;post_highlight&lt;&#x2F;code&gt;, &lt;code&gt;post_pin&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Display name and description&lt;&#x2F;li&gt;
&lt;li&gt;Cost in Yaks&lt;&#x2F;li&gt;
&lt;li&gt;Category (post, user, topic)&lt;&#x2F;li&gt;
&lt;li&gt;Settings (duration, default values, constraints)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Currently implemented:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post Highlighting&lt;&#x2F;strong&gt; (25 Yaks): Colored border and background (gold, blue,
red, green, purple)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Planned features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post Pin&lt;&#x2F;strong&gt; (50 Yaks): Pin to top of topic for 24 hours&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Custom Flair&lt;&#x2F;strong&gt; (100 Yaks): Custom text next to username for 30 days&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Post Boost&lt;&#x2F;strong&gt; (30 Yaks): Priority in feeds for 72 hours&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The cost is per feature, not per variation. Post highlighting costs 25 Yaks
regardless of which color you choose.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yakfeatureuse&quot;&gt;YakFeatureUse&lt;&#x2F;h3&gt;
&lt;p&gt;When a user purchases a feature, we create a YakFeatureUse record:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ActiveRecord::Base
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_feature
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_transaction
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:related_post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;class_name: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;optional: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:related_topic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;class_name: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Topic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;optional: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  scope &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:active&lt;&#x2F;span&gt;&lt;span&gt;, -&amp;gt; { where(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expires_at IS NULL OR expires_at &amp;gt; ?&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now) }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This tracks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Who applied the feature&lt;&#x2F;li&gt;
&lt;li&gt;Which feature was applied&lt;&#x2F;li&gt;
&lt;li&gt;What post&#x2F;topic it was applied to&lt;&#x2F;li&gt;
&lt;li&gt;When it expires (if applicable)&lt;&#x2F;li&gt;
&lt;li&gt;Feature-specific data (color choice, custom text, etc.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;code&gt;active&lt;&#x2F;code&gt; scope makes it easy to query currently active features and clean
up expired ones.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-service-layer&quot;&gt;The Service Layer&lt;&#x2F;h2&gt;
&lt;p&gt;Business logic lives in services, not controllers. Controllers handle HTTP,
services handle business rules.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-are-services&quot;&gt;What Are Services?&lt;&#x2F;h3&gt;
&lt;p&gt;Discourse has a standardized service pattern using &lt;code&gt;Service::Base&lt;&#x2F;code&gt;. Services
define:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Contracts&lt;&#x2F;strong&gt;: Input validation using schemas&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Policies&lt;&#x2F;strong&gt;: Preconditions that must be true&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Steps&lt;&#x2F;strong&gt;: The actual execution flow&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Example structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Service::Base
&lt;&#x2F;span&gt;&lt;span&gt;  contract &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    attribute &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:integer
&lt;&#x2F;span&gt;&lt;span&gt;    validates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;presence: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:user_exists
&lt;&#x2F;span&gt;&lt;span&gt;  step &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:do_work
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;private
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;user_exists
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;.exists?(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id:&lt;&#x2F;span&gt;&lt;span&gt; contract.user_id)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;do_work
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# actual logic
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This pattern separates validation, authorization, and execution. If the
contract fails, the service returns an error before hitting any business logic.
If a policy fails, execution stops.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yakfeatureservice&quot;&gt;YakFeatureService&lt;&#x2F;h3&gt;
&lt;p&gt;The Yaks plugin currently uses a simpler service pattern (a plain Ruby class
with class methods) because the logic is straightforward. It could be
refactored to &lt;code&gt;Service::Base&lt;&#x2F;code&gt; if validation becomes more complex.&lt;&#x2F;p&gt;
&lt;p&gt;The service handles:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Validating the feature exists and is enabled&lt;&#x2F;li&gt;
&lt;li&gt;Checking the user can afford it&lt;&#x2F;li&gt;
&lt;li&gt;Checking the feature can be applied (no duplicate active uses)&lt;&#x2F;li&gt;
&lt;li&gt;Creating the transaction&lt;&#x2F;li&gt;
&lt;li&gt;Creating the feature use record&lt;&#x2F;li&gt;
&lt;li&gt;Applying the visual effects&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply_feature&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;related_post&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_data&lt;&#x2F;span&gt;&lt;span&gt;: {})
&lt;&#x2F;span&gt;&lt;span&gt;  feature = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeature&lt;&#x2F;span&gt;&lt;span&gt;.enabled.find_by(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_key:&lt;&#x2F;span&gt;&lt;span&gt; feature_key)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Feature not found&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unless&lt;&#x2F;span&gt;&lt;span&gt; feature
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Insufficient balance&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unless&lt;&#x2F;span&gt;&lt;span&gt; feature.affordable_by?(user)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  wallet = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakWallet&lt;&#x2F;span&gt;&lt;span&gt;.for_user(user)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  transaction = wallet.spend_yaks(
&lt;&#x2F;span&gt;&lt;span&gt;    feature.cost,
&lt;&#x2F;span&gt;&lt;span&gt;    feature_key,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Applied &lt;&#x2F;span&gt;&lt;span&gt;#{feature.feature_name}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post_id:&lt;&#x2F;span&gt;&lt;span&gt; related_post&amp;amp;.id,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metadata:&lt;&#x2F;span&gt;&lt;span&gt; feature_data
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Insufficient balance&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unless&lt;&#x2F;span&gt;&lt;span&gt; transaction
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  feature_use = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakFeatureUse&lt;&#x2F;span&gt;&lt;span&gt;.create!(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span&gt; user,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_feature:&lt;&#x2F;span&gt;&lt;span&gt; feature,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_transaction:&lt;&#x2F;span&gt;&lt;span&gt; transaction,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;related_post:&lt;&#x2F;span&gt;&lt;span&gt; related_post,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expires_at:&lt;&#x2F;span&gt;&lt;span&gt; calculate_expiration(feature),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_data:&lt;&#x2F;span&gt;&lt;span&gt; feature_data
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  apply_feature_effects(feature_key, related_post, feature_data)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature_use:&lt;&#x2F;span&gt;&lt;span&gt; feature_use, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;new_balance:&lt;&#x2F;span&gt;&lt;span&gt; user.yak_balance }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Why put this in a service instead of the controller? Because controllers should
handle HTTP concerns (params, rendering, status codes). Business logic
(validating affordability, deducting currency, applying effects) belongs in a
service.&lt;&#x2F;p&gt;
&lt;p&gt;This makes testing easier. You can test the business logic without setting up
HTTP requests. You can reuse the service from rake tasks, background jobs, or
the Rails console.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-double-balance-check&quot;&gt;The Double Balance Check&lt;&#x2F;h3&gt;
&lt;p&gt;Notice the service checks affordability twice:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# First check
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Insufficient balance&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unless&lt;&#x2F;span&gt;&lt;span&gt; feature.affordable_by?(user)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;wallet = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;YakWallet&lt;&#x2F;span&gt;&lt;span&gt;.for_user(user)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Second check (wallet.spend_yaks returns nil if balance insufficient)
&lt;&#x2F;span&gt;&lt;span&gt;transaction = wallet.spend_yaks(...)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;success: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Insufficient balance&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unless&lt;&#x2F;span&gt;&lt;span&gt; transaction
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Why check twice? Race conditions.&lt;&#x2F;p&gt;
&lt;p&gt;Between the first check and the actual spend, another request could deduct from
the user&#x27;s balance. Without the second check, you could end up with negative
balances.&lt;&#x2F;p&gt;
&lt;p&gt;The first check is an optimization (fail fast before loading the wallet). The
second check is correctness (verify balance inside the database transaction).&lt;&#x2F;p&gt;
&lt;p&gt;The wallet&#x27;s &lt;code&gt;spend_yaks&lt;&#x2F;code&gt; method uses ActiveRecord transactions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;spend_yaks&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;options &lt;&#x2F;span&gt;&lt;span&gt;= {})
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; amount &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;|| balance &amp;lt; amount
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  transaction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    decrement!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:balance&lt;&#x2F;span&gt;&lt;span&gt;, amount)
&lt;&#x2F;span&gt;&lt;span&gt;    increment!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:lifetime_spent&lt;&#x2F;span&gt;&lt;span&gt;, amount)
&lt;&#x2F;span&gt;&lt;span&gt;    yak_transactions.create!(...)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the balance check fails inside the transaction, it returns &lt;code&gt;nil&lt;&#x2F;code&gt; and nothing
is deducted. This prevents concurrent requests from causing overdrafts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;applying-features&quot;&gt;Applying Features&lt;&#x2F;h2&gt;
&lt;p&gt;Features modify post custom fields:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply_feature_effects&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature_data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  current_features = post.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] || {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; feature_key
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_highlight&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    current_features[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;highlight&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;color:&lt;&#x2F;span&gt;&lt;span&gt; feature_data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:color&lt;&#x2F;span&gt;&lt;span&gt;] || &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gold&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;applied_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_i
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;post_pin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    current_features[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pinned&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;enabled: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;applied_at: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.zone.now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_i &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  post.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = current_features
&lt;&#x2F;span&gt;&lt;span&gt;  post.save_custom_fields
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Custom fields are Discourse&#x27;s way of extending models without migrations. The
&lt;code&gt;yak_features&lt;&#x2F;code&gt; field stores a JSON object with all active features on a post.&lt;&#x2F;p&gt;
&lt;p&gt;This data gets serialized to the frontend:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;add_to_serializer(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:post&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:yak_features&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;include_condition: &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; { object.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;].present? }
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  object.custom_fields[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yak_features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The frontend can then read &lt;code&gt;post.yak_features.highlight.color&lt;&#x2F;code&gt; and apply the
appropriate CSS.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;current-state&quot;&gt;Current State&lt;&#x2F;h2&gt;
&lt;p&gt;The backend is complete:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Wallet management with balance tracking&lt;&#x2F;li&gt;
&lt;li&gt;Transaction logging with full audit trail&lt;&#x2F;li&gt;
&lt;li&gt;Feature definitions with costs and durations&lt;&#x2F;li&gt;
&lt;li&gt;Service layer for applying features&lt;&#x2F;li&gt;
&lt;li&gt;Custom field serialization for the frontend&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What&#x27;s missing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Frontend UI for viewing balance and purchasing features&lt;&#x2F;li&gt;
&lt;li&gt;Earning mechanisms (quality posts, admin grants, purchases)&lt;&#x2F;li&gt;
&lt;li&gt;Feature expiration cleanup job&lt;&#x2F;li&gt;
&lt;li&gt;Admin dashboard for managing features and viewing stats&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h2&gt;
&lt;p&gt;Part 2 will cover building the frontend UI: displaying the user&#x27;s balance,
browsing available features, and adding a &quot;spend Yaks&quot; button to posts.&lt;&#x2F;p&gt;
&lt;p&gt;Part 3 will cover earning mechanisms and the admin dashboard.&lt;&#x2F;p&gt;
&lt;p&gt;The code is on GitHub: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-yaks&quot;&gt;ducks&#x2F;discourse-yaks&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building a Live Transit Departure Board with Discourse</title>
          <pubDate>Wed, 08 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/building-transit-tracker-in-discourse/</link>
          <guid>https://jakegoldsborough.com/blog/2025/building-transit-tracker-in-discourse/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/building-transit-tracker-in-discourse/">&lt;p&gt;I&#x27;ve been working at Discourse for a few months now, learning how flexible
the platform is. It&#x27;s a forum. It&#x27;s designed for conversations. But what if
we used it for something completely different?&lt;&#x2F;p&gt;
&lt;p&gt;Something like tracking flights and trains?&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to learn more about Discourse by building something that felt real and
that would force me into actual problems. Most importantly though, I wanted to
build something that involves my interests and would be fun. I love transit
infrastructure and open data so why not a transit tracker using free government
feeds? I had this image in my head: those old split-flap airport departure
boards, the ones that click and whir as letters rotate into place.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-source.jpg&quot; alt=&quot;Split-flap departure board&quot; &#x2F;&gt;
&lt;em&gt;Photo by &lt;a href=&quot;https:&#x2F;&#x2F;unsplash.com&#x2F;@amsterdamcityarchives&quot;&gt;Amsterdam City Archives&lt;&#x2F;a&gt; on
&lt;a href=&quot;https:&#x2F;&#x2F;unsplash.com&#x2F;photos&#x2F;7diobitpahY&quot;&gt;Unsplash&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;What if I could recreate that aesthetic, but powered by Discourse topics
instead of actual flights?&lt;&#x2F;p&gt;
&lt;p&gt;You can see the result here: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-transit-tracker&quot;&gt;discourse-transit-tracker on
GitHub&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-this-makes-no-sense-and-why-i-did-it-anyway&quot;&gt;Why This Makes No Sense (And Why I Did It Anyway)&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s be clear: &lt;strong&gt;Discourse is not a transit tracking system&lt;&#x2F;strong&gt;. It&#x27;s a
forum platform built for human conversations, not GTFS feeds and real-time
departure data.&lt;&#x2F;p&gt;
&lt;p&gt;But that&#x27;s exactly what made it interesting.&lt;&#x2F;p&gt;
&lt;p&gt;Discourse topics are incredibly flexible. They have custom fields, tags,
categories, and a robust permission system. If you squint hard enough, a
flight departure is just a &quot;post&quot; with structured data. The departure time?
A custom field. The status (on-time, delayed, departed)? A tag. The
airline? Maybe a category.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s ridiculous. But it &lt;em&gt;could work&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learning-with-claude-code&quot;&gt;Learning with Claude Code&lt;&#x2F;h2&gt;
&lt;p&gt;I built this entire plugin using Claude Code, Anthropic&#x27;s CLI tool. Not
because I couldn&#x27;t write it myself, but because I wanted to learn Discourse
patterns while writing quality code from the start.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Vibe programming&quot; gets a bad rap. People hear &quot;AI-assisted development&quot;
and think it&#x27;s about blindly accepting generated code. But that&#x27;s not how I
used it. Claude Code became a learning tool. I&#x27;d describe what I wanted to
build, Claude would suggest an approach using Discourse conventions, and
I&#x27;d understand why those patterns exist.&lt;&#x2F;p&gt;
&lt;p&gt;This allowed me to learn the platform faster than reading docs alone would
have taught me. I saw real implementations of custom fields, service
objects, Ember components, and ActiveRecord patterns. And because Claude
follows Discourse&#x27;s style guide and architecture, the code I wrote actually
fits the codebase.&lt;&#x2F;p&gt;
&lt;p&gt;This is what good AI-assisted development looks like: not replacing
understanding, but accelerating it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-technical-stack&quot;&gt;The Technical Stack&lt;&#x2F;h2&gt;
&lt;p&gt;The plugin integrates three data sources, each with its own challenges.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;amtrak-gtfs&quot;&gt;Amtrak (GTFS)&lt;&#x2F;h3&gt;
&lt;p&gt;I built an &lt;code&gt;AmtrakGtfsService&lt;&#x2F;code&gt; that downloads Amtrak&#x27;s GTFS feed (a ZIP
file with CSVs), parses routes, stops, trips, and schedules, and creates
departure topics with detailed stop information. No API key required.&lt;&#x2F;p&gt;
&lt;p&gt;The service:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Downloads and extracts &lt;code&gt;GTFS.zip&lt;&#x2F;code&gt; from Amtrak&#x27;s CDN&lt;&#x2F;li&gt;
&lt;li&gt;Parses &lt;code&gt;routes.txt&lt;&#x2F;code&gt;, &lt;code&gt;stops.txt&lt;&#x2F;code&gt;, &lt;code&gt;trips.txt&lt;&#x2F;code&gt;, and &lt;code&gt;stop_times.txt&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;For each trip in the next 24 hours, creates a topic with:
&lt;ul&gt;
&lt;li&gt;All basic departure info as custom fields&lt;&#x2F;li&gt;
&lt;li&gt;A detailed stops array with lat&#x2F;lon coordinates and times&lt;&#x2F;li&gt;
&lt;li&gt;A formatted schedule table as Post #2&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Running &lt;code&gt;bin&#x2F;rake transit_tracker:import_amtrak&lt;&#x2F;code&gt; processes ~2,300 trips and
creates ~600 departure topics (many trips share the same departure, so they
get merged).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Problem: &quot;Title has already been used&quot;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The first import run worked fine, processing ~2,300 trips and creating ~600
topics. But when I ran it again to test updates, I hit a wall:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Processing 340 trips...
&lt;&#x2F;span&gt;&lt;span&gt;Created 1 topic
&lt;&#x2F;span&gt;&lt;span&gt;Error: Title has already been used (339 times)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Only 1 out of 340 trips succeeded on the second run. The rest failed.&lt;&#x2F;p&gt;
&lt;p&gt;Discourse requires unique topic titles. My title format was: &lt;code&gt;&quot;City of New Orleans to New Orleans at 19:05&quot;&lt;&#x2F;code&gt;. Multiple different trains with the same
route, destination, and departure minute produced identical titles.&lt;&#x2F;p&gt;
&lt;p&gt;My lookup strategy was to find topics by &lt;code&gt;trip_id&lt;&#x2F;code&gt; + &lt;code&gt;service_date&lt;&#x2F;code&gt; stored
in custom fields. That worked fine when topics existed. But on subsequent
runs, when a topic wasn&#x27;t found by custom field (maybe the &lt;code&gt;trip_id&lt;&#x2F;code&gt;
changed), I&#x27;d try to create one, and Discourse would reject it because
another train had already claimed that title.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Fix: Fallback Lookup by Title&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The solution was to add a fallback lookup by title before trying to create:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# First, try to find by trip_id + service_date (the ideal natural key)
&lt;&#x2F;span&gt;&lt;span&gt;topic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Topic&lt;&#x2F;span&gt;&lt;span&gt;.joins(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:_custom_fields&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;topic_custom_fields: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;transit_trip_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value:&lt;&#x2F;span&gt;&lt;span&gt; attributes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:trip_id&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  .where(...)
&lt;&#x2F;span&gt;&lt;span&gt;  .first
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# If still no match, try to find by title to avoid duplicates
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!topic
&lt;&#x2F;span&gt;&lt;span&gt;  title = build_title(attributes)
&lt;&#x2F;span&gt;&lt;span&gt;  category_id = determine_category(attributes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:mode&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  topic = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Topic&lt;&#x2F;span&gt;&lt;span&gt;.where(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;title:&lt;&#x2F;span&gt;&lt;span&gt; title, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;category_id:&lt;&#x2F;span&gt;&lt;span&gt; category_id).first
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; topic
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rails&lt;&#x2F;span&gt;&lt;span&gt;.logger.info &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[TransitTracker] Found existing topic by title,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      will update&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    is_new = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This way, if multiple trips share a title, they merge into the same topic
and get updated instead of failing.&lt;&#x2F;p&gt;
&lt;p&gt;Result: &lt;strong&gt;327 departures created, 0 errors&lt;&#x2F;strong&gt;. All trips within the 24-hour
window imported successfully. The duplicate trips just update the same
topic with fresh data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nyc-mta-subway-gtfs&quot;&gt;NYC MTA Subway (GTFS)&lt;&#x2F;h3&gt;
&lt;p&gt;The NYC MTA subway system is massive. Their GTFS feed contains over 500,000
stop times covering weeks of schedules across dozens of routes.&lt;&#x2F;p&gt;
&lt;p&gt;My first approach was simple: import everything, just like I did with
Amtrak. Parse the entire feed, create topics for every departure in the
next 24 hours.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Problem: 19GB of RAM&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I ran the import and watched my Rails process climb. 1GB. 5GB. 10GB. It
kept going. By the time it finished parsing, &lt;strong&gt;it had consumed over 19GB of
RAM&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Loading and processing 500k+ stop times to create 20,000+ Discourse topics
consumed massive amounts of memory. At scale, big data creates big
problems.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Fix: Reduce the Time Window&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The fix? Reduce the import window from 24 hours to 6 hours:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Only import departures within the next 6 hours
&lt;&#x2F;span&gt;&lt;span&gt;dep_time = parse_gtfs_time(today, first_stop[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:departure_time&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;next if&lt;&#x2F;span&gt;&lt;span&gt; dep_time &amp;lt; now || dep_time &amp;gt; (now + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;.hours)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Result: ~5,000 topics instead of 20,000+, memory usage stayed under 2GB,
and the board still shows plenty of departures. For a live departure board,
you don&#x27;t need train schedules from tomorrow anyway.&lt;&#x2F;p&gt;
&lt;p&gt;The final implementation includes official MTA line colors (red 1&#x2F;2&#x2F;3,
green 4&#x2F;5&#x2F;6, yellow N&#x2F;Q&#x2F;R&#x2F;W, etc.) and creates ~5,000 departure topics with
complete schedules.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;aviationstack-api&quot;&gt;AviationStack API&lt;&#x2F;h3&gt;
&lt;p&gt;Tracks flight departures with gate assignments, delays, and code-share
detection. Requires an API key from &lt;a href=&quot;https:&#x2F;&#x2F;aviationstack.com&#x2F;&quot;&gt;aviationstack.com&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Problem: Duplicate Code-Share Flights&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Multiple airlines sell seats on the same physical flight under different
flight numbers. That&#x27;s called code-sharing. So you might have &lt;code&gt;AA123&lt;&#x2F;code&gt;,
&lt;code&gt;BA456&lt;&#x2F;code&gt;, and &lt;code&gt;IB789&lt;&#x2F;code&gt; all referring to the exact same plane leaving from
Gate E7 at 07:30.&lt;&#x2F;p&gt;
&lt;p&gt;At first, I tried to build my own detection using departure time + gate +
destination as a natural key. But then I looked closer at the AviationStack
API response and found it: a &lt;code&gt;codeshared&lt;&#x2F;code&gt; field that tells you exactly
which flight is the operating carrier.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Fix: Use the API&#x27;s Built-In Field&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Handle code-share flights: use operating carrier as natural key
&lt;&#x2F;span&gt;&lt;span&gt;codeshared = flight_info[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;codeshared&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; codeshared.present?
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This is a marketing carrier selling seats on another airline&amp;#39;s flight
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Use the operating flight as trip_id so all code-shares merge
&lt;&#x2F;span&gt;&lt;span&gt;  operating_flight = codeshared[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flight_iata&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] || codeshared[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flight_icao&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;  trip_id = &amp;quot;#{operating_flight}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;#{departure_info[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scheduled&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Rails&lt;&#x2F;span&gt;&lt;span&gt;.logger.info &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[TransitTracker] Code-share detected:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;#{marketing_flight}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; operated by &lt;&#x2F;span&gt;&lt;span&gt;#{operating_flight}&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Regular flight, use its own flight number
&lt;&#x2F;span&gt;&lt;span&gt;  trip_id = &amp;quot;#{flight_info[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iata&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;#{departure_info[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scheduled&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]}&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Why reinvent the wheel? The API already does the hard work of identifying
code-shares. I just use the operating carrier&#x27;s flight number as the
&lt;code&gt;trip_id&lt;&#x2F;code&gt;, and all marketing carriers automatically merge into the same
topic.&lt;&#x2F;p&gt;
&lt;p&gt;Result: &lt;code&gt;AA 1234 &#x2F; BA 5678 &#x2F; IB 789&lt;&#x2F;code&gt; displayed as one departure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-architecture&quot;&gt;The Architecture&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;topics-as-transit-legs&quot;&gt;Topics as Transit Legs&lt;&#x2F;h3&gt;
&lt;p&gt;Each flight (or train, or bus) is a Discourse topic. I created a
&lt;code&gt;TransitLeg&lt;&#x2F;code&gt; model that wraps Topic and handles all the custom fields:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transit_dep_sched_at&lt;&#x2F;code&gt; (scheduled departure time)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transit_dep_est_at&lt;&#x2F;code&gt; (estimated departure time for delays)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transit_route_short_name&lt;&#x2F;code&gt; (flight numbers)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transit_headsign&lt;&#x2F;code&gt; (destination)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transit_gate&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;transit_platform&lt;&#x2F;code&gt; (where to board)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transit_dest&lt;&#x2F;code&gt; (airport code)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transit_stops&lt;&#x2F;code&gt; (JSON array of all stops with coordinates and times)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Tags handle the mode (&lt;code&gt;flight&lt;&#x2F;code&gt;, &lt;code&gt;train&lt;&#x2F;code&gt;, &lt;code&gt;bus&lt;&#x2F;code&gt;) and status
(&lt;code&gt;status:scheduled&lt;&#x2F;code&gt;, &lt;code&gt;status:delayed&lt;&#x2F;code&gt;, &lt;code&gt;status:departed&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;posts-as-schedule-details&quot;&gt;Posts as Schedule Details&lt;&#x2F;h3&gt;
&lt;p&gt;Here&#x27;s where using Discourse as the foundation really paid off.&lt;&#x2F;p&gt;
&lt;p&gt;When you click on a departure row, it expands to show the complete route
schedule with all stops and arrival&#x2F;departure times. But I didn&#x27;t build a
custom data structure for this. &lt;strong&gt;I used Discourse posts&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Each departure topic has:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Post #1&lt;&#x2F;strong&gt; (the OP): Basic departure info (route, times, gate)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Post #2&lt;&#x2F;strong&gt;: A markdown table with the complete schedule&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Post #3+&lt;&#x2F;strong&gt;: Any delay notifications or status updates&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;When you expand a row, you&#x27;re literally seeing the topic&#x27;s replies rendered
inline. It slides down with a smooth animation, showing the full schedule
table styled to match the departure board aesthetic.&lt;&#x2F;p&gt;
&lt;p&gt;The schedule post looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;markdown&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-markdown &quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;## 🚂 Complete Schedule
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#ebcb8b;&quot;&gt;**Route:**&lt;&#x2F;span&gt;&lt;span&gt; City of New Orleans
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#ebcb8b;&quot;&gt;**Direction:**&lt;&#x2F;span&gt;&lt;span&gt; Chicago
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;| Stop                                  | Arrival | Departure |
&lt;&#x2F;span&gt;&lt;span&gt;|---------------------------------------|---------|-----------|
&lt;&#x2F;span&gt;&lt;span&gt;| New Orleans Union Passenger Terminal  | 12:45   | 12:45     |
&lt;&#x2F;span&gt;&lt;span&gt;| Hammond Amtrak Station                | 13:42   | 13:45     |
&lt;&#x2F;span&gt;&lt;span&gt;| McComb                                | 14:30   | 14:32     |
&lt;&#x2F;span&gt;&lt;span&gt;| ...                                   | ...     | ...       |
&lt;&#x2F;span&gt;&lt;span&gt;| Chicago Union Station                 | 08:15   | 08:15     |
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#b48ead;&quot;&gt;_Schedule times are in local timezone. This is the planned schedule and may
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#b48ead;&quot;&gt;be subject to delays._
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It renders beautifully in the expanded row with the board&#x27;s dark styling.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-this-works-really-well&quot;&gt;Why This Works Really Well&lt;&#x2F;h3&gt;
&lt;p&gt;Using posts instead of a custom schema means:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Update history is built-in&lt;&#x2F;strong&gt;. If a train gets delayed, we post an
update and users see the entire timeline.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Moderation tools work&lt;&#x2F;strong&gt;. If there&#x27;s bad data, moderators can edit posts
using Discourse&#x27;s existing tools.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Comments could work&lt;&#x2F;strong&gt;. Users could reply to departures (we don&#x27;t allow
this now, but the infrastructure is there).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No additional database tables&lt;&#x2F;strong&gt;. Posts are just posts, Discourse
handles all the storage.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;screenshots&quot;&gt;Screenshots&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Flights - Collapsed View&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-planes.png&quot; alt=&quot;Flight departures board showing routes, gates, destinations, and countdowns&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Flights - Expanded View&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-planes-expanded.png&quot; alt=&quot;Expanded flight showing airline details, gates, terminals, and code-share information&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NYC Subway - Collapsed View&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-mta.png&quot; alt=&quot;MTA subway board with authentic line colors&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NYC Subway - Expanded View&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-mta-expanded.png&quot; alt=&quot;Expanded subway departure showing complete stop-by-stop schedule&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Amtrak Trains - Collapsed View&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-trains.png&quot; alt=&quot;Amtrak departure board&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Amtrak Trains - Expanded View&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;transit-tracker-trains-expanded.png&quot; alt=&quot;Expanded train departure showing full station schedule&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bonus-tooling-consistent-screenshots&quot;&gt;Bonus Tooling: Consistent Screenshots&lt;&#x2F;h2&gt;
&lt;p&gt;Getting these screenshots pixel-perfect required some tooling. I wanted to
be able to:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Select a region once&lt;&#x2F;li&gt;
&lt;li&gt;Click things in the browser to expand&#x2F;collapse&lt;&#x2F;li&gt;
&lt;li&gt;Take multiple screenshots of the exact same region&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I built a Nix shell with Wayland screenshot tools (&lt;code&gt;grim&lt;&#x2F;code&gt; + &lt;code&gt;slurp&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nix-shell ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;discourse&#x2F;nix-shells&#x2F;screenshot.nix
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;screenshot-region&lt;&#x2F;span&gt;&lt;span&gt; flight-1.png     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Select region once
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Click to expand in browser
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;screenshot-repeat&lt;&#x2F;span&gt;&lt;span&gt; flight-2.png     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Same exact region
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;slurp&lt;&#x2F;code&gt; tool saves the region geometry, and &lt;code&gt;screenshot-repeat&lt;&#x2F;code&gt; reuses
it for perfect alignment across multiple screenshots.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;I learn best by writing real tools.&lt;&#x2F;strong&gt; Tutorial projects teach syntax, but
they don&#x27;t force you into the messy, real-world problems that make you
actually understand a framework.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;discourse-topics-are-more-flexible-than-you-think&quot;&gt;Discourse Topics Are More Flexible Than You Think&lt;&#x2F;h3&gt;
&lt;p&gt;Custom fields, tags, and categories gave me all the structured data I needed.
Topics aren&#x27;t just &quot;posts&quot;. They&#x27;re flexible containers for any kind of
information.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;posts-are-the-perfect-update-mechanism&quot;&gt;Posts Are the Perfect Update Mechanism&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of building a custom &quot;updates&quot; system with timestamps and status
changes, I just used Discourse posts. When a delay happens, post an update.
The topic becomes a living history of what happened to that departure.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;entity-resolution-check-your-data-before-building-logic&quot;&gt;Entity Resolution: Check Your Data Before Building Logic&lt;&#x2F;h3&gt;
&lt;p&gt;My first implementation created duplicate topics for every code-share
flight. I started building my own deduplication logic using a natural key
(departure time + gate + destination). But then I actually read the API
response and found it: a &lt;code&gt;codeshared&lt;&#x2F;code&gt; field that identifies which flights
are the same. I was about to solve a problem the API had already solved for
me.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gtfs-parsing-has-edge-cases&quot;&gt;GTFS Parsing Has Edge Cases&lt;&#x2F;h3&gt;
&lt;p&gt;GTFS times can exceed 24 hours (e.g., &quot;25:30:00&quot; means 1:30 AM the next
day). ZIP files can have encoding issues. Stop sequences aren&#x27;t always
sequential. Real-world data is messy.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;performance-matters-at-scale&quot;&gt;Performance Matters at Scale&lt;&#x2F;h3&gt;
&lt;p&gt;The MTA feed has 500k+ stop times. A 6-hour import window instead of 24
hours keeps memory usage reasonable and topic counts manageable (~5,000
instead of 20,000+).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;is-this-practical&quot;&gt;Is This Practical?&lt;&#x2F;h2&gt;
&lt;p&gt;Probably not for real transit tracking. But it&#x27;s a great example of pushing
Discourse in unexpected directions to understand the platform deeply.&lt;&#x2F;p&gt;
&lt;p&gt;The same pattern (topics as structured data + posts as updates) could work
for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Package tracking (topics = packages, posts = scan events)&lt;&#x2F;li&gt;
&lt;li&gt;Server status boards (topics = servers, posts = incidents)&lt;&#x2F;li&gt;
&lt;li&gt;Deployment pipelines (topics = deploys, posts = stage completions)&lt;&#x2F;li&gt;
&lt;li&gt;Event schedules (topics = sessions, posts = time&#x2F;room changes)&lt;&#x2F;li&gt;
&lt;li&gt;Support ticket boards (topics = tickets, expandable = full history)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The split-flap aesthetic is a bonus.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;try-it-yourself&quot;&gt;Try It Yourself&lt;&#x2F;h2&gt;
&lt;p&gt;The plugin is open source:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ducks&#x2F;discourse-transit-tracker&quot;&gt;ducks&#x2F;discourse-transit-tracker&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Clone it, run the Amtrak import (no API key required), and see what
Discourse topics can become when you push them beyond forum discussions.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>My First Official Contribution to Discourse</title>
          <pubDate>Mon, 06 Oct 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://jakegoldsborough.com/blog/2025/first-official-discourse-contribution/</link>
          <guid>https://jakegoldsborough.com/blog/2025/first-official-discourse-contribution/</guid>
          <description xml:base="https://jakegoldsborough.com/blog/2025/first-official-discourse-contribution/">&lt;p&gt;This past week marked a small but meaningful milestone for me - I submitted and
merged my first pull request to the Discourse core project. The fix is simple
but important: handle a &lt;code&gt;nil&lt;&#x2F;code&gt; commit URL path in &lt;code&gt;Admin::PluginsController&lt;&#x2F;code&gt;,
preventing a 500 error in the plugins admin UI.
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;discourse&#x2F;discourse&#x2F;pull&#x2F;35186&quot;&gt;github.com&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;debugging-a-random-admin-panel-crash&quot;&gt;Debugging a random admin panel crash&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve been at Discourse for about two and a half months now, and most of my work
so far has been focused on internal tools and infrastructure rather than the
main codebase itself. It&#x27;s been a great way to learn how things fit together
behind the scenes, but I&#x27;ve been itching to make a direct impact on the project
that everyone actually sees and uses.&lt;&#x2F;p&gt;
&lt;p&gt;This PR was a small but deliberate step in that direction. I wanted to start
contributing to the public codebase, not just to fix a bug, but to get more
familiar with the patterns, tests, and expectations that make Discourse what it
is. It&#x27;s one thing to understand how we run it internally - it&#x27;s another to
touch the core code that powers thousands of communities around the world.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s also a kind of quiet satisfaction in cleaning up a small edge case like
this. It&#x27;s the kind of detail that no one notices when it&#x27;s working, but it
makes the whole system sturdier. That&#x27;s the kind of work I enjoy doing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-the-bug-was-succinctly&quot;&gt;What the bug was, succinctly&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;&lt;code&gt;lib&#x2F;plugin&#x2F;instance.rb&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;, the method &lt;code&gt;discourse_owned?&lt;&#x2F;code&gt; was calling
&lt;code&gt;.split&lt;&#x2F;code&gt; on &lt;code&gt;parsed_commit_url.path&lt;&#x2F;code&gt; without checking if &lt;code&gt;path&lt;&#x2F;code&gt; might be
&lt;code&gt;nil&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;In the scenario where a plugin has a commit URL parsed successfully but the
&lt;code&gt;path&lt;&#x2F;code&gt; is &lt;code&gt;nil&lt;&#x2F;code&gt; (for example, plugins without a git remote configured), this
led to a crash (HTTP 500) in &lt;code&gt;&#x2F;admin&#x2F;plugins&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;My patch adds a &lt;code&gt;nil&lt;&#x2F;code&gt; check: if &lt;code&gt;parsed_commit_url.path&lt;&#x2F;code&gt; is &lt;code&gt;nil&lt;&#x2F;code&gt;, the method
returns &lt;code&gt;false&lt;&#x2F;code&gt; (or skips the split) gracefully. I also added a test case to
assert this behavior.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In short: prevent a rare but real crash, and make the behavior deterministic in
that edge case.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-the-review-and-merge-went&quot;&gt;How the review and merge went&lt;&#x2F;h3&gt;
&lt;p&gt;The PR moved relatively smoothly:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I opened the PR and described the bug and proposed patch.&lt;&#x2F;li&gt;
&lt;li&gt;The maintainers reviewed and approved it.&lt;&#x2F;li&gt;
&lt;li&gt;After passing all checks, the PR was merged into &lt;code&gt;main&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The branch was deleted afterward.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It was a small change - only +11 &#x2F; -1 lines - but I made sure the fix was clean,
covered by a test, and clearly explained. Small contributions like this build
trust and open the door to more.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;takeaways&quot;&gt;Takeaways&lt;&#x2F;h4&gt;
&lt;p&gt;Fixing something this small reminded me that even the simplest changes can
improve confidence in a codebase. It also helped me see more of the moving parts
that make Discourse work - how plugins tie in, how errors surface in the admin
panel, and how tests are structured to catch regressions early.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s easy to think of &quot;first contributions&quot; as symbolic, but what really mattered
was understanding how to move through the process: spot an issue, confirm it,
write a clean fix, explain it clearly, and see it merged. That flow is something
I want to keep refining.&lt;&#x2F;p&gt;
&lt;p&gt;Going forward, I want to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Explore other bug reports in Discourse (especially in plugins and the admin
UI)&lt;&#x2F;li&gt;
&lt;li&gt;Take on slightly more complex patches (refactors, performance improvements,
new features)&lt;&#x2F;li&gt;
&lt;li&gt;Use this experience to contribute in a modular, maintainable way&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
    </channel>
</rss>
